"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[20800],{1980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=n(85893),o=n(11151);const i={slug:"adding-lastmod-to-sitemap-git-commit-date",title:"Adding lastmod to sitemap based on git commits",authors:"johnnyreilly",tags:["node.js","docusaurus"],image:"./title-image.png",description:"This post demonstrates enriching an XML sitemap with `lastmod` timestamps based on git commits.",hide_table_of_contents:!1},a=void 0,l={permalink:"/adding-lastmod-to-sitemap-git-commit-date",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2022-11-25-adding-lastmod-to-sitemap-git-commit-date/index.md",source:"@site/blog/2022-11-25-adding-lastmod-to-sitemap-git-commit-date/index.md",title:"Adding lastmod to sitemap based on git commits",description:"This post demonstrates enriching an XML sitemap with `lastmod` timestamps based on git commits.",date:"2022-11-25T00:00:00.000Z",formattedDate:"November 25, 2022",tags:[{label:"node.js",permalink:"/tags/node-js"},{label:"docusaurus",permalink:"/tags/docusaurus"}],readingTime:3.415,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"adding-lastmod-to-sitemap-git-commit-date",title:"Adding lastmod to sitemap based on git commits",authors:"johnnyreilly",tags:["node.js","docusaurus"],image:"./title-image.png",description:"This post demonstrates enriching an XML sitemap with `lastmod` timestamps based on git commits.",hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Docusaurus: Using fontaine to reduce custom font cumulative layout shift",permalink:"/docusaurus-using-fontaine-to-reduce-custom-font-cumulative-layout-shift"},nextItem:{title:"XML: read and write with Node.js",permalink:"/xml-read-and-write-with-node-js"}},r={image:n(43417).Z,authorsImageUrls:[void 0]},d=[{value:"Reading git log in Node.js",id:"reading-git-log-in-nodejs",level:2},{value:"From sitemap to git log",id:"from-sitemap-to-git-log",level:2},{value:"GitHub Actions - <code>fetch_depth</code>",id:"github-actions---fetch_depth",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["This post demonstrates enriching an XML sitemap with ",(0,s.jsx)(t.code,{children:"lastmod"})," timestamps based on git commits."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"title image reading &quot;Adding lastmod to sitemap based on git commits&quot; with XML and Docusaurus logos",src:n(49716).Z+"",width:"800",height:"450",loading:"eager",fetchpriority:"high"})}),"\n",(0,s.jsx)(t.h2,{id:"reading-git-log-in-nodejs",children:"Reading git log in Node.js"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/xml-read-and-write-with-node-js",children:"In the last post I showed how to manipulate XML in Node.js, and filter our sitemap"}),". In this post we'll build upon what we did last time, read the git log in Node.js and use that to power a ",(0,s.jsx)(t.code,{children:"lastmod"})," property."]}),"\n",(0,s.jsxs)(t.p,{children:["To read the git log in Node.js we'll use the ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/simple-git",children:"simple-git"})," package. It's a great package that makes it easy to read the git log. Other stuff too - but that's what we care about today."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"yarn add simple-git\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To work with ",(0,s.jsx)(t.code,{children:"simple-git"})," we need to create a ",(0,s.jsx)(t.code,{children:"Git"})," instance. We can do that like so:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { simpleGit, SimpleGit, SimpleGitOptions } from 'simple-git';\n\nfunction getSimpleGit(): SimpleGit {\n  const baseDir = path.resolve(process.cwd(), '..');\n\n  const options: Partial<SimpleGitOptions> = {\n    baseDir,\n    binary: 'git',\n    maxConcurrentProcesses: 6,\n    trimmed: false,\n  };\n\n  const git = simpleGit(options);\n\n  return git;\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"from-sitemap-to-git-log",children:"From sitemap to git log"}),"\n",(0,s.jsx)(t.p,{children:"It's worth pausing to consider what our sitemap looks like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">\n  <url>\n    <loc>https://johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n  <url>\n    <loc>https://johnnyreilly.com/2022/09/20/react-usesearchparamsstate</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n  \x3c!-- ... --\x3e\n</urlset>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you look at the URL (",(0,s.jsx)(t.code,{children:"loc"}),") you can see that it's fairly easy to determine the path to the original markdown file. If we take ",(0,s.jsx)(t.a,{href:"https://johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants",children:"https://johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants"}),", we can see that the path to the markdown file is ",(0,s.jsx)(t.code,{children:"blog-website/blog/2012-01-07-standing-on-shoulders-of-giants/index.md"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["As long as we don't have a custom slug in play (and I rarely do), we have a reliable way to get from blog post URL (",(0,s.jsx)(t.code,{children:"loc"}),") to markdown file. With that we can use ",(0,s.jsx)(t.code,{children:"simple-git"})," to get the git log for that file. We can then use that to populate the ",(0,s.jsx)(t.code,{children:"lastmod"})," property."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const dateBlogUrlRegEx = /(\\d\\d\\d\\d\\/\\d\\d\\/\\d\\d)\\/(.+)/;\n\nasync function enrichUrlsWithLastmod(\n  filteredUrls: SitemapUrl[],\n): Promise<SitemapUrl[]> {\n  const git = getSimpleGit();\n\n  const urls: SitemapUrl[] = [];\n  for (const url of filteredUrls) {\n    if (urls.includes(url)) {\n      continue;\n    }\n\n    try {\n      // example url.loc: https://johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants\n      const pathWithoutRootUrl = url.loc.replace(rootUrl + '/', ''); // eg 2012/01/07/standing-on-shoulders-of-giants\n\n      const match = pathWithoutRootUrl.match(dateBlogUrlRegEx);\n\n      if (!match || !match[1] || !match[2]) {\n        urls.push(url);\n        continue;\n      }\n\n      const date = match[1].replaceAll('/', '-'); // eg 2012-01-07\n      const slug = match[2]; // eg standing-on-shoulders-of-giants\n\n      const file = `blog-website/blog/${date}-${slug}/index.md`;\n      const log = await git.log({\n        file,\n      });\n\n      const lastmod = log.latest?.date.substring(0, 10);\n      urls.push(lastmod ? { ...url, lastmod } : url);\n      console.log(url.loc, lastmod);\n    } catch (e) {\n      console.log('file date not looked up', url.loc, e);\n      urls.push(url);\n    }\n  }\n  return urls;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Above we're using a regular expression to extract the date and slug from the URL. We then use those to construct the path to the markdown file. We then use ",(0,s.jsx)(t.code,{children:"simple-git"})," to get the git log for that file. We then use the latest commit date to populate the ",(0,s.jsx)(t.code,{children:"lastmod"})," property, and push that onto the ",(0,s.jsx)(t.code,{children:"urls"})," array."]}),"\n",(0,s.jsxs)(t.p,{children:["Finally we return the ",(0,s.jsx)(t.code,{children:"urls"})," array and write that to the sitemap before we write it out:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"sitemap.urlset.url = await enrichUrlsWithLastmod(filteredUrls);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Our new sitemap looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">\n  <url>\n    <loc>https://johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n    <lastmod>2021-12-19</lastmod>\n  </url>\n  <url>\n    <loc>https://johnnyreilly.com/2012/01/14/jqgrid-its-just-far-better-grid</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n    <lastmod>2022-11-03</lastmod>\n  </url>\n  \x3c!-- ... --\x3e\n</urlset>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You see the ",(0,s.jsx)(t.code,{children:"lastmod"})," property has been populated for URLs based upon the most recent commit for that file. Yay!"]}),"\n",(0,s.jsxs)(t.h2,{id:"github-actions---fetch_depth",children:["GitHub Actions - ",(0,s.jsx)(t.code,{children:"fetch_depth"})]}),"\n",(0,s.jsx)(t.p,{children:"You might think we were done (I thought we were done), but we're not. We're not done because we're using GitHub Actions to build the site."}),"\n",(0,s.jsxs)(t.p,{children:["When I tested this locally, it worked fine. However, when I pushed it to GitHub Actions, it surfaced a ",(0,s.jsx)(t.code,{children:"latest.date"})," which wasn't populated with the value you'd hope. The reason was that the ",(0,s.jsx)(t.code,{children:"fetch_depth"})," was set to 1 (the default). This meant that the git log wasn't providing the information we'd hope for. By changing the ",(0,s.jsx)(t.code,{children:"fetch_depth"})," to 0 the situation is resolved."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"- uses: actions/checkout@v3\n  with:\n    # Number of commits to fetch. 0 indicates all history for all branches and tags.\n    # Default: 1\n    fetch-depth: 0\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},43417:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/title-image-83e5a8ec1684626cf7373c7c6c529fe4.png"},49716:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/title-image-83e5a8ec1684626cf7373c7c6c529fe4.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>a});var s=n(67294);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);