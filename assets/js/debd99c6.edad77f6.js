"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["95252"],{18668:function(t,e,s){s.r(e),s.d(e,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return c},metadata:function(){return n},toc:function(){return l}});var n=s(81826),r=s(85893),a=s(50065);let c={slug:"typescript-abstract-classes-and-constructors",title:"TypeScript, abstract classes, and constructors",authors:"johnnyreilly",tags:["typescript"],image:"./vs-code-abstract-screenshot.png",hide_table_of_contents:!1,description:"TypeScript abstract classes cannot be directly instantiated, but only used as a base for non-abstract subclasses with specific constructor usage rules."},o=void 0,i={image:s(5904).Z,authorsImageUrls:[void 0]},l=[];function u(t){let e={p:"p",...(0,a.a)(),...t.components};return(0,r.jsx)(e.p,{children:"TypeScript has the ability to define classes as abstract. This means they cannot be instantiated directly, only non-abstract subclasses can be. Let's take a look at what this means when it comes to constructor usage."})}function p(t={}){let{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},5904:function(t,e,s){s.d(e,{Z:function(){return n}});let n=s.p+"assets/images/vs-code-abstract-screenshot-aff89651ee4a8e45696b778b00b02c05.png"},50065:function(t,e,s){s.d(e,{Z:function(){return o},a:function(){return c}});var n=s(67294);let r={},a=n.createContext(r);function c(t){let e=n.useContext(a);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:c(t.components),n.createElement(a.Provider,{value:e},t.children)}},81826:function(t){t.exports=JSON.parse('{"permalink":"/typescript-abstract-classes-and-constructors","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2021-08-01-typescript-abstract-classes-and-constructors/index.md","source":"@site/blog/2021-08-01-typescript-abstract-classes-and-constructors/index.md","title":"TypeScript, abstract classes, and constructors","description":"TypeScript abstract classes cannot be directly instantiated, but only used as a base for non-abstract subclasses with specific constructor usage rules.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."}],"readingTime":4.7,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"typescript-abstract-classes-and-constructors","title":"TypeScript, abstract classes, and constructors","authors":"johnnyreilly","tags":["typescript"],"image":"./vs-code-abstract-screenshot.png","hide_table_of_contents":false,"description":"TypeScript abstract classes cannot be directly instantiated, but only used as a base for non-abstract subclasses with specific constructor usage rules."},"unlisted":false,"prevItem":{"title":"TypeScript 4.4 and more readable code","permalink":"/typescript-4-4-more-readable-code"},"nextItem":{"title":"Directory.Build.props: C# 9 for all your projects","permalink":"/directory-build-props-c-sharp-9-for-all"}}')}}]);