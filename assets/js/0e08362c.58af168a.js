"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["9353"],{59725:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var i=n(39119),a=n(85893),r=n(50065);let o={slug:"partialview-tostring",title:"PartialView.ToString()",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"Learn three ways to turn a `PartialViewResult` into a `string` to reuse the result returned by a controller in a JSON payload."},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"What are we trying to do?",id:"what-are-we-trying-to-do",level:2},{value:"Inheritance (it&#39;s so yesterday darling)",id:"inheritance-its-so-yesterday-darling",level:2},{value:"Extension method (sexier syntax)",id:"extension-method-sexier-syntax",level:2},{value:"Favouring Composition over Inheritance (testable)",id:"favouring-composition-over-inheritance-testable",level:2}];function h(e){let t={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In the name of ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",children:"DRY"})," I found myself puzzling how one could take a ",(0,a.jsx)(t.code,{children:"PartialViewResult"})," and render it as a ",(0,a.jsx)(t.code,{children:"string"}),". Simple, right?"]}),"\n",(0,a.jsxs)(t.p,{children:["In fact, in my head this was already a solved problem. I mean I've written about this ",(0,a.jsx)(t.a,{href:"/rendering-partial-view-to-string",children:"before"})," already! Except I haven't. Not really - what I did back then was link to what someone else had written and say \"yay! well done chap - like he said!\". It turns out that was a bad move. That blog appears to be gone and so I'm back to where I was. Ug. Lesson learned."]}),"\n",(0,a.jsx)(t.h2,{id:"what-are-we-trying-to-do",children:"What are we trying to do?"}),"\n",(0,a.jsxs)(t.p,{children:["So, for the second time of asking, here is how to take a ",(0,a.jsx)(t.code,{children:"PartialViewResult"})," and turn it into a ",(0,a.jsx)(t.code,{children:"string"}),". It's an invaluable technique to deal with certain scenarios."]}),"\n",(0,a.jsxs)(t.p,{children:["In my own case I have a toolbar in my application that is first pushed into the UI in my ",(0,a.jsx)(t.code,{children:"_Layout.cshtml"})," by means of a trusty ",(0,a.jsx)(t.code,{children:'@Html.Action("Toolbar")'}),". I wanted to be able to re-use the ",(0,a.jsx)(t.code,{children:"PartialViewResult"})," returned by ",(0,a.jsx)(t.code,{children:"Toolbar"})," on my controller inside a ",(0,a.jsx)(t.code,{children:"JSON"})," payload. And despite the title of this post, ",(0,a.jsx)(t.code,{children:"PartialView.ToString()"}),(0,a.jsx)(t.em,{children:"doesn't"})," quite cut the mustard. Obvious really, if it did then why would I be writing this and you be reading this?"]}),"\n",(0,a.jsx)(t.p,{children:"The solution is actually fairly simple. And, purely for swank, I'm going to offer it you 3 ways. Whatever's your poison."}),"\n",(0,a.jsx)(t.h2,{id:"inheritance-its-so-yesterday-darling",children:"Inheritance (it's so yesterday darling)"}),"\n",(0,a.jsxs)(t.p,{children:["Yes there was a time when everything was inheritance based. You were rewarded handsomely for making sure that was the case. However, times have changed and (with good reason) people tend to ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Composition_over_inheritance",children:"favour composition over inheritance"}),". So, perhaps just for the memories, let first offer you the inheritance based approach:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"protected string ConvertPartialViewToString(PartialViewResult partialView)\n{\n  using (var sw = new StringWriter())\n  {\n    partialView.View = ViewEngines.Engines\n      .FindPartialView(ControllerContext, partialView.ViewName).View;\n\n    var vc = new ViewContext(\n      ControllerContext, partialView.View, partialView.ViewData, partialView.TempData, sw);\n    partialView.View.Render(vc, sw);\n\n    var partialViewString = sw.GetStringBuilder().ToString();\n\n    return partialViewString;\n  }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"The idea being that the above method is placed onto a base controller which your controllers subclass. Thus using this method inside one of the controllers is as simple as:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"var toolbarHtml = ConvertPartialViewToString(partialViewResult);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"extension-method-sexier-syntax",children:"Extension method (sexier syntax)"}),"\n",(0,a.jsxs)(t.p,{children:["So the next choice is implementing this as an extension method. Here's my static class which adds ",(0,a.jsx)(t.code,{children:"ConvertToString"})," onto ",(0,a.jsx)(t.code,{children:"PartialViewResult"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"using System.IO;\nusing System.Web.Mvc;\n\nnamespace My.Utilities.Extensions\n{\n  public static class PartialViewResultExtensions\n  {\n    public static string ConvertToString(this PartialViewResult partialView,\n                                              ControllerContext controllerContext)\n    {\n      using (var sw = new StringWriter())\n      {\n        partialView.View = ViewEngines.Engines\n          .FindPartialView(controllerContext, partialView.ViewName).View;\n\n        var vc = new ViewContext(\n          controllerContext, partialView.View, partialView.ViewData, partialView.TempData, sw);\n        partialView.View.Render(vc, sw);\n\n        var partialViewString = sw.GetStringBuilder().ToString();\n\n        return partialViewString;\n      }\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"I don't know about you but I do love an extension method - it often makes for much more readable code. In this case we can use:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"var toolbarHtml = partialViewResult.ConvertToString(ControllerContext);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Which I think we can all agree is really rather lovely. Perhaps it would be more lovely if I didn't have to pass ",(0,a.jsx)(t.code,{children:"ControllerContext"})," - but hey! Still quite nice."]}),"\n",(0,a.jsx)(t.h2,{id:"favouring-composition-over-inheritance-testable",children:"Favouring Composition over Inheritance (testable)"}),"\n",(0,a.jsxs)(t.p,{children:['Although ASP.Net MVC was designed to be testable there are times when you think "really? Can it be that hard?". In fact for a well thought through discussion on the topic I advise you read ',(0,a.jsx)(t.a,{href:"http://volaresystems.com/blog/post/2010/08/19/Dont-mock-HttpContext",children:"this"}),". (I'm aware of the irony implicit in linking to another blog post in a blog post that I only wrote because I first linked to another blog which vanished.... Infinite recursion anybody?)"]}),"\n",(0,a.jsx)(t.p,{children:"The conclusion of the linked blog post is twofold"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Don't mock HTTPContext"}),"\n",(0,a.jsxs)(t.li,{children:["Use the ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Facade_pattern",children:"facade pattern"})," instead"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Having testable code is not a optional bauble in my view - it's a necessity. So with my final approach that's exactly what I'll do."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"using System.Web.Mvc;\n\nnamespace My.Interfaces\n{\n  public interface IMvcInternals\n  {\n    string ConvertPartialViewToString(PartialViewResult partialView, ControllerContext controllerContext);\n  }\n}\n\n// ....\n\nusing System.IO;\nusing System.Web.Mvc;\nusing My.Interfaces;\n\nnamespace My.Utilities\n{\n  public class MvcInternals : IMvcInternals\n  {\n    public string ConvertPartialViewToString(PartialViewResult partialView,\n                                             ControllerContext controllerContext)\n    {\n      using (var sw = new StringWriter())\n      {\n        partialView.View = ViewEngines.Engines\n          .FindPartialView(controllerContext, partialView.ViewName).View;\n\n        var vc = new ViewContext(\n          controllerContext, partialView.View, partialView.ViewData, partialView.TempData, sw);\n        partialView.View.Render(vc, sw);\n\n        var partialViewString = sw.GetStringBuilder().ToString();\n\n        return partialViewString;\n      }\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["So here I have a simple interface with a ",(0,a.jsx)(t.code,{children:"ConvertPartialViewToString"})," method on it. This interface can be passed into a controller and then used like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"var toolbarHtml = _mvcInternals.ConvertPartialViewToString(partialViewResult, ControllerContext);\n"})}),"\n",(0,a.jsx)(t.p,{children:"Ah... that's the sweet mellifluous sound of easily testable code."})]})}function d(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return o}});var i=n(67294);let a={},r=i.createContext(a);function o(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},39119:function(e){e.exports=JSON.parse('{"permalink":"/partialview-tostring","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2015-03-20-partialview-tostring/index.md","source":"@site/blog/2015-03-20-partialview-tostring/index.md","title":"PartialView.ToString()","description":"Learn three ways to turn a `PartialViewResult` into a `string` to reuse the result returned by a controller in a JSON payload.","date":"2015-03-20T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":3.71,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"partialview-tostring","title":"PartialView.ToString()","authors":"johnnyreilly","tags":["asp.net"],"hide_table_of_contents":false,"description":"Learn three ways to turn a `PartialViewResult` into a `string` to reuse the result returned by a controller in a JSON payload."},"unlisted":false,"prevItem":{"title":"How to activate your emoji keyboard on Android 5.0 (Lollipop)","permalink":"/how-to-activate-your-emoji-keyboard-on-android"},"nextItem":{"title":"Hey tsconfig.json, where have you been all my life?","permalink":"/hey-tsconfigjson-where-have-you-been"}}')}}]);