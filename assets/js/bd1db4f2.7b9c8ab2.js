"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[37160],{70173:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var r=o(74848),s=o(28453);const n={slug:"ts-loader-project-references-first-blood",title:"ts-loader Project References: First Blood",authors:"johnnyreilly",tags:["ts-loader","webpack","typescript"],hide_table_of_contents:!1,description:"ts-loader now supports TypeScripts project references. However, composite projects built with `outDir` on Windows cannot be consumed by ts-loader... yet"},i=void 0,l={permalink:"/ts-loader-project-references-first-blood",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-09-23-ts-loader-project-references-first-blood/index.md",source:"@site/blog/2018-09-23-ts-loader-project-references-first-blood/index.md",title:"ts-loader Project References: First Blood",description:"ts-loader now supports TypeScripts project references. However, composite projects built with `outDir` on Windows cannot be consumed by ts-loader... yet",date:"2018-09-23T00:00:00.000Z",tags:[{inline:!1,label:"ts-loader",permalink:"/tags/ts-loader",description:"The TypeScript loader for webpack."},{inline:!1,label:"webpack",permalink:"/tags/webpack",description:"The webpack module bundler."},{inline:!1,label:"TypeScript",permalink:"/tags/typescript",description:"The TypeScript programming language."}],readingTime:3.39,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"ts-loader-project-references-first-blood",title:"ts-loader Project References: First Blood",authors:"johnnyreilly",tags:["ts-loader","webpack","typescript"],hide_table_of_contents:!1,description:"ts-loader now supports TypeScripts project references. However, composite projects built with `outDir` on Windows cannot be consumed by ts-loader... yet"},unlisted:!1,prevItem:{title:"Brand New Fonting Awesomeness",permalink:"/font-awesome-brand-icons-react"},nextItem:{title:"Semantic Versioning and Definitely Typed",permalink:"/semantic-versioning-and-definitely-typed"}},c={authorsImageUrls:[void 0]},d=[{value:"TL;DR",id:"tldr",level:2},{value:"Like <code>tsc</code>, but <em>not</em> like <code>tsc --build</code>",id:"like-tsc-but-not-like-tsc---build",level:2},{value:"\u201cHey, don\u2019t you think that sounds kind of useless and terrible?\u201d",id:"hey-dont-you-think-that-sounds-kind-of-useless-and-terrible",level:2},{value:"<code>outDir</code> Windows problemo.",id:"outdir-windows-problemo",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["So ",(0,r.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/project-references.html",children:"project references"})," eh? They shipped with ",(0,r.jsx)(t.a,{href:"https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/#project-references",children:"TypeScript 3"}),". We've just shipped initial support for project references in ",(0,r.jsx)(t.a,{href:"https://github.com/TypeStrong/ts-loader/releases/tag/v5.2.0",children:(0,r.jsx)(t.code,{children:"ts-loader v5.2.0"})}),". All the hard work was done by the amazing ",(0,r.jsx)(t.a,{href:"https://twitter.com/atcb",children:"Andrew Branch"}),". In fact I'd recommend taking a gander at ",(0,r.jsx)(t.a,{href:"https://github.com/TypeStrong/ts-loader/pull/817",children:"the PR"}),". Yay Andrew!"]}),"\n",(0,r.jsxs)(t.p,{children:["This post will take us through the nature of the support for project references in ts-loader now and what we hope the future will bring. It ",(0,r.jsx)("strike",{children:"rips off shamelessly"})]}),"\n",(0,r.jsxs)(t.p,{children:["borrows from the ",(0,r.jsx)(t.a,{href:"https://github.com/TypeStrong/ts-loader#projectreferences-boolean-defaultfalse",children:(0,r.jsx)(t.code,{children:"README/index.md"})})," documentation that Andrew wrote as part of the PR. Because I am not above stealing."]}),"\n",(0,r.jsx)(t.h2,{id:"tldr",children:"TL;DR"}),"\n",(0,r.jsxs)(t.p,{children:["Using project references currently requires building referenced projects outside of ts-loader. We don\u2019t want to keep it that way, but we\u2019re releasing what we\u2019ve got now. To try it out, you\u2019ll need to pass ",(0,r.jsx)(t.code,{children:"projectReferences: true"})," to ",(0,r.jsx)(t.code,{children:"loaderOptions"}),"."]}),"\n",(0,r.jsxs)(t.h2,{id:"like-tsc-but-not-like-tsc---build",children:["Like ",(0,r.jsx)(t.code,{children:"tsc"}),", but ",(0,r.jsx)(t.em,{children:"not"})," like ",(0,r.jsx)(t.code,{children:"tsc --build"})]}),"\n",(0,r.jsxs)(t.p,{children:["ts-loader has partial support for ",(0,r.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/project-references.html",children:"project references"})," in that it will ",(0,r.jsx)(t.em,{children:"load"})," dependent composite projects that are already built, but will not currently ",(0,r.jsx)(t.em,{children:"build/rebuild"})," those upstream projects. The best way to explain exactly what this means is through an example. Say you have a project with a project reference pointing to the ",(0,r.jsx)(t.code,{children:"lib/"})," directory:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"tsconfig.json\napp.ts\nlib/\n  tsconfig.json\n  niftyUtil.ts\n"})}),"\n",(0,r.jsxs)(t.p,{children:["And we\u2019ll assume that the root ",(0,r.jsx)(t.code,{children:"tsconfig.json"})," has ",(0,r.jsx)(t.code,{children:'{ "references": { "path": "lib" } }'}),", which means that any import of a file that\u2019s part of the ",(0,r.jsx)(t.code,{children:"lib"})," sub-project is treated as a reference to another project, not just a reference to a TypeScript file. Before discussing how ts-loader handles this, it\u2019s helpful to review at a really basic level what ",(0,r.jsx)(t.code,{children:"tsc"})," itself does here. If you were to run ",(0,r.jsx)(t.code,{children:"tsc"})," on this tiny example project, the build would fail with the error:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"error TS6305: Output file 'lib/niftyUtil.d.ts' has not been built from source file 'lib/niftyUtil.ts'.\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Using project references actually instructs ",(0,r.jsx)(t.code,{children:"tsc"}),(0,r.jsx)(t.em,{children:"not"})," to build anything that\u2019s part of another project from source, but rather to look for any ",(0,r.jsx)(t.code,{children:".d.ts"})," and ",(0,r.jsx)(t.code,{children:".js"})," files that have already been generated from a previous build. Since we\u2019ve never built the project in ",(0,r.jsx)(t.code,{children:"lib"})," before, those files don\u2019t exist, so building the root project fails. Still just thinking about how ",(0,r.jsx)(t.code,{children:"tsc"})," works, there are two options to make the build succeed: either run ",(0,r.jsx)(t.code,{children:"tsc -p lib/tsconfig.json"}),(0,r.jsx)(t.em,{children:"first"}),", or simply run ",(0,r.jsx)(t.code,{children:"tsc --build"}),", which will figure out that ",(0,r.jsx)(t.code,{children:"lib"})," hasn\u2019t been built and build it first for you."]}),"\n",(0,r.jsxs)(t.p,{children:["Ok, so how is that relevant to ts-loader? Because the best way to think about what ts-loader does with project references is that it acts like ",(0,r.jsx)(t.code,{children:"tsc"}),", but ",(0,r.jsx)(t.em,{children:"not"})," like ",(0,r.jsx)(t.code,{children:"tsc --build"}),". If you run ts-loader on a project that\u2019s using project references, and any upstream project hasn\u2019t been built, you\u2019ll get the exact same ",(0,r.jsx)(t.code,{children:"error TS6305"})," that you would get with ",(0,r.jsx)(t.code,{children:"tsc"}),". If you modify a source file in an upstream project and don\u2019t rebuild that project, ",(0,r.jsx)(t.code,{children:"ts-loader"})," won\u2019t have any idea that you\u2019ve changed anything\u2014it will still be looking at the output from the last time you ",(0,r.jsx)(t.em,{children:"built"})," that file."]}),"\n",(0,r.jsx)(t.h2,{id:"hey-dont-you-think-that-sounds-kind-of-useless-and-terrible",children:"\u201cHey, don\u2019t you think that sounds kind of useless and terrible?\u201d"}),"\n",(0,r.jsxs)(t.p,{children:["Well, sort of. You can consider it a work-in-progress. It\u2019s true that on its own, as of today, ts-loader doesn\u2019t have everything you need to take advantage of project references in webpack. In practice, though, ",(0,r.jsx)(t.em,{children:"consuming"})," upstream projects and ",(0,r.jsx)(t.em,{children:"building"})," upstream projects are somewhat separate concerns. Building them will likely come in a future release. For background, see the ",(0,r.jsx)(t.a,{href:"https://github.com/TypeStrong/ts-loader/issues/815",children:"original issue"}),"."]}),"\n",(0,r.jsxs)(t.h2,{id:"outdir-windows-problemo",children:[(0,r.jsx)(t.code,{children:"outDir"})," Windows problemo."]}),"\n",(0,r.jsxs)(t.p,{children:["At the moment, composite projects built using the ",(0,r.jsxs)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html",children:[(0,r.jsx)(t.code,{children:"outDir"})," compiler option"]}),' cannot be consumed using ts-loader on Windows. If you try to, ts-loader throws a "',(0,r.jsx)(t.code,{children:"has not been built from source file"}),'" error. ',(0,r.jsx)(t.a,{href:"https://github.com/TypeStrong/ts-loader/pull/817#issuecomment-422245998",children:"You can see Andrew and I puzzling over it in the PR."})," We don't know why yet; it's possible there's a bug in ",(0,r.jsx)(t.code,{children:"tsc"}),". It's more likely there's a bug in ",(0,r.jsx)(t.code,{children:"ts-loader"}),". Hopefully it's going to get solved at some point. (Hey, maybe you're the one to solve it!) Either way, we didn't want to hold back from releasing. So if you're building on Windows then avoid building ",(0,r.jsx)(t.code,{children:"composite"})," projects using ",(0,r.jsx)(t.code,{children:"outDir"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>l});var r=o(96540);const s={},n=r.createContext(s);function i(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);