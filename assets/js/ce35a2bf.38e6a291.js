"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[82094],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},64885:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/new-pipeline-af7c998d7c1ce67f30ffee8756145e81.webp"},80183:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>l});var t=i(81357),r=i(74848),o=i(28453);const s={slug:"create-pipeline-with-azure-devops-api",title:"Create a Pipeline with the Azure DevOps API",authors:"johnnyreilly",tags:["azure pipelines","azure devops","typescript"],image:"./new-pipeline.webp",hide_table_of_contents:!1,description:"Learn how to create an Azure Pipeline using the Azure DevOps REST API with a personal access token and JSON file, as detailed in this post."},a=void 0,p={image:i(64885).A,authorsImageUrls:[void 0]},l=[{value:"curling a pipeline",id:"curling-a-pipeline",level:2},{value:"What if I want to use TypeScript?",id:"what-if-i-want-to-use-typescript",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Creating an Azure Pipeline using the Azure DevOps REST API is possible, but badly documented. This post goes through how to do this; both using curl and using TypeScript."}),"\n",(0,r.jsxs)(n.p,{children:["If you're curious as to how to list pipelines, then check out my post on ",(0,r.jsx)(n.a,{href:"/create-pipeline-with-azure-devops-api",children:"listing pipelines with the Azure DevOps API"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"curling-a-pipeline",children:"curling a pipeline"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/rest/api/azure/devops/pipelines/pipelines/create?view=azure-devops-rest-7.1",children:"documentation"})," for creating an Azure Pipeline using the Azure DevOps API is somewhat lacking. It doesn't mention key parameters like ",(0,r.jsx)(n.code,{children:"repository"})," and ",(0,r.jsx)(n.code,{children:"path"})," which are necessary to create a correctly configured pipeline. However, whilst it isn't documented officially, it can be done. You just need the recipe."]}),"\n",(0,r.jsx)(n.p,{children:"Here's a curl to make you a pipeline:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl  --user '':'PERSONAL_ACCESS_TOKEN' --header \"Content-Type: application/json\" --header \"Accept:application/json\" https://dev.azure.com/organisation-name/sandbox/_apis/pipelines?api-version=7.1 -d @makepipeline.json\n"})}),"\n",(0,r.jsx)(n.p,{children:"Looking at the above there's two things you need:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["A personal access token. You can make one of those here: ",(0,r.jsx)(n.a,{href:"https://dev.azure.com/organisation-name/_usersSettings/tokens",children:"https://dev.azure.com/organisation-name/_usersSettings/tokens"})," (where ",(0,r.jsx)(n.code,{children:"organisation-name"})," is the name of your organisation)"]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"makepipeline.json"})," file, which contains the details of the pipeline you want to create:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "folder": null,\n  "name": "pipeline-made-by-api",\n  "configuration": {\n    "type": "yaml",\n    "path": "/azure-pipelines.yml",\n    "repository": {\n      "id": "guid-of-repo-id",\n      "name": "my-repo",\n      "type": "azureReposGit"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Let's talk through the significant properties above:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"folder"})," - can be ",(0,r.jsx)(n.code,{children:"null"})," if you'd like the pipeline to be created in the root of Pipelines; otherwise provide the folder name. Incidentally a ",(0,r.jsx)(n.code,{children:"null"})," will be translated into a value of ",(0,r.jsx)(n.code,{children:"\\\\"})," which appears to be the magic value which represents the root."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," - your pipeline needs a name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path"})," - this is the path to the yaml pipelines file in the repo. Note we're creating the pipeline itself here; what's actually in the pipeline sits in that file."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"repository.id"})," - this is the guid that represents the repo you're creating the pipeline for. You can find this out by going to your equivalent ",(0,r.jsx)(n.a,{href:"https://dev.azure.com/organisation-name/project-name/_settings/repositories",children:"https://dev.azure.com/organisation-name/project-name/_settings/repositories"})," (substituting in appropriate values) and looking up your repository there."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"repository.name"})," - the name of your repo"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When you execute your curl you should be returned some JSON along these lines:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "_links": {\n    "self": {\n      "href": "https://dev.azure.com/organisation-name/2184049d-8bc4-484a-91e6-00fca6b5b19f/_apis/pipelines/975?revision=1"\n    },\n    "web": {\n      "href": "https://dev.azure.com/organisation-name/2184049d-8bc4-484a-91e6-00fca6b5b19f/_build/definition?definitionId=975"\n    }\n  },\n  "configuration": {\n    "path": "/azure-pipelines.yml",\n    "repository": {\n      "id": "9a72560d-1622-4016-93dd-32ac85b96d03",\n      "type": "azureReposGit"\n    },\n    "type": "yaml"\n  },\n  "url": "https://dev.azure.com/organisation-name/2184049d-8bc4-484a-91e6-00fca6b5b19f/_apis/pipelines/975?revision=1",\n  "id": 975,\n  "revision": 1,\n  "name": "pipeline-made-by-api",\n  "folder": "\\\\"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And inside Azure DevOps you'll now have a shiny new pipeline:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The new pipeline",src:i(98016).A+"",width:"1824",height:"720",loading:"lazy"})}),"\n",(0,r.jsx)(n.h2,{id:"what-if-i-want-to-use-typescript",children:"What if I want to use TypeScript?"}),"\n",(0,r.jsxs)(n.p,{children:["If you'd like to do the same in TypeScript, you can use the ",(0,r.jsx)(n.code,{children:"azure-devops-node-api"})," package. Just like the official documentaion, the package is short of the necessary parameters to create a pipeline such as ",(0,r.jsx)(n.code,{children:"repository"})," and ",(0,r.jsx)(n.code,{children:"path"}),". But by combining a little ",(0,r.jsx)(n.code,{children:"fetch"})," with the ",(0,r.jsx)(n.code,{children:"azure-devops-node-api"})," you can get the job done."]}),"\n",(0,r.jsx)(n.p,{children:"Here's a TypeScript example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import * as nodeApi from 'azure-devops-node-api';\n\nfunction makeWebApi({\n  organization,\n  personalAccessToken,\n}: {\n  organization: string;\n  personalAccessToken: string;\n}) {\n  const authHandler = nodeApi.getPersonalAccessTokenHandler(\n    personalAccessToken,\n    /** allowCrossOriginAuthentication */ true,\n  );\n\n  const webApi = new nodeApi.WebApi(\n    `https://dev.azure.com/${organization}`,\n    authHandler,\n  );\n\n  return webApi;\n}\n\ninterface RepositoryNameAndId {\n  id: string;\n  name: string;\n}\n\nasync function getRepository({\n  personalAccessToken,\n  organization,\n  projectName,\n  repositoryName,\n}: {\n  personalAccessToken: string;\n  organization: string;\n  projectName: string;\n  repositoryName: string;\n}): Promise<RepositoryNameAndId> {\n  const webApi = makeWebApi({ organization, personalAccessToken });\n  const gitApi = await webApi.getGitApi();\n\n  const repository = await gitApi.getRepository(repositoryName, projectName);\n  if (!repository?.id || !repository?.name) {\n    throw new Error(`Repository ${repositoryName} not found`);\n  }\n\n  return {\n    name: repository.name,\n    id: repository.id,\n  };\n}\n\nasync function createPipeline({\n  personalAccessToken,\n  organization,\n  projectName,\n  repositoryName,\n  repositoryId,\n  pathToAzurePipelinesYml,\n  pipelineName,\n  folderName,\n}: {\n  personalAccessToken: string;\n  organization: string;\n  projectName: string;\n  repositoryName: string;\n  repositoryId: string;\n  /** eg \"/azure-pipelines.yml\" */\n  pathToAzurePipelinesYml: string;\n  pipelineName: string;\n  folderName: string;\n}): Promise<CreatePipelinePostResponse> {\n  // https://learn.microsoft.com/en-us/rest/api/azure/devops/pipelines/pipelines/create?view=azure-devops-rest-7.1\n  const url = `https://dev.azure.com/${organization}/${projectName}/_apis/pipelines?api-version=7.1`;\n\n  const payload: CreatePipelinePostPayload = {\n      folder: folderName,\n      name: pipelineName,\n      configuration: {\n        type: 'yaml',\n        path: pathToAzurePipelinesYml,\n        repository: {\n          id: repositoryId,\n          name: repositoryName,\n          type: 'azureReposGit',\n        },\n      },\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${Buffer.from(`PAT:${personalAccessToken}`).toString('base64')}`,\n        'X-TFS-FedAuthRedirect': 'Suppress',\n      },\n      body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status.toString()}`);\n    }\n\n    const data = (await response.json()) as CreatePipelinePostResponse;\n\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}\n\ninterface CreatePipelinePostPayload {\n  configuration: {\n    type: 'yaml';\n    path: string;\n    repository: {\n      id: string;\n      type: 'azureReposGit';\n      name: string;\n    };\n  };\n  folder: null | string;\n  name: string;\n}\n\ninterface CreatePipelinePostResponse {\n  _links: {\n    self: {\n      href: string;\n    };\n    web: {\n      href: string;\n    };\n  };\n  configuration: {\n    path: string;\n    repository: {\n      id: string;\n      type: string;\n    };\n    type: string;\n  };\n  folder: string;\n  id: number;\n  name: string;\n  revision: number;\n  url: string;\n}\n\n// Get the repository so we can make the pipeline\nconst repository = await getRepository({\n  personalAccessToken: personalAccessToken,\n  organization: azureDevOpsOrganization,\n  projectName: azureDevOpsProject,\n  repositoryName: azureDevOpsRepository,\n});\n\nconst pipeline = await createPipeline({\n  pathToAzurePipelinesYml: '/.azuredevops/azure-pipeline.yml',\n  folderName: repository.name, // this could be `null` if you want the pipeline to be created in the root\n  pipelineName: `${repository.name}-azure-pipeline`,\n  organization: azureDevOpsOrganization,\n  projectName: azureDevOpsProject,\n  repositoryName: repository.name,\n  repositoryId: repository.id,\n  personalAccessToken: personalAccessToken,\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"The above code:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Gets the repository id using the ",(0,r.jsx)(n.code,{children:"azure-devops-node-api"})]}),"\n",(0,r.jsxs)(n.li,{children:["Creates a pipeline using ",(0,r.jsx)(n.code,{children:"fetch"})," and the Azure DevOps REST API, with the types we've created to help us understand the shape of the data we're working with"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},81357:e=>{e.exports=JSON.parse('{"permalink":"/create-pipeline-with-azure-devops-api","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2021-05-08-create-pipeline-with-azure-devops-api/index.md","source":"@site/blog/2021-05-08-create-pipeline-with-azure-devops-api/index.md","title":"Create a Pipeline with the Azure DevOps API","description":"Learn how to create an Azure Pipeline using the Azure DevOps REST API with a personal access token and JSON file, as detailed in this post.","date":"2021-05-08T00:00:00.000Z","tags":[{"inline":false,"label":"Azure Pipelines","permalink":"/tags/azure-pipelines","description":"The Azure Pipelines CI / CD service."},{"inline":false,"label":"Azure DevOps","permalink":"/tags/azure-devops","description":"The Azure DevOps suite of tools."},{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."}],"readingTime":4.57,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"create-pipeline-with-azure-devops-api","title":"Create a Pipeline with the Azure DevOps API","authors":"johnnyreilly","tags":["azure pipelines","azure devops","typescript"],"image":"./new-pipeline.webp","hide_table_of_contents":false,"description":"Learn how to create an Azure Pipeline using the Azure DevOps REST API with a personal access token and JSON file, as detailed in this post."},"unlisted":false,"prevItem":{"title":"Azurite and Table Storage in a dev container","permalink":"/azurite-and-table-storage-dev-container"},"nextItem":{"title":"Blog Archive for Docusaurus","permalink":"/blog-archive-for-docusaurus"}}')},98016:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/new-pipeline-af7c998d7c1ce67f30ffee8756145e81.webp"}}]);