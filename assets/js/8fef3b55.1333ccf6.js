"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["99384"],{26760:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return c}});var o=n(49456),s=n(85893),r=n(50065);let a={slug:"blog-archive-for-docusaurus",title:"Blog Archive for Docusaurus",authors:"johnnyreilly",tags:["docusaurus","webpack"],image:"./docusaurus-blog-archive.png",hide_table_of_contents:!1,description:"Learn how to add a blog archive to your Docusaurus blog and browse through historic posts. Follow the articles steps to implement."},i=void 0,l={image:n(25026).Z,authorsImageUrls:[void 0]},c=[{value:"Updated 2021-09-01",id:"updated-2021-09-01",level:2},{value:"Blogger&#39;s blog archive",id:"bloggers-blog-archive",level:2},{value:"Handrolling a Docusaurus blog archive",id:"handrolling-a-docusaurus-blog-archive",level:2},{value:"Obtaining the blog data",id:"obtaining-the-blog-data",level:2},{value:"Presenting it",id:"presenting-it",level:2},{value:"Bringing it all together",id:"bringing-it-all-together",level:2}];function d(e){let t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:'Docusaurus doesn\'t ship with "blog archive" functionality. By which I mean, something that allows you to look at an overview of your historic blog posts. It turns out it is fairly straightforward to implement your own. This post does just that.'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Docusaurus blog archive",src:n(6421).Z+"",width:"3014",height:"1226",loading:"eager",fetchpriority:"high"})}),"\n",(0,s.jsx)(t.h2,{id:"updated-2021-09-01",children:"Updated 2021-09-01"}),"\n",(0,s.jsxs)(t.p,{children:["As of ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/docusaurus/releases/tag/v2.0.0-beta.6",children:"v2.0.0-beta.6"}),", Docusauras ",(0,s.jsx)(t.em,{children:"does"})," ship with blog archive functionality that lives at the ",(0,s.jsx)(t.code,{children:"archive"})," route. This is down to the work of ",(0,s.jsx)(t.a,{href:"https://github.com/gabrielcsapo",children:"Gabriel Csapo"})," in ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/docusaurus/pull/5428",children:"this PR"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"If you'd like to know how to build your own, read on... But you may not need to!"}),"\n",(0,s.jsx)(t.h2,{id:"bloggers-blog-archive",children:"Blogger's blog archive"}),"\n",(0,s.jsxs)(t.p,{children:["I recently went through the exercise of ",(0,s.jsx)(t.a,{href:"/definitive-guide-to-migrating-from-blogger-to-docusaurus",children:"migrating my blog from Blogger to Docusaurus"}),". I found that ",(0,s.jsx)(t.a,{href:"https://docusaurus.io/",children:"Docusaurus"})," was a tremendous platform upon which to build a blog, but it was missing a feature from Blogger that I valued highly; the blog archive:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Blogger blog archive",src:n(48835).Z+"",width:"283",height:"545",loading:"lazy"})}),"\n",(0,s.jsx)(t.p,{children:"The blog archive is a way by which you can browse through your historic blog posts. A place where you can see all that you've written and when. I find this very helpful. I didn't really want to make the jump without having something like that around."}),"\n",(0,s.jsx)(t.h2,{id:"handrolling-a-docusaurus-blog-archive",children:"Handrolling a Docusaurus blog archive"}),"\n",(0,s.jsx)(t.p,{children:"Let's create our own blog archive in the land of the Docusaurus."}),"\n",(0,s.jsxs)(t.p,{children:["We'll create a new page under the ",(0,s.jsx)(t.code,{children:"pages"})," directory called ",(0,s.jsx)(t.code,{children:"blog-archive.js"})," and we'll add a link to it in our ",(0,s.jsx)(t.code,{children:"docusaurus.config.js"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'    navbar: {\n      // ...\n      items: [\n        // ...\n        { to: "blog-archive", label: "Blog Archive", position: "left" },\n        // ...\n      ],\n    },\n'})}),"\n",(0,s.jsx)(t.h2,{id:"obtaining-the-blog-data",children:"Obtaining the blog data"}),"\n",(0,s.jsxs)(t.p,{children:["This page will be powered by webpack's ",(0,s.jsx)(t.a,{href:"https://webpack.js.org/guides/dependency-management/#requirecontext",children:(0,s.jsx)(t.code,{children:"require.context"})})," function. ",(0,s.jsx)(t.code,{children:"require.context"})," allows us to use webpack to obtain all of the blog modules:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"require.context('../../blog', false, //index.md/);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The code snippet above looks in the ",(0,s.jsx)(t.code,{children:"blog"})," directory for files / modules ending with the suffix ",(0,s.jsx)(t.code,{children:'"/index.md"'}),". Each one of these represents a blog post. The function returns a ",(0,s.jsx)(t.code,{children:"context"})," object, which contains all of the data about these modules."]}),"\n",(0,s.jsxs)(t.p,{children:["By reducing over that data we can construct an array of objects called ",(0,s.jsx)(t.code,{children:"allPosts"})," that could drive a blog archive screen. Let's do this below, and we'll use ",(0,s.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html",children:"TypeScripts JSDoc support"})," to type our JavaScript:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'/**\n * @typedef {Object} BlogPost - creates a new type named \'BlogPost\'\n * @property {string} date - eg "2021-04-24T00:00:00.000Z"\n * @property {string} formattedDate - eg "April 24, 2021"\n * @property {string} title - eg "The Service Now API and TypeScript Conditional Types"\n * @property {string} permalink - eg "/2021/04/24/service-now-api-and-typescript-conditional-types"\n */\n\n/** @type {BlogPost[]} */\nconst allPosts = ((ctx) => {\n  /** @type {string[]} */\n  const blogpostNames = ctx.keys();\n\n  return blogpostNames.reduce(\n    (blogposts, blogpostName, i) => {\n      const module = ctx(blogpostName);\n      const { date, formattedDate, title, permalink } = module.metadata;\n      return [\n        ...blogposts,\n        {\n          date,\n          formattedDate,\n          title,\n          permalink,\n        },\n      ];\n    },\n    /** @type {string[]}>} */ [],\n  );\n})(require.context(\'../../blog\', true, /index.md/));\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Observe the ",(0,s.jsx)(t.code,{children:"metadata"})," property in the screenshot below:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"require.context",src:n(88428).Z+"",width:"2824",height:"1182",loading:"lazy"})}),"\n",(0,s.jsxs)(t.p,{children:["This gives us a flavour of the data available in the modules and shows how we pull out the bits that we need; ",(0,s.jsx)(t.code,{children:"date"}),", ",(0,s.jsx)(t.code,{children:"formattedDate"}),", ",(0,s.jsx)(t.code,{children:"title"})," and ",(0,s.jsx)(t.code,{children:"permalink"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"presenting-it",children:"Presenting it"}),"\n",(0,s.jsxs)(t.p,{children:["Now we have our data in the form of ",(0,s.jsx)(t.code,{children:"allPosts"}),", let's display it. We'd like to break it up into posts by year, which we can do by reducing and looking at the ",(0,s.jsx)(t.code,{children:"date"})," property which is an ISO-8601 style date string taking a format that begins ",(0,s.jsx)(t.code,{children:"yyyy-mm-dd"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"const postsByYear = allPosts.reduceRight((posts, post) => {\n  const year = post.date.split('-')[0];\n  const yearPosts = posts.get(year) || [];\n  return posts.set(year, [post, ...yearPosts]);\n}, /** @type {Map<string, BlogPost[]>} */ new Map());\n\nconst yearsOfPosts = Array.from(postsByYear, ([year, posts]) => ({\n  year,\n  posts,\n}));\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now we're ready to blast it onto the screen. We'll create two components:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Year"})," - which is a list of the posts for a given year and"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"BlogArchive"})," - which is the overall page and maps over ",(0,s.jsx)(t.code,{children:"yearsOfPosts"})," to render ",(0,s.jsx)(t.code,{children:"Year"}),"s"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'function Year(\n  /** @type {{ year: string; posts: BlogPost[]; }} */ { year, posts },\n) {\n  return (\n    <div className={clsx(\'col col--4\', styles.feature)}>\n      <h3>{year}</h3>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.date}>\n            <Link to={post.permalink}>\n              {post.formattedDate} - {post.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction BlogArchive() {\n  return (\n    <Layout title="Blog Archive">\n      <header className={clsx(\'hero hero--primary\', styles.heroBanner)}>\n        <div className="container">\n          <h1 className="hero__title">Blog Archive</h1>\n          <p className="hero__subtitle">Historic posts</p>\n        </div>\n      </header>\n      <main>\n        {yearsOfPosts && yearsOfPosts.length > 0 && (\n          <section className={styles.features}>\n            <div className="container">\n              <div className="row">\n                {yearsOfPosts.map((props, idx) => (\n                  <Year key={idx} {...props} />\n                ))}\n              </div>\n            </div>\n          </section>\n        )}\n      </main>\n    </Layout>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"bringing-it-all-together",children:"Bringing it all together"}),"\n",(0,s.jsx)(t.p,{children:"We're finished! We have a delightful looking blog archive plumbed into our blog:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Docusaurus blog archive",src:n(6421).Z+"",width:"3014",height:"1226",loading:"eager",fetchpriority:"high"})}),"\n",(0,s.jsxs)(t.p,{children:["It is possible that a blog archive may become natively available in Docusaurus in future. If you're interested in this, you can track ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/docusaurus/issues/4431",children:"this issue"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Here's the final code - which you can see ",(0,s.jsx)(t.a,{href:"https://johnnyreilly.com/blog-archive",children:"powering this screen"}),". And you can see the code that backs it ",(0,s.jsx)(t.a,{href:"https://github.com/johnnyreilly/blog.johnnyreilly.com/blob/main/blog-website/src/pages/blog-archive.js",children:"here"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import React from 'react';\nimport clsx from 'clsx';\nimport Layout from '@theme/Layout';\nimport Link from '@docusaurus/Link';\nimport styles from './styles.module.css';\n\n/**\n * @typedef {Object} BlogPost - creates a new type named 'BlogPost'\n * @property {string} date - eg \"2021-04-24T00:00:00.000Z\"\n * @property {string} formattedDate - eg \"April 24, 2021\"\n * @property {string} title - eg \"The Service Now API and TypeScript Conditional Types\"\n * @property {string} permalink - eg \"/2021/04/24/service-now-api-and-typescript-conditional-types\"\n */\n\n/** @type {BlogPost[]} */\nconst allPosts = ((ctx) => {\n  /** @type {string[]} */\n  const blogpostNames = ctx.keys();\n\n  return blogpostNames.reduce(\n    (blogposts, blogpostName, i) => {\n      const module = ctx(blogpostName);\n      const { date, formattedDate, title, permalink } = module.metadata;\n      return [\n        ...blogposts,\n        {\n          date,\n          formattedDate,\n          title,\n          permalink,\n        },\n      ];\n    },\n    /** @type {BlogPost[]}>} */ [],\n  );\n  // @ts-ignore\n})(require.context('../../blog', true, /index.md/));\n\nconst postsByYear = allPosts.reduceRight((posts, post) => {\n  const year = post.date.split('-')[0];\n  const yearPosts = posts.get(year) || [];\n  return posts.set(year, [post, ...yearPosts]);\n}, /** @type {Map<string, BlogPost[]>} */ new Map());\n\nconst yearsOfPosts = Array.from(postsByYear, ([year, posts]) => ({\n  year,\n  posts,\n}));\n\nfunction Year(\n  /** @type {{ year: string; posts: BlogPost[]; }} */ { year, posts },\n) {\n  return (\n    <div className={clsx('col col--4', styles.feature)}>\n      <h3>{year}</h3>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.date}>\n            <Link to={post.permalink}>\n              {post.formattedDate} - {post.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction BlogArchive() {\n  return (\n    <Layout title=\"Blog Archive\">\n      <header className={clsx('hero hero--primary', styles.heroBanner)}>\n        <div className=\"container\">\n          <h1 className=\"hero__title\">Blog Archive</h1>\n          <p className=\"hero__subtitle\">Historic posts</p>\n        </div>\n      </header>\n      <main>\n        {yearsOfPosts && yearsOfPosts.length > 0 && (\n          <section className={styles.features}>\n            <div className=\"container\">\n              <div className=\"row\">\n                {yearsOfPosts.map((props, idx) => (\n                  <Year key={idx} {...props} />\n                ))}\n              </div>\n            </div>\n          </section>\n        )}\n      </main>\n    </Layout>\n  );\n}\n\nexport default BlogArchive;\n"})})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},25026:function(e,t,n){n.d(t,{Z:function(){return o}});let o=n.p+"assets/images/docusaurus-blog-archive-f9281238fad82398a8dacf083f802c2c.png"},48835:function(e,t,n){n.d(t,{Z:function(){return o}});let o=n.p+"assets/images/blogger-blog-archive-small-c9dea0bee98e3cb7e45f56eddff28435.webp"},6421:function(e,t,n){n.d(t,{Z:function(){return o}});let o=n.p+"assets/images/docusaurus-blog-archive-f9281238fad82398a8dacf083f802c2c.png"},88428:function(e,t,n){n.d(t,{Z:function(){return o}});let o=n.p+"assets/images/require.context-dc18c038f7100a816deea61f47c7ab50.png"},50065:function(e,t,n){n.d(t,{Z:function(){return i},a:function(){return a}});var o=n(67294);let s={},r=o.createContext(s);function a(e){let t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}},49456:function(e){e.exports=JSON.parse('{"permalink":"/blog-archive-for-docusaurus","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2021-05-01-blog-archive-for-docusaurus/index.md","source":"@site/blog/2021-05-01-blog-archive-for-docusaurus/index.md","title":"Blog Archive for Docusaurus","description":"Learn how to add a blog archive to your Docusaurus blog and browse through historic posts. Follow the articles steps to implement.","date":"2021-05-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/tags/docusaurus","description":"The Docusaurus static site generator."},{"inline":false,"label":"webpack","permalink":"/tags/webpack","description":"The webpack module bundler."}],"readingTime":5.395,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"blog-archive-for-docusaurus","title":"Blog Archive for Docusaurus","authors":"johnnyreilly","tags":["docusaurus","webpack"],"image":"./docusaurus-blog-archive.png","hide_table_of_contents":false,"description":"Learn how to add a blog archive to your Docusaurus blog and browse through historic posts. Follow the articles steps to implement."},"unlisted":false,"prevItem":{"title":"Create a Pipeline with the Azure DevOps API","permalink":"/create-pipeline-with-azure-devops-api"},"nextItem":{"title":"The Service Now API and TypeScript Conditional Types","permalink":"/service-now-api-and-typescript-conditional-types"}}')}}]);