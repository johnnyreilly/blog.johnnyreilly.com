"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[67163],{65128:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=n(74848),o=n(28453);const a={slug:"large-language-models-view-models-backend-for-frontend",title:"Large Language Models, Open API, View Models and the Backend for Frontend Pattern",authors:"johnnyreilly",image:"./title-image.png",tags:["azure","c#","ai"],description:"To integrate LLMs with APIs, there is a need for the LLM equivalent of view models and the backend for frontend pattern. This discusses it in the context of Semantic Kernel.",hide_table_of_contents:!1},r=void 0,s={permalink:"/large-language-models-view-models-backend-for-frontend",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-05-03-large-language-models-view-models-backend-for-frontend/index.md",source:"@site/blog/2024-05-03-large-language-models-view-models-backend-for-frontend/index.md",title:"Large Language Models, Open API, View Models and the Backend for Frontend Pattern",description:"To integrate LLMs with APIs, there is a need for the LLM equivalent of view models and the backend for frontend pattern. This discusses it in the context of Semantic Kernel.",date:"2024-05-03T00:00:00.000Z",tags:[{inline:!1,label:"Azure",permalink:"/tags/azure",description:"The Microsoft cloud platform."},{inline:!1,label:"C#",permalink:"/tags/csharp",description:"The C# programming language."},{inline:!1,label:"AI",permalink:"/tags/ai",description:"All things AI - Artificial Intelligence, Large Language Models and the like."}],readingTime:7.38,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly",page:null}],frontMatter:{slug:"large-language-models-view-models-backend-for-frontend",title:"Large Language Models, Open API, View Models and the Backend for Frontend Pattern",authors:"johnnyreilly",image:"./title-image.png",tags:["azure","c#","ai"],description:"To integrate LLMs with APIs, there is a need for the LLM equivalent of view models and the backend for frontend pattern. This discusses it in the context of Semantic Kernel.",hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Serialising ASP.NET method calls for later execution",permalink:"/serialising-aspnet-method-calls-for-later-execution"},nextItem:{title:"Using Kernel Memory to Chunk Documents into Azure AI Search",permalink:"/using-kernel-memory-to-chunk-documents-into-azure-ai-search"}},l={image:n(50502).A,authorsImageUrls:[void 0]},d=[];function c(e){const t={a:"a",em:"em",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Of late, I've been involved in work to integrate APIs into LLM interactions, using ",(0,i.jsx)(t.a,{href:"https://github.com/microsoft/semantic-kernel",children:"Semantic Kernel"}),". This post is something of a brain dump on the topic. Given how fast this space is moving, I expect what is written here to be out of date, possibly even ",(0,i.jsx)(t.em,{children:"before"})," I hit publish. But nevertheless, I hope it's useful."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"title image reading &quot;Large Language Models, Open API, View Models and the Backend for Frontend Pattern&quot; with the Azure Open AI / Swagger logos",src:n(3961).A+"",width:"800",height:"450",loading:"eager",fetchpriority:"high"})})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},50502:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/title-image-bed363141bbcb8dfb82b1db42671f1d0.png"},3961:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/title-image-bed363141bbcb8dfb82b1db42671f1d0.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var i=n(96540);const o={},a=i.createContext(o);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);