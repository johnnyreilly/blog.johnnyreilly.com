"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[70553],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),y=n,m=c["".concat(l,".").concat(y)]||c[y]||d[y]||i;return a?r.createElement(m,s(s({ref:t},u),{},{components:a})):r.createElement(m,s({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},55682:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});a(67294);var r=a(3905);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}const o={slug:"bicep-user-defined-types-and-bash-single-item-arrays",title:"Bicep user defined types and Bash single item arrays",authors:"johnnyreilly",tags:["bicep"],image:"./title-image.png",description:"The error \"Expected a value of type 'Array', but received a value of type 'String'\", presents when wrestling with the AZ CLI, Bash single item arrays and Bicep.",hide_table_of_contents:!1},l=void 0,p={permalink:"/bicep-user-defined-types-and-bash-single-item-arrays",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-04-05-bicep-user-defined-types-and-bash-single-item-arrays/index.md",source:"@site/blog/2023-04-05-bicep-user-defined-types-and-bash-single-item-arrays/index.md",title:"Bicep user defined types and Bash single item arrays",description:"The error \"Expected a value of type \\'Array\\', but received a value of type \\'String\\'\", presents when wrestling with the AZ CLI, Bash single item arrays and Bicep.",date:"2023-04-05T00:00:00.000Z",formattedDate:"April 5, 2023",tags:[{label:"bicep",permalink:"/tags/bicep"}],readingTime:4.025,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"bicep-user-defined-types-and-bash-single-item-arrays",title:"Bicep user defined types and Bash single item arrays",authors:"johnnyreilly",tags:["bicep"],image:"./title-image.png",description:"The error \"Expected a value of type \\'Array\\', but received a value of type \\'String\\'\", presents when wrestling with the AZ CLI, Bash single item arrays and Bicep.",hide_table_of_contents:!1},prevItem:{title:"Docusaurus: Structured Data FAQs with MDX",permalink:"/docusaurus-structured-data-faqs-mdx"},nextItem:{title:"Playwright, GitHub Actions and Azure Static Web Apps staging environments",permalink:"/playwright-github-actions-and-azure-static-web-apps-staging-environments"}},u={image:a(97669).Z,authorsImageUrls:[void 0]},c=[{value:"Expected a value of type &#39;Array&#39;, but received a value of type &#39;String&#39;",id:"expected-a-value-of-type-array-but-received-a-value-of-type-string",level:2},{value:"Workaround: JSON and Bicep user defined types",id:"workaround-json-and-bicep-user-defined-types",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c},y="wrapper";function m(e){var{components:t}=e,o=s(e,["components"]);return(0,r.kt)(y,i(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},r=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),r.forEach((function(t){n(e,t,a[t])}))}return e}({},d,o),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When sending a single item array to a Bicep template you may get an error like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ERROR: InvalidTemplate - Deployment template validation failed: 'Template parameter 'allowedIPAddresses' was provided an invalid value. Expected a value of type 'Array', but received a value of type 'String'.\n")),(0,r.kt)("p",null,"This is down to the fact that Bash arrays when used with the Azure CLI can be a little surprising. If we initialise a single item array then it's not an array. It's a string. This is a bit of a pain when you're trying to pass a single item array to a Bicep template. It's possible to work around this with JSON and Bicep user defined types. Let's see how."),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"eager",fetchpriority:"high",alt:"title image reading &quot;Bicep user defined types and Bash single item arrays&quot; with a Bicep logo",src:a(97669).Z,width:"800",height:"450"})),(0,r.kt)("h2",{id:"expected-a-value-of-type-array-but-received-a-value-of-type-string"},"Expected a value of type 'Array', but received a value of type 'String'"),(0,r.kt)("p",null,"I had a Bicep template that took a parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"array"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bicep"},"param allowedIPAddresses array\n")),(0,r.kt)("p",null,"I was invoking this template using the Azure CLI, in a Bash script. (Technically using GitHub Actions; but that's somewhat by the by.) I wanted to pass a single item array to the template. I did this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"az deployment group create \\\n  --resource-group testgroup \\\n  --template-file <path-to-template> \\\n  --parameters allowedIPAddresses='(\"8.8.8.8\")'\n")),(0,r.kt)("p",null,"Surprisingly, this resulted in the error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ERROR: InvalidTemplate - Deployment template validation failed: 'Template parameter 'allowedIPAddresses' was provided an invalid value. Expected a value of type 'Array', but received a value of type 'String'.\n")),(0,r.kt)("p",null,"Despite following the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-cli#inline-parameters"},"documentation for passing arrays"),", passing a single item array to the template did not work."),(0,r.kt)("p",null,"I'm not the only person who has wrestled with this. There's a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Azure/bicep/issues/5936"},"GitHub issue")," on the Bicep repo that discusses this. The issue is that Bash arrays when used with the Azure CLI can be a little surprising. If I initialise a single item array then it's not an array. It's a string. This is a bit of a pain when you're trying to pass a single item array to a Bicep template."),(0,r.kt)("h2",{id:"workaround-json-and-bicep-user-defined-types"},"Workaround: JSON and Bicep user defined types"),(0,r.kt)("p",null,"There are ways to make the array syntax work, but they're not very intuitive. I wanted to avoid this; I put a premium on understanding my code and make choices to optimise for that. The solution I came up with was to use JSON and Bicep user defined types."),(0,r.kt)("p",null,"Passing JSON to the Azure CLI is pretty easy. You just need to wrap the JSON in single quotes. I could do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'anArrayInJSON=\'{"allowedIPAddresses":["8.8.8.8"]}\'\naz deployment group create \\\n    --name showJSON  \\\n    --resource-group myResourceGroup \\\n    --template-file $templateFile \\\n    --parameters anArrayInJSON="$anArrayInJSON"\n')),(0,r.kt)("p",null,"The syntax is very simple and, as we can see, it's possible to have properties which are arrays. This is great. I can pass a JSON object to the Azure CLI and it'll be parsed correctly. So I can do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bicep"},"param anArrayInJSON object\n\n//...\n\nvar allowedIPAddresses = anArrayInJSON.allowedIPAddresses\n")),(0,r.kt)("p",null,"This works, but I miss the type safety of Bicep. I want to be able to say that ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedIPAddresses")," is an array. And if I can go further, I'd like to say it's a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," array also. I can do this with a ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/user-defined-data-types"},"Bicep user defined type"),". It's worth noting that user defined types are a new feature in Bicep and you'll need to use the latest version of Bicep to use them and opt in by putting this option in your ",(0,r.kt)("inlineCode",{parentName:"p"},"bicepconfig.json")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experimentalFeaturesEnabled": {\n    "userDefinedTypes": true\n  }\n}\n')),(0,r.kt)("p",null,"With that in place we can redefine ",(0,r.kt)("inlineCode",{parentName:"p"},"anArrayInJSON")," as a user defined type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bicep"},"param anArrayInJSON {\n  allowedIPAddresses: string[]\n}\n")),(0,r.kt)("p",null,"This is a little more verbose, but it's a lot more explicit. We're saying that ",(0,r.kt)("inlineCode",{parentName:"p"},"anArrayInJSON")," is an object with a property called ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedIPAddresses")," which is an array of strings. This is great. We can now use ",(0,r.kt)("inlineCode",{parentName:"p"},"anArrayInJSON.allowedIPAddresses")," in our template and we'll get type safety. We'll also get helpful error messages if we pass the wrong type of data to the template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ERROR: InvalidTemplate - Deployment template validation failed: 'Template parameter 'anArrayInJSON.allowedIPAddresses' was provided an invalid value. Expected a value of type 'Array', but received a value of type 'Null'. Please see https://aka.ms/arm-create-parameter-file for usage details.'.\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Interestingly, I'd say that I'm unlikely to ever use a Bicep parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," again, precisely for the reason that I've outlined here. So none of this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bicep"},"param anArray array\n")),(0,r.kt)("p",null,"And none of its user defined type equivalent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bicep"},"param anArray string[]\n")),(0,r.kt)("p",null,"I'll probably use the approach I've outlined here instead. I'll pass a JSON object to the template and then use a user defined type to define the properties of that object. This is a little more verbose, but it's a lot more explicit. I think that's a good trade-off."))}m.isMDXComponent=!0},97669:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/title-image-ad052f8c8859dde8b4c7d099dcd82943.png"}}]);