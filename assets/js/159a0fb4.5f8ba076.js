"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["84278"],{28722:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return l}});var i=n(34719),r=n(85893),o=n(50065);let a={slug:"prettier-your-csharp-with-dotnet-format-and-lint-staged",title:"dotnet-format: Prettier your C# with lint-staged & husky",authors:"johnnyreilly",image:"./title-image.png",tags:[],hide_table_of_contents:!1,description:"Standardise C# formatting with `dotnet format` and `lint-staged`. Customise formatting and integrate with `husky` in this guide."},s=void 0,d={image:n(57282).Z,authorsImageUrls:[void 0]},l=[];function u(t){let e={code:"code",img:"img",p:"p",...(0,o.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Consistent formatting in a codebase is a good thing. We can achieve this in dotnet using ",(0,r.jsx)(e.code,{children:"dotnet format"}),", used in combination with the npm packages ",(0,r.jsx)(e.code,{children:"husky"})," and ",(0,r.jsx)(e.code,{children:"lint-staged"}),". This post shows how."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"title image reading &quot;dotnet-format: Prettier your CSharp with lint-staged and husky&quot; and the dotnet-format logo",src:n(27446).Z+"",width:"1600",height:"900",loading:"eager",fetchpriority:"high"})})]})}function c(t={}){let{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},57282:function(t,e,n){n.d(e,{Z:function(){return i}});let i=n.p+"assets/images/title-image-7fc4956ba503155ee49cece0524868fc.png"},27446:function(t,e,n){n.d(e,{Z:function(){return i}});let i=n.p+"assets/images/title-image-7fc4956ba503155ee49cece0524868fc.png"},50065:function(t,e,n){n.d(e,{Z:function(){return s},a:function(){return a}});var i=n(67294);let r={},o=i.createContext(r);function a(t){let e=i.useContext(o);return i.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),i.createElement(o.Provider,{value:e},t.children)}},34719:function(t){t.exports=JSON.parse('{"permalink":"/prettier-your-csharp-with-dotnet-format-and-lint-staged","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-12-22-prettier-your-csharp-with-dotnet-format-and-lint-staged/index.md","source":"@site/blog/2020-12-22-prettier-your-csharp-with-dotnet-format-and-lint-staged/index.md","title":"dotnet-format: Prettier your C# with lint-staged & husky","description":"Standardise C# formatting with `dotnet format` and `lint-staged`. Customise formatting and integrate with `husky` in this guide.","date":"2020-12-22T00:00:00.000Z","tags":[],"readingTime":4.305,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"prettier-your-csharp-with-dotnet-format-and-lint-staged","title":"dotnet-format: Prettier your C# with lint-staged & husky","authors":"johnnyreilly","image":"./title-image.png","tags":[],"hide_table_of_contents":false,"description":"Standardise C# formatting with `dotnet format` and `lint-staged`. Customise formatting and integrate with `husky` in this guide."},"unlisted":false,"prevItem":{"title":"Azure Pipelines meet Jest","permalink":"/azure-pipelines-meet-jest"},"nextItem":{"title":"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect","permalink":"/how-to-make-azure-ad-403"}}')}}]);