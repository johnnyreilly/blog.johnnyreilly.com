"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[40103],{18622:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>y,frontMatter:()=>p,metadata:()=>a,toc:()=>l});var a=i(28821),n=i(74848),o=i(28453);const p={slug:"typescript-webpack-alias-goodbye-relative-paths",title:"Using TypeScript and webpack alias: goodbye relative paths",authors:"johnnyreilly",tags:["webpack","typescript"],hide_table_of_contents:!1,description:"Use TypeScript with webpack alias to avoid long relative paths in imports. Try `path mapping` or `resolve.alias`. Use `tsconfig-paths-webpack-plugin`."},s=void 0,r={authorsImageUrls:[void 0]},l=[];function c(e){const t={code:"code",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(t.p,{children:["This post shows how you can use TypeScript with webpack ",(0,n.jsx)(t.code,{children:"alias"})," to move away from using relative paths in your ",(0,n.jsx)(t.code,{children:"import"})," statements."]})}function y(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>p,x:()=>s});var a=i(96540);const n={},o=a.createContext(n);function p(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:p(e.components),a.createElement(o.Provider,{value:t},e.children)}},28821:e=>{e.exports=JSON.parse('{"permalink":"/typescript-webpack-alias-goodbye-relative-paths","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-08-21-typescript-webpack-alias-goodbye-relative-paths/index.md","source":"@site/blog/2018-08-21-typescript-webpack-alias-goodbye-relative-paths/index.md","title":"Using TypeScript and webpack alias: goodbye relative paths","description":"Use TypeScript with webpack alias to avoid long relative paths in imports. Try `path mapping` or `resolve.alias`. Use `tsconfig-paths-webpack-plugin`.","date":"2018-08-21T00:00:00.000Z","tags":[{"inline":false,"label":"webpack","permalink":"/tags/webpack","description":"The webpack module bundler."},{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."}],"readingTime":3,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"typescript-webpack-alias-goodbye-relative-paths","title":"Using TypeScript and webpack alias: goodbye relative paths","authors":"johnnyreilly","tags":["webpack","typescript"],"hide_table_of_contents":false,"description":"Use TypeScript with webpack alias to avoid long relative paths in imports. Try `path mapping` or `resolve.alias`. Use `tsconfig-paths-webpack-plugin`."},"unlisted":false,"prevItem":{"title":"Semantic Versioning and Definitely Typed","permalink":"/semantic-versioning-and-definitely-typed"},"nextItem":{"title":"Azure App Service: nested configuration for ASP.NET running in Web App for Containers using Application Settings","permalink":"/azure-app-service-web-app-containers-asp-net-nested-configuration"}}')}}]);