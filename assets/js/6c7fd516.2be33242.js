"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[31315],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});n(67294);var o=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={slug:"its-not-dead-2-mobx-react-devtools-and-the-undead",title:"It's Not Dead 2: mobx-react-devtools and the undead",authors:"johnnyreilly",tags:["webpack"],hide_table_of_contents:!1,description:"Using `mobx-react-devtools` with `process.env.NODE_ENV` caused problems with webpack production mode. A different approach fixed the issue."},l=void 0,c={permalink:"/its-not-dead-2-mobx-react-devtools-and-the-undead",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-03-26-its-not-dead-2-mobx-react-devtools-and-the-undead/index.md",source:"@site/blog/2018-03-26-its-not-dead-2-mobx-react-devtools-and-the-undead/index.md",title:"It's Not Dead 2: mobx-react-devtools and the undead",description:"Using `mobx-react-devtools` with `process.env.NODE_ENV` caused problems with webpack production mode. A different approach fixed the issue.",date:"2018-03-26T00:00:00.000Z",formattedDate:"March 26, 2018",tags:[{label:"webpack",permalink:"/tags/webpack"}],readingTime:2.04,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"its-not-dead-2-mobx-react-devtools-and-the-undead",title:"It's Not Dead 2: mobx-react-devtools and the undead",authors:"johnnyreilly",tags:["webpack"],hide_table_of_contents:!1,description:"Using `mobx-react-devtools` with `process.env.NODE_ENV` caused problems with webpack production mode. A different approach fixed the issue."},prevItem:{title:"Using Reflection to Identify Unwanted Dependencies",permalink:"/using-reflection-to-identify-unwanted-dependencies"},nextItem:{title:"Uploading Images to Cloudinary with the Fetch API",permalink:"/uploading-images-to-cloudinary-with-fetch"}},p={authorsImageUrls:[void 0]},d=[{value:"Who Betrayed Me?",id:"who-betrayed-me",level:2},{value:"Perhaps We Change the Advice?",id:"perhaps-we-change-the-advice",level:2}],u={toc:d},m="wrapper";function h(e){var{components:t}=e,n=i(e,["components"]);return(0,o.kt)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"I spent today digging through our webpack 4 config trying to work out why a production bundle contained code like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'if("production"!==e.env.NODE_ENV){//...\n')),(0,o.kt)("p",null,"My expectation was that with webpack 4 and ",(0,o.kt)("inlineCode",{parentName:"p"},"'mode': 'production'")," this meant that behind the scenes all ",(0,o.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV")," statements should be converted to ",(0,o.kt)("inlineCode",{parentName:"p"},"'production'"),". Subsequently Uglify would automatically get its groove on with the resulting ",(0,o.kt)("inlineCode",{parentName:"p"},'if("production"!=="production") ...')," and et voil\xe0!... Strip the dead code."),(0,o.kt)("p",null,"It seemed that was not the case. I was seeing (regrettably) undead code. And who here actually likes the undead?"),(0,o.kt)("h2",{id:"who-betrayed-me"},"Who Betrayed Me?"),(0,o.kt)("p",null,"My beef was with webpack. It done did me wrong. Or... So I thought. webpack did nothing wrong. It is pure and good and unjustly complained about. It was my other love: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mobxjs/mobx"},"mobx"),". Or to be more specific: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mobxjs/mobx-react-devtools"},"mobx-react-devtools"),"."),(0,o.kt)("p",null,"It turns out that the way you use ",(0,o.kt)("inlineCode",{parentName:"p"},"mobx-react-devtools")," reliably makes the difference. It's the cause of the stray ",(0,o.kt)("inlineCode",{parentName:"p"},'("production"!==e.env.NODE_ENV)')," statements in our bundle output. After a ",(0,o.kt)("strong",{parentName:"p"},"long")," time I happened upon ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mobxjs/mobx-react-devtools/issues/66#issuecomment-365151531"},"this issue")," which contained a gem by one ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gilesbutler"},"Giles Butler"),". His suggested way to reference ",(0,o.kt)("inlineCode",{parentName:"p"},"mobx-react-devtools")," is (as far as I can tell) the solution!"),(0,o.kt)("p",null,"On a dummy project I had the ",(0,o.kt)("inlineCode",{parentName:"p"},"mobx-react-devtools")," advised code in place:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { Layout } from './components/layout';\nimport DevTools from 'mobx-react-devtools';\n\nexport const App: React.SFC<{}> = (_props) => (\n  <div className=\"ui container\">\n    <Layout />\n    {process.env.NODE_ENV !== 'production' ? (\n      <DevTools position={{ bottom: 20, right: 20 }} />\n    ) : null}\n  </div>\n);\n")),(0,o.kt)("p",null,"With this I had a build size of 311kb. Closer examination of my bundle revealed that my ",(0,o.kt)("inlineCode",{parentName:"p"},"bundle.js")," was riddled with ",(0,o.kt)("inlineCode",{parentName:"p"},'("production"!==e.env.NODE_ENV)')," statements. Sucks, right?"),(0,o.kt)("p",null,"Then I tried this instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { Layout } from './components/layout';\nconst { Fragment } = React;\n\nconst DevTools =\n  process.env.NODE_ENV !== 'production'\n    ? require('mobx-react-devtools').default\n    : Fragment;\n\nexport const App: React.SFC<{}> = (_props) => (\n  <div className=\"ui container\">\n    <Layout />\n    <DevTools position={{ bottom: 20, right: 20 }} />\n  </div>\n);\n")),(0,o.kt)("p",null,"With this approach I got a build size of 191kb. This was thanks to the dead code being actually stripped. That's a saving of 120kb!"),(0,o.kt)("h2",{id:"perhaps-we-change-the-advice"},"Perhaps We Change the Advice?"),(0,o.kt)("p",null,"There's a suggestion that the README should be changed to reflect this advice - until that happens, I wanted to share this solution. Also, I've a nagging feeling that I've missed something pertinent here; if someone knows something that I should... Tell me please!"))}h.isMDXComponent=!0}}]);