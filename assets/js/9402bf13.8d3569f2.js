"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[68014],{23119:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/title-image-712677834ebf7d35a976a9ef66b32c70.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}},38896:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/title-image-712677834ebf7d35a976a9ef66b32c70.png"},81743:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var o=t(89221),r=t(74848),i=t(28453);const a={slug:"generate-word-doc-in-asp-net",title:"Generate a Word document in ASP.NET",authors:"johnnyreilly",tags:["asp.net"],image:"./title-image.png",hide_table_of_contents:!1,description:"Learn how to generate a Word document using the Open XML library in ASP.NET."},s=void 0,d={image:t(23119).A,authorsImageUrls:[void 0]},c=[{value:"Open XML",id:"open-xml",level:2},{value:"Generating a Word document in an ASP.NET controller",id:"generating-a-word-document-in-an-aspnet-controller",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Generating a Word document in the context of an ASP.NET controller is quite simple to do. However, it took me a little experimentation to work out just what was required. This post documents (pun ",(0,r.jsx)(n.strong,{children:"very"})," much intended) what we need to do."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"title image reading &quot;Generate a Word document in ASP.NET&quot; with the Word and ASP.NET logos",src:t(38896).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,r.jsx)(n.h2,{id:"open-xml",children:"Open XML"}),"\n",(0,r.jsxs)(n.p,{children:["To generate a Word document in .NET, the most straightforward way is to use the ",(0,r.jsx)(n.a,{href:"https://github.com/dotnet/Open-XML-SDK",children:"Open XML library"}),". We can install the library using the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"dotnet add package DocumentFormat.OpenXml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generating-a-word-document-in-an-aspnet-controller",children:"Generating a Word document in an ASP.NET controller"}),"\n",(0,r.jsx)(n.p,{children:"With the Open XML library installed, we can create a new Word document in the context of an ASP.NET controller. The following code demonstrates how to do this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'using Microsoft.AspNetCore.Mvc;\nusing DocumentFormat.OpenXml;\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Wordprocessing;\n\nnamespace MyApp.Controllers;\n\n[ApiController]\npublic class WordDocumentController() : ControllerBase\n{\n    [HttpGet("api/generate-word-document")]\n    public IActionResult GetWordDocument()\n    {\n        // Create a new Word document\n        using var stream = new MemoryStream();\n        using var document = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document);\n\n        var mainPart = document.AddMainDocumentPart();\n        mainPart.Document = new Document();\n\n        // Add content to the document\n        var body = mainPart.Document.AppendChild(new Body());\n        var paragraph = body.AppendChild(new Paragraph());\n        var run = paragraph.AppendChild(new Run());\n        run.AppendChild(new Text("Hello, World!"));\n\n        // Save the document to a memory stream\n        document.Save();\n        var byteArray = stream.ToArray();\n\n        // Return the document as a file\n        return File(byteArray, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "document.docx");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"GetWordDocument"}),' method creates a new Word document and adds the text "Hello, World!" to it. If we navigate to the ',(0,r.jsx)(n.code,{children:"/api/generate-word-document"}),' endpoint, we will receive a Word document with the text "Hello, World!" in it.']}),"\n",(0,r.jsxs)(n.p,{children:["The document is then saved to a memory stream and returned as a file. The ",(0,r.jsx)(n.code,{children:"File"})," method is used to return the document as a file with the MIME type ",(0,r.jsx)(n.code,{children:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"}),' (which basically is the server saying "Hey! This is a Word document!").']}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["Generating a Word document in an ASP.NET controller is quite simple to do using the Open XML library. We can create a new Word document, add content to it, and return it as a file using the ",(0,r.jsx)(n.code,{children:"File"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["To learn more about how to add content to a Word document using the Open XML library, it's worth reading the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/office/open-xml/word/overview",children:"Open XML SDK documentation"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"I hope this post helps you to generate Word documents in your ASP.NET applications!"})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},89221:e=>{e.exports=JSON.parse('{"permalink":"/generate-word-doc-in-asp-net","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-03-19-generate-word-doc-in-asp-net/index.md","source":"@site/blog/2024-03-19-generate-word-doc-in-asp-net/index.md","title":"Generate a Word document in ASP.NET","description":"Learn how to generate a Word document using the Open XML library in ASP.NET.","date":"2024-03-19T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":2.03,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"generate-word-doc-in-asp-net","title":"Generate a Word document in ASP.NET","authors":"johnnyreilly","tags":["asp.net"],"image":"./title-image.png","hide_table_of_contents":false,"description":"Learn how to generate a Word document using the Open XML library in ASP.NET."},"unlisted":false,"prevItem":{"title":"Text-first MUI Tabs","permalink":"/text-first-mui-tabs"},"nextItem":{"title":"Configure Azure connection strings and keys in Azure Bicep","permalink":"/configure-azure-connection-strings-keys-in-azure-bicep"}}')}}]);