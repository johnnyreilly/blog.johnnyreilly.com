"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[84797],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}},35370:e=>{e.exports=JSON.parse('{"permalink":"/concatting-ienumerables-in-csharp","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-03-22-concatting-ienumerables-in-csharp/index.md","source":"@site/blog/2016-03-22-concatting-ienumerables-in-csharp/index.md","title":"Concatting IEnumerables in C#","description":"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator.","date":"2016-03-22T00:00:00.000Z","tags":[{"inline":false,"label":"C#","permalink":"/tags/csharp","description":"The C# programming language."}],"readingTime":2.76,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"concatting-ienumerables-in-csharp","title":"Concatting IEnumerables in C#","authors":"johnnyreilly","tags":["c#"],"hide_table_of_contents":false,"description":"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator."},"unlisted":false,"prevItem":{"title":"Instant Stubs with JSON.Net (just add hot water)","permalink":"/instant-stubs-with-jsonnet"},"nextItem":{"title":"Atom - Recovering from Corrupted Packages","permalink":"/atom-recovering-from-corrupted-packages"}}')},72789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var o=t(35370),r=t(74848),i=t(28453);const a={slug:"concatting-ienumerables-in-csharp",title:"Concatting IEnumerables in C#",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator."},s=void 0,l={authorsImageUrls:[void 0]},c=[];function u(e){const n={a:"a",code:"code",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(n.p,{children:["I hate LINQ's ",(0,r.jsx)(n.a,{href:"https://msdn.microsoft.com/en-us/library/bb302894%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396",children:(0,r.jsx)(n.code,{children:"Enumerable.Concat"})})," when bringing together ",(0,r.jsx)(n.code,{children:"IEnumerable"}),"s. Not the behaviour (I love that!) but rather how code ends up looking when you use it. Consider this:"]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);