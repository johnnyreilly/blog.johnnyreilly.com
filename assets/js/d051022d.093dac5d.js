"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["99925"],{58681:function(e,n,t){t.r(n),t.d(n,{assets:function(){return a},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return p}});var o=t(85301),r=t(85893),i=t(50065);let s={slug:"setting-build-version-using-appveyor",title:"Setting Build Version Using AppVeyor and ASP.Net Core",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell."},l=void 0,a={authorsImageUrls:[void 0]},p=[];function c(e){let n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["AppVeyor has ",(0,r.jsx)(n.a,{href:"https://www.appveyor.com/docs/build-configuration/#assemblyinfo-patching",children:"support for setting the version of a binary during a build"}),". However - this deals with the classic ASP.Net world of ",(0,r.jsx)(n.code,{children:"AssemblyInfo"}),". I didn't find any reference to support for doing the same with dot net core. Remember, dot net core ",(0,r.jsxs)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json-to-csproj#version",children:["relies upon a ",(0,r.jsx)(n.code,{children:"&lt;Version&gt;"})," or a ",(0,r.jsx)(n.code,{children:"&lt;VersionPrefix&gt;"})," setting in the ",(0,r.jsx)(n.code,{children:".csproj"})," file"]}),". Personally, ",(0,r.jsx)(n.code,{children:"&lt;Version&gt;"})," is my jam."]}),"\n",(0,r.jsx)(n.p,{children:"However, coming up with your own bit of powershell that stamps the version during the build is a doddle; here we go:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ps",children:'Param($projectFile, $buildNum)\n\n$content = [IO.File]::ReadAllText($projectFile)\n\n$regex = new-object System.Text.RegularExpressions.Regex (\'(<version>)([\\d]+.[\\d]+.[\\d]+)(.[\\d]+)(<\\/Version>)\',\n         [System.Text.RegularExpressions.RegexOptions]::MultiLine)\n\n$version = $null\n$match = $regex.Match($content)\nif($match.Success) {\n    # from "<version>1.0.0.0</version>" this will extract "1.0.0"\n    $version = $match.groups[2].value\n}\n\n# suffix build number onto $version. eg "1.0.0.15"\n$version = "$version.$buildNum"\n\n# update "<version>1.0.0.0</version>" to "<version>$version</version>"\n$content = $regex.Replace($content, \'${1}\' + $version + \'${4}\')\n\n# update csproj file\n[IO.File]::WriteAllText($projectFile, $content)\n\n# update AppVeyor build\nUpdate-AppveyorBuild -Version $version\n</version>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can invoke this script as part of the build process in AppVeyor by adding something like this to your ",(0,r.jsx)(n.code,{children:"appveyor.yml"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"before_build:\n  - ps: .\\ModifyVersion.ps1 $env:APPVEYOR_BUILD_FOLDER\\src\\Proverb.Web\\Proverb.Web.csproj $env:APPVEYOR_BUILD_NUMBER\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It will keep the first 3 parts of the version in your ",(0,r.jsx)(n.code,{children:".csproj"}),' (eg "1.0.0") and suffix on the build number supplied by AppVeyor.']})]})}function d(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return s}});var o=t(67294);let r={},i=o.createContext(r);function s(e){let n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},85301:function(e){e.exports=JSON.parse('{"permalink":"/setting-build-version-using-appveyor","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2017-04-25-setting-build-version-using-appveyor/index.md","source":"@site/blog/2017-04-25-setting-build-version-using-appveyor/index.md","title":"Setting Build Version Using AppVeyor and ASP.Net Core","description":"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell.","date":"2017-04-25T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":1.03,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"setting-build-version-using-appveyor","title":"Setting Build Version Using AppVeyor and ASP.Net Core","authors":"johnnyreilly","tags":["asp.net"],"hide_table_of_contents":false,"description":"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell."},"unlisted":false,"prevItem":{"title":"TypeScript: Spare the Rod, Spoil the Code","permalink":"/typescript-spare-rod-spoil-code"},"nextItem":{"title":"I\'m looking for work!","permalink":"/im-looking-for-work"}}')}}]);