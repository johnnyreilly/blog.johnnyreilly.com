"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[8531],{82363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=t(85893),o=t(11151);const i={slug:"knockout-globalize-valuenumber-binding",title:"Knockout + Globalize = valueNumber Binding Handler",authors:"johnnyreilly",tags:["globalize"],hide_table_of_contents:!1,description:'Learn how to use Globalize and Knockout to create a "valueNumber" binding handler that makes numeric validation and localization easy.'},l=void 0,r={permalink:"/knockout-globalize-valuenumber-binding",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-03-11-knockout-globalize-valuenumber-binding/index.md",source:"@site/blog/2014-03-11-knockout-globalize-valuenumber-binding/index.md",title:"Knockout + Globalize = valueNumber Binding Handler",description:'Learn how to use Globalize and Knockout to create a "valueNumber" binding handler that makes numeric validation and localization easy.',date:"2014-03-11T00:00:00.000Z",formattedDate:"March 11, 2014",tags:[{label:"globalize",permalink:"/tags/globalize"}],readingTime:3.885,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"knockout-globalize-valuenumber-binding",title:"Knockout + Globalize = valueNumber Binding Handler",authors:"johnnyreilly",tags:["globalize"],hide_table_of_contents:!1,description:'Learn how to use Globalize and Knockout to create a "valueNumber" binding handler that makes numeric validation and localization easy.'},unlisted:!1,prevItem:{title:"The Surprisingly Happy Tale of Visual Studio Online, Continous Integration and Chutzpah",permalink:"/the-surprisingly-happy-tale-of-visual"},nextItem:{title:"Caching and cache-busting with RequireJS",permalink:"/caching-and-cache-busting-with-requirejs"}},u={authorsImageUrls:[void 0]},c=[];function s(e){const n={a:"a",p:"p",...(0,o.a)(),...e.components};return(0,a.jsxs)(n.p,{children:["I\u2019ve long used ",(0,a.jsx)(n.a,{href:"https://github.com/jquery/globalize/",children:"Globalize"})," for my JavaScript number formatting / parsing needs. In a current project I\u2019m using Knockout for the UI. When it came to data-binding numeric values none of the default binding handlers seemed appropriate. What I wanted was a binding handler that:"]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>l});var a=t(67294);const o={},i=a.createContext(o);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);