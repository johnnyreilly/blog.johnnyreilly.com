"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[98688],{95496:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(74848),i=n(28453);const a={slug:"create-es2015-map-from-array-in-typescript",title:"Creating an ES2015 Map from an Array in TypeScript",authors:"johnnyreilly",tags:["typescript","javascript"],hide_table_of_contents:!1,description:"TypeScript `Map` initialization from an `Array` is discussed with a workaround using a type assertion of ` as [string, string]`."},o=void 0,s={permalink:"/create-es2015-map-from-array-in-typescript",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-06-02-create-es2015-map-from-array-in-typescript/index.md",source:"@site/blog/2016-06-02-create-es2015-map-from-array-in-typescript/index.md",title:"Creating an ES2015 Map from an Array in TypeScript",description:"TypeScript `Map` initialization from an `Array` is discussed with a workaround using a type assertion of ` as [string, string]`.",date:"2016-06-02T00:00:00.000Z",tags:[{label:"typescript",permalink:"/tags/typescript"},{label:"javascript",permalink:"/tags/javascript"}],readingTime:2.105,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"create-es2015-map-from-array-in-typescript",title:"Creating an ES2015 Map from an Array in TypeScript",authors:"johnnyreilly",tags:["typescript","javascript"],hide_table_of_contents:!1,description:"TypeScript `Map` initialization from an `Array` is discussed with a workaround using a type assertion of ` as [string, string]`."},unlisted:!1,prevItem:{title:"Understanding webpack's DefinePlugin (and using with TypeScript)",permalink:"/using-webpacks-defineplugin-with-typescript"},nextItem:{title:"The Mysterious Case of webpack, AngularJS and jQuery",permalink:"/the-mysterious-case-of-webpack-angular-and-jquery"}},p={authorsImageUrls:[void 0]},c=[];function l(e){const t={a:"a",code:"code",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(t.p,{children:["I'm a great lover of ES2015's ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:(0,r.jsx)(t.code,{children:"Map"})}),". However, just recently I tumbled over something I find a touch inconvenient about how you initialise a new ",(0,r.jsx)(t.code,{children:"Map"})," from the contents of an ",(0,r.jsx)(t.code,{children:"Array"})," in TypeScript."]})}function y(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);