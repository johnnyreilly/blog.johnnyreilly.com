"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["42730"],{13716:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return c}});var a=t(13572),o=t(85893),r=t(50065);let i={slug:"concatting-ienumerables-in-csharp",title:"Concatting IEnumerables in C#",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator."},l=void 0,s={authorsImageUrls:[void 0]},c=[{value:"Attempt #1: <code>ConcatMany</code>",id:"attempt-1-concatmany",level:2},{value:"Attempt #2: <code>EnumerableExtensions.Create</code>",id:"attempt-2-enumerableextensionscreate",level:2},{value:"What Gives Elvis?",id:"what-gives-elvis",level:2}];function u(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["I hate LINQ's ",(0,o.jsx)(n.a,{href:"https://msdn.microsoft.com/en-us/library/bb302894%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396",children:(0,o.jsx)(n.code,{children:"Enumerable.Concat"})})," when bringing together ",(0,o.jsx)(n.code,{children:"IEnumerable"}),"s. Not the behaviour (I love that!) but rather how code ends up looking when you use it. Consider this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"var concatenated = myCollection?.Select(x => new ConcatObj(x)) ?? new ConcatObj[0].Concat(\n   myOtherCollection?.Select(x => new ConcatObj(x)) ?? new ConcatObj[0]\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example I'm bringing together 2 collections, either of which may be null (more on that later). I think we can all agree this doesn't represent a world of readability. I've also had to create a custom class ",(0,o.jsx)(n.code,{children:"ConcatObj"})," because you can't create an empty array for an anonymous type in C#."]}),"\n",(0,o.jsxs)(n.h2,{id:"attempt-1-concatmany",children:["Attempt #1: ",(0,o.jsx)(n.code,{children:"ConcatMany"})]}),"\n",(0,o.jsx)(n.p,{children:"After toying around with a bunch of different ideas I created this extension method:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"public static class FunctionalExtensions\n{\n    public static IEnumerable<T> ConcatMany<T>(\n        this IEnumerable<T> original,\n        params IEnumerable<T>[] enumerablesToConcat) => original.Concat(\n            enumerablesToConcat.Where(e => e != null).SelectMany(c => c)\n        );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Thanks to the joy of ",(0,o.jsx)(n.code,{children:"params"})," this extension allows me to bring together multiple IEnumerables into a single one but has the advantage of considerably cleaner calling code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"var concatenated = Enumerable.Empty<ConcatObj>().ConcatMany(\n    myCollection?.Select(x => new ConcatObj(x)),\n    myOtherCollection?.Select(x => new ConcatObj(x))\n    );\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For my money this is more readable and intent is clearer. Particularly as the number of contributing IEnumerables goes up. The downside is that I can\u2019t use anonymous objects because you need to tell the compiler what the type is when using ",(0,o.jsx)(n.code,{children:'<a href="https://msdn.microsoft.com/en-us/library/bb341042%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">Enumerable.Empty</a>'}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Wouldn't it be nice to have both:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Readable code and"}),"\n",(0,o.jsx)(n.li,{children:"Anonymous objects?"}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"attempt-2-enumerableextensionscreate",children:["Attempt #2: ",(0,o.jsx)(n.code,{children:"EnumerableExtensions.Create"})]}),"\n",(0,o.jsx)(n.p,{children:"After batting round a few ideas (thanks Matt) I settled on this implementation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"public static class EnumerableExtensions\n{\n    public static IEnumerable<TSource> Create<TSource>(params IEnumerable<TSource>[] enumerables)\n    {\n        return Concat(enumerables.Where(e => e != null));\n    }\n\n    private static IEnumerable<TSource> Concat<TSource>(IEnumerable<IEnumerable<TSource>> enumerables)\n    {\n        foreach (var enumerable in enumerables)\n        {\n            foreach (var item in enumerable)\n            {\n                yield return item;\n            }\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Which allows for calling code like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"var concatenated = EnumerableExtensions.Create(\n    myCollection?.Select(x => new { Anonymous = x.Types }),\n    myOtherCollection?.Select(x => new { Anonymous = x.Types })\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["That's right; anonymous types are back! Strictly speaking the ",(0,o.jsx)(n.code,{children:"Concat"})," method above could be converted into a single ",(0,o.jsx)(n.code,{children:"SelectMany"})," (and boy does ReSharper like telling me) but I'm quite happy with it as is. And to be honest, I so rarely get to use ",(0,o.jsx)(n.code,{children:"yield"})," in my own code; I thought it might be nice to give it a whirl \uD83D\uDE0A"]}),"\n",(0,o.jsx)(n.h2,{id:"what-gives-elvis",children:"What Gives Elvis?"}),"\n",(0,o.jsxs)(n.p,{children:["If you look closely at the implementation you'll notice that I purge all ",(0,o.jsx)(n.code,{children:"null"}),"s when I'm bringing together the ",(0,o.jsx)(n.code,{children:"Enumerable"}),'s. For why? Some may legitimately argue this is a bad idea. However, there is method in my "bad practice".']}),"\n",(0,o.jsxs)(n.p,{children:["I've chosen to treat ",(0,o.jsx)(n.code,{children:"null"}),' as "not important" for this use case. I\'m doing this because it emerges that ASP.NET MVC deserialises empty collections as nulls. (See ',(0,o.jsx)(n.a,{href:"http://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Mvc/ValueProviderResult.cs",children:"here"})," and play spot the ",(0,o.jsx)(n.code,{children:"return null;"}),") Which is a pain. But thanks to the null purging behaviour of ",(0,o.jsx)(n.code,{children:"EnumerableExtensions.Create"})," I can trust in the ",(0,o.jsx)(n.a,{href:"https://csharp.today/c-6-features-null-conditional-and-and-null-coalescing-operators/",children:"null-conditional (Elvis)"})," operator to not do me wrong."]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return i}});var a=t(67294);let o={},r=a.createContext(o);function i(e){let n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},13572:function(e){e.exports=JSON.parse('{"permalink":"/concatting-ienumerables-in-csharp","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-03-22-concatting-ienumerables-in-csharp/index.md","source":"@site/blog/2016-03-22-concatting-ienumerables-in-csharp/index.md","title":"Concatting IEnumerables in C#","description":"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator.","date":"2016-03-22T00:00:00.000Z","tags":[{"inline":false,"label":"C#","permalink":"/tags/csharp","description":"The C# programming language."}],"readingTime":2.525,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"concatting-ienumerables-in-csharp","title":"Concatting IEnumerables in C#","authors":"johnnyreilly","tags":["c#"],"hide_table_of_contents":false,"description":"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator."},"unlisted":false,"prevItem":{"title":"Instant Stubs with JSON.Net (just add hot water)","permalink":"/instant-stubs-with-jsonnet"},"nextItem":{"title":"Atom - Recovering from Corrupted Packages","permalink":"/atom-recovering-from-corrupted-packages"}}')}}]);