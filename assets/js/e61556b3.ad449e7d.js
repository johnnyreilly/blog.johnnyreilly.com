"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[3012],{18142:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=t(74848),o=t(28453);const s={slug:"multiline-strings-dot-env-files",title:"Multiline strings in .env files",authors:"johnnyreilly",tags:["node.js"],hide_table_of_contents:!1,description:"Learn how to use multiline strings in .env files."},r=void 0,l={permalink:"/multiline-strings-dot-env-files",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-03-09-multiline-strings-dot-env-files/index.md",source:"@site/blog/2024-03-09-multiline-strings-dot-env-files/index.md",title:"Multiline strings in .env files",description:"Learn how to use multiline strings in .env files.",date:"2024-03-09T00:00:00.000Z",tags:[{inline:!1,label:"Node.js",permalink:"/tags/node-js",description:"The Node.js runtime."}],readingTime:.835,hasTruncateMarker:!1,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"multiline-strings-dot-env-files",title:"Multiline strings in .env files",authors:"johnnyreilly",tags:["node.js"],hide_table_of_contents:!1,description:"Learn how to use multiline strings in .env files."},unlisted:!1,prevItem:{title:"Configure Azure connection strings and keys in Azure Bicep",permalink:"/configure-azure-connection-strings-keys-in-azure-bicep"},nextItem:{title:"ESLint no-unused-vars: _ ignore prefix",permalink:"/typescript-eslint-no-unused-vars"}},a={authorsImageUrls:[void 0]},c=[];function u(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["I love using ",(0,i.jsx)(n.code,{children:".env"})," files to configure my applications. They're a great way to keep configuration in one place and to keep it out of the codebase. They're also a great way to keep secrets out of the codebase."]}),"\n",(0,i.jsxs)(n.p,{children:["But what if you need to use a multiline string in a ",(0,i.jsx)(n.code,{children:".env"})," file? How do you do that? You just do it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-env",children:'SINGLE_LINE="you know what..."\nMULTI_LINE="you know what you did\nLAST SUMMER"\n'})}),"\n",(0,i.jsx)(n.p,{children:"That's right, you just use a newline character. It's that simple. Oddly, searching for that on the internet didn't yield the answer I was looking for. So I'm writing it down here for posterity."}),"\n",(0,i.jsxs)(n.p,{children:["With your ",(0,i.jsx)(n.code,{children:".env"})," file in place, you can then consume it in your application using a package like ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/dotenv",children:(0,i.jsx)(n.code,{children:"dotenv"})}),". Or if you'd like to use a bash script to consume the ",(0,i.jsx)(n.code,{children:".env"})," file, you can do it like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/usr/bin/env bash\nset -a\nsource test.env\nset +a\n\nnpm run start # or whatever you need to do\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);