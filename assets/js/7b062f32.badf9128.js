"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["20066"],{9431:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return l}});var o=n(52199),i=n(85893),r=n(50065);let s={slug:"using-pubsub-observer-pattern-to",title:"Using the PubSub / Observer pattern to emulate constructor chaining without cluttering up global scope",authors:"johnnyreilly",tags:["javascript"],hide_table_of_contents:!1,description:"Pass objects between JavaScript files using PubSub interface to achieve code reusability without global scope pollution. No prototypes needed."},a=void 0,u={authorsImageUrls:[void 0]},l=[];function c(e){let t={p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(t.p,{children:["Yes the title of this post is *",(0,i.jsx)(t.strong,{children:"painfully"}),"* verbose. Sorry about that. Couple of questions for you: - Have you ever liked the way you can have base classes in C# which can then be inherited and subclassed ",(0,i.jsx)("u",{children:"in a different file / class"})]})}function p(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return s}});var o=n(67294);let i={},r=o.createContext(i);function s(e){let t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}},52199:function(e){e.exports=JSON.parse('{"permalink":"/using-pubsub-observer-pattern-to","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2012-03-17-using-pubsub-observer-pattern-to/index.md","source":"@site/blog/2012-03-17-using-pubsub-observer-pattern-to/index.md","title":"Using the PubSub / Observer pattern to emulate constructor chaining without cluttering up global scope","description":"Pass objects between JavaScript files using PubSub interface to achieve code reusability without global scope pollution. No prototypes needed.","date":"2012-03-17T00:00:00.000Z","tags":[{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."}],"readingTime":5.48,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"using-pubsub-observer-pattern-to","title":"Using the PubSub / Observer pattern to emulate constructor chaining without cluttering up global scope","authors":"johnnyreilly","tags":["javascript"],"hide_table_of_contents":false,"description":"Pass objects between JavaScript files using PubSub interface to achieve code reusability without global scope pollution. No prototypes needed."},"unlisted":false,"prevItem":{"title":"WCF - moving from Config to Code, a simple WCF service harness (plus implementing your own Authorization)","permalink":"/wcf-moving-from-config-to-code-simple"},"nextItem":{"title":"Striving for (JavaScript) Convention","permalink":"/striving-for-javascript-convention"}}')}}]);