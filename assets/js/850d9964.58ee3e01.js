"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[81040],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,d=c["".concat(o,".").concat(h)]||c[h]||m[h]||a;return n?i.createElement(d,l(l({ref:t},u),{},{components:n})):i.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<a;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},91643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>c});n(67294);var i=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={slug:"azure-pipelines-meet-vitest",title:"Azure Pipelines meet Vitest",authors:"johnnyreilly",image:"./title-image.png",tags:["azure pipelines","automated testing"],description:"This post details how to integrate the test runner Vitest with Azure Pipelines.",hide_table_of_contents:!1},o=void 0,p={permalink:"/azure-pipelines-meet-vitest",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-08-05-azure-pipelines-meet-vitest/index.md",source:"@site/blog/2023-08-05-azure-pipelines-meet-vitest/index.md",title:"Azure Pipelines meet Vitest",description:"This post details how to integrate the test runner Vitest with Azure Pipelines.",date:"2023-08-05T00:00:00.000Z",formattedDate:"August 5, 2023",tags:[{label:"azure pipelines",permalink:"/tags/azure-pipelines"},{label:"automated testing",permalink:"/tags/automated-testing"}],readingTime:2.665,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"azure-pipelines-meet-vitest",title:"Azure Pipelines meet Vitest",authors:"johnnyreilly",image:"./title-image.png",tags:["azure pipelines","automated testing"],description:"This post details how to integrate the test runner Vitest with Azure Pipelines.",hide_table_of_contents:!1},prevItem:{title:"Azure Open AI: handling capacity and quota limits with Bicep",permalink:"/azure-open-ai-capacity-quota-bicep"},nextItem:{title:"Azure Container Apps, Bicep, bring your own certificates and custom domains",permalink:"/azure-container-apps-bicep-bring-your-own-certificates-custom-domains"}},u={image:n(48865).Z,authorsImageUrls:[void 0]},c=[{value:"Tests run as part of our pipeline",id:"tests-run-as-part-of-our-pipeline",level:2},{value:"Report test results in Azure Pipelines UI",id:"report-test-results-in-azure-pipelines-ui",level:2},{value:"Putting it all together",id:"putting-it-all-together",level:2}],m={toc:c},h="wrapper";function d(e){var{components:t}=e,s=l(e,["components"]);return(0,i.kt)(h,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}({},m,s),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This post explains how to integrate the tremendous test runner ",(0,i.kt)("a",{parentName:"p",href:"https://vitest.dev/"},"Vitest")," with the continuous integration platform ",(0,i.kt)("a",{parentName:"p",href:"https://azure.microsoft.com/en-gb/products/devops/pipelines/"},"Azure Pipelines"),". If you read ",(0,i.kt)("a",{parentName:"p",href:"/azure-pipelines-meet-jest"},"the post on integrating with Jest"),", you'll recognise a lot of common ground with this. Once again we want:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Tests run as part of our pipeline"),(0,i.kt)("li",{parentName:"ol"},"A failing test fails the build"),(0,i.kt)("li",{parentName:"ol"},"Test results reported in Azure Pipelines UI")),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"eager",fetchpriority:"high",alt:"title image reading &quot;Azure Pipelines meet Vitest&quot; with the Pipelines and Vitest logos",src:n(48865).Z,width:"800",height:"450"})),(0,i.kt)("p",null,"This post assumes we have a Vitest project set up and an Azure Pipeline in place. Let's get started."),(0,i.kt)("h2",{id:"tests-run-as-part-of-our-pipeline"},"Tests run as part of our pipeline"),(0,i.kt)("p",null,"First of all, lets get the tests running. We'll crack open our ",(0,i.kt)("inlineCode",{parentName:"p"},"azure-pipelines.yml")," file and, in the appropriate place add the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"- bash: npm run test:ci\n  displayName: 'npm test'\n  workingDirectory: src/client-app\n")),(0,i.kt)("p",null,"The above will, when run, trigger a ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run test:ci")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/client-app")," folder of the project (it's here where the app lives). What does ",(0,i.kt)("inlineCode",{parentName:"p"},"test:ci")," do? Well, it's a script in the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"test": "vitest",\n"test:ci": "vitest run --reporter=default --reporter=junit --outputFile=reports/junit.xml",\n')),(0,i.kt)("p",null,"You'll note above we've got 2 scripts; ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"test:ci"),". The former is the default script that Vitest will run when you run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm test"),". The latter is the script that we'll use in our pipeline. The difference between the two is that the ",(0,i.kt)("inlineCode",{parentName:"p"},"test:ci")," script will:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Doesn't run in watch mode"),(0,i.kt)("li",{parentName:"ol"},"Fail the build if any tests fail"),(0,i.kt)("li",{parentName:"ol"},"Produce a JUnit XML report which details test results. This is the format that Azure Pipelines can use to ingest test results.")),(0,i.kt)("p",null,"The test results are written to ",(0,i.kt)("inlineCode",{parentName:"p"},"reports/junit.xml")," which is a path relative to the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/client-app")," folder. Because you may test this locally, it's probably worth adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"reports")," folder to your ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file to avoid it accidentally being committed."),(0,i.kt)("h2",{id:"report-test-results-in-azure-pipelines-ui"},"Report test results in Azure Pipelines UI"),(0,i.kt)("p",null,"Our tests are running, but we're not seeing the results in the Azure Pipelines UI. For that we need the ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/publish-test-results-v2"},(0,i.kt)("inlineCode",{parentName:"a"},"PublishTestResults")," task"),"."),(0,i.kt)("p",null,"We need to add a new step to our ",(0,i.kt)("inlineCode",{parentName:"p"},"azure-pipelines.yml")," file ",(0,i.kt)("em",{parentName:"p"},"after")," our ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run test:ci")," step:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"- task: PublishTestResults@2\n  displayName: 'supply npm test results to pipelines'\n  condition: succeededOrFailed() # because otherwise we won't know what tests failed\n  inputs:\n    testResultsFiles: 'src/client-app/reports/junit.xml'\n")),(0,i.kt)("p",null,"This will read the test results from our ",(0,i.kt)("inlineCode",{parentName:"p"},"src/client-app/reports/junit.xml")," file and pump them into Pipelines. Do note that we're ",(0,i.kt)("em",{parentName:"p"},"always")," running this step; so if the previous step failed (as it would in the case of a failing test) we still pump out the details of what that failure was."),(0,i.kt)("p",null,"And that's it! Azure Pipelines and Jest integrated."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"screenshot of test results published to Azure Pipelines",src:n(93953).Z,width:"2996",height:"1084"})),(0,i.kt)("h2",{id:"putting-it-all-together"},"Putting it all together"),(0,i.kt)("p",null,"The complete ",(0,i.kt)("inlineCode",{parentName:"p"},"azure-pipelines.yml")," additions look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"- bash: npm run test:ci\n  displayName: 'npm test'\n  workingDirectory: src/client-app\n\n- task: PublishTestResults@2\n  displayName: 'supply npm test results to pipelines'\n  condition: succeededOrFailed() # because otherwise we won't know what tests failed\n  inputs:\n    testResultsFiles: 'src/client-app/reports/junit.xml'\n")),(0,i.kt)("p",null,"Please note, there's nothing special about the ",(0,i.kt)("inlineCode",{parentName:"p"},"reports/junit.xml")," file. You can change the name of the file and/or the location of the file. Just make sure you update the ",(0,i.kt)("inlineCode",{parentName:"p"},"testResultsFiles")," value in the ",(0,i.kt)("inlineCode",{parentName:"p"},"PublishTestResults")," task to match."))}d.isMDXComponent=!0},93953:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/test-results-af22126afcf8abe740b04d2878c16418.webp"},48865:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/title-image-29f5f663eb5da2a98325dc6ad5967e95.png"}}]);