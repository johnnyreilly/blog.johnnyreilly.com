"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["78067"],{20563:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var i=n(14245),a=n(85893),r=n(50065);let o={slug:"twitterbootstrapmvc4-meet-bootstrap_14",title:"Twitter.Bootstrap.MVC4 meet Bootstrap Datepicker *and* get your Internationalization on...",authors:"johnnyreilly",tags:["globalize","javascript"],hide_table_of_contents:!1,description:"Learn how to internationalize ASP.NET web apps using Globalize and Bootstrap Datepicker in this developers comprehensive step by step guide."},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Going global down in Acapulco",id:"going-global-down-in-acapulco",level:2},{value:"Culture-specific script bundles",id:"culture-specific-script-bundles",level:2},{value:"Where have we got to?",id:"where-have-we-got-to",level:2},{value:"International Bootstrap Datepicker",id:"international-bootstrap-datepicker",level:2},{value:"Summary",id:"summary",level:2}];function u(e){let t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"/twitterbootstrapmvc4-meet-bootstrap",children:"Last time"})," I wrote about marrying up Twitter.Bootstrap.MVC4 and Bootstrap Datepicker. It came together quite nicely but when I took a more in depth look at what I'd done I discovered a problem. The brief work on regionalisation / internationalisation / localisation / globalisation / whatever it's called this week... wasn't really working. We had problems with the validation."]}),"\n",(0,a.jsxs)(t.p,{children:["I also discovered that Stefan Petre's Bootstrap Datepicker appears to have been abandoned. Andrew Rowls has taken it on and created a GitHub repository for it ",(0,a.jsx)(t.a,{href:"https://github.com/eternicode/bootstrap-datepicker",children:"here"}),". Besides bug fixes he's also introduced the ability for the Bootstrap Datepicker to customised for different cultures."]}),"\n",(0,a.jsxs)(t.p,{children:["Since these 2 subjects are linked I tackled them together and thought it might be worth writing up here. You can find the conclusion of my work in a GitHub repository I created ",(0,a.jsx)(t.a,{href:"https://github.com/johnnyreilly/BootstrapMvcSample",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"going-global-down-in-acapulco",children:"Going global down in Acapulco"}),"\n",(0,a.jsxs)(t.p,{children:["First step in internationalising any ASP.Net web app is adding the following to the ",(0,a.jsx)(t.code,{children:"web.config"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<configuration>\n  <system.web>\n\n    \x3c!-- Other stuff here... --\x3e\n\n    <globalization\n      culture="auto"\n      uiCulture="auto"\n      enableClientBasedCulture="true" />\n  </system.web>\n\n  \x3c!-- ...and here --\x3e\n\n</configuration>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Then I pulled ",(0,a.jsx)(t.a,{href:"https://github.com/jquery/globalize",children:"Globalize"})," and the ",(0,a.jsx)(t.a,{href:"https://github.com/eternicode/bootstrap-datepicker",children:"Andrew Rowls fork of Bootstrap Datepicker"})," into the project (replacing Stefan's original assets). As well as this I pulled in the ",(0,a.jsx)(t.code,{children:"jQuery.validate.globalize.js"})," extension ",(0,a.jsx)(t.a,{href:"/globalize-and-jquery-validate",children:"I wrote about here"}),". (This replaces some of the default jQuery Validate functionality for culture-specific functionality based on Globalize.) This extension depends on a meta tag that is generated using the following file (which also handles the serving up of the relevant JavaScript culture bundles, more of which shortly):"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Globalization;\nusing System.Linq;\nusing System.Web;\n\nnamespace System.Web.Mvc\n{\n    public static class GlobalizationHelpers\n    {\n        /// <summary>\n        /// Taken from Scott Hanselman\'s blog post: http://www.hanselman.com/blog/GlobalizationInternationalizationAndLocalizationInASPNETMVC3JavaScriptAndJQueryPart1.aspx\n        /// </summary>\n        /// <typeparam name="t"></typeparam>\n        /// <param name="htmlHelper"></param>\n        /// <returns></returns>\n        public static IHtmlString MetaAcceptLanguage<t>(this HtmlHelper<t> htmlHelper)\n        {\n            var acceptLanguage = HttpUtility.HtmlAttributeEncode(CultureInfo.CurrentUICulture.ToString());\n            return new HtmlString(string.Format("<meta name=\\"accept-language\\" content=\\"{0}\\" />", acceptLanguage));\n        }\n\n        /// <summary>\n        /// Return the JavaScript bundle for this users culture\n        /// </summary>\n        /// <typeparam name="t"></typeparam>\n        /// <param name="htmlHelper"></param>\n        /// <returns>a culture bundle that looks something like this: "~/js-culture.en-GB"</returns>\n        public static string JsCultureBundle<t>(this HtmlHelper<t> htmlHelper)\n        {\n            return "~/js-culture." + CultureInfo.CurrentUICulture.ToString();\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"culture-specific-script-bundles",children:"Culture-specific script bundles"}),"\n",(0,a.jsx)(t.p,{children:"With all of my dependancies in place I was now ready to press on. Since both Globalize and the new Bootstrap Datepicker come with their own culture-specific JavaScript files it seemed a good idea to make use of ASP.Nets new bundling functionality. This I did here:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'using System;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Optimization;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\n\nnamespace BootstrapSupport\n{\n    public class BootstrapBundleConfig\n    {\n        public static void RegisterBundles(BundleCollection bundles)\n        {\n            bundles.Add(new ScriptBundle("~/js").Include(\n                "~/Scripts/jquery-*",\n                "~/Scripts/globalize.js", //The Globalize library\n                "~/Scripts/bootstrap.js",\n                "~/Scripts/bootstrap-datepicker.js", //This is the brand new internationalised Bootstrap Datepicker\n                "~/Scripts/jquery.validate.js",\n                "~/Scripts/jquery.validate.unobtrusive.js",\n                "~/Scripts/jquery.validate.unobtrusive-custom-for-bootstrap.js",\n                "~/Scripts/jquery.validate.globalize.js" //My jQuery Validate extension which depends on Globalize\n                ));\n\n            //Create culture specific bundles which contain the JavaScript files that should be served for each culture\n            foreach (var culture in CultureInfo.GetCultures(CultureTypes.AllCultures))\n            {\n                bundles.Add(new ScriptBundle("~/js-culture." + culture.Name).Include( //example bundle name would be "~/js-culture.en-GB"\n                    DetermineCultureFile(culture, "~/Scripts/globalize-cultures/globalize.culture.{0}.js"),             //The Globalize locale-specific JavaScript file\n                    DetermineCultureFile(culture, "~/Scripts/bootstrap-datepicker-locales/bootstrap-datepicker.{0}.js") //The Bootstrap Datepicker locale-specific JavaScript file\n                ));\n            }\n\n            bundles.Add(new StyleBundle("~/content/css").Include(\n                "~/Content/bootstrap.css",\n                "~/Content/bootstrap-datepicker.css"\n                ));\n\n            bundles.Add(new StyleBundle("~/content/css-responsive").Include(\n                "~/Content/bootstrap-responsive.css"\n                ));\n        }\n\n        /// <summary>\n        /// Given the supplied culture, determine the most appropriate Globalize culture script file that should be served up\n        /// </summary>\n        /// <param name="culture"></param>\n        /// <param name="filePattern">a file pattern, eg "~/Scripts/globalize-cultures/globalize.culture.{0}.js"</param>\n        /// <param name="defaultCulture">Default culture string to use (eg "en-GB") if one cannot be found for the supplied culture</param>\n        /// <returns></returns>\n        private static string DetermineCultureFile(CultureInfo culture,\n            string filePattern,\n            string defaultCulture = "en-GB" // I\'m a Brit and this is my default\n            )\n        {\n            //Determine culture - GUI culture for preference, user selected culture as fallback\n            var regionalisedFileToUse = string.Format(filePattern, defaultCulture);\n\n            //Try to pick a more appropriate regionalisation if there is one\n            if (File.Exists(HttpContext.Current.Server.MapPath(string.Format(filePattern, culture.Name)))) //First try for a globalize.culture.en-GB.js style file\n                regionalisedFileToUse = string.Format(filePattern, culture.Name);\n            else if (File.Exists(HttpContext.Current.Server.MapPath(string.Format(filePattern, culture.TwoLetterISOLanguageName)))) //That failed; now try for a globalize.culture.en.js style file\n                regionalisedFileToUse = string.Format(filePattern, culture.TwoLetterISOLanguageName);\n\n            return regionalisedFileToUse;\n        }\n\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"The code above creates a script bundle for each culture when the application starts up. This script bundle contains the culture-specific Globalize and Bootstrap Datepicker JavaScript files. If further culture-specific components were added to the application it would make sense to include these here as well."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"_BootstrapLayout.basic.cshtml"})," has been amended to make use of the new bundles and also to include a meta tag that will used to drive regionalisation:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<!doctype html>\n<html lang="en">\n  <head>\n    \x3c!-- Existing head content goes here --\x3e\n\n    \x3c!-- Added to the head to serve a meta tag like this: <meta name="accept-language" content="en-GB" /> --\x3e\n    @Html.MetaAcceptLanguage()\n\n    \x3c!-- Existing head content continues here --\x3e\n  </head>\n  <body>\n    \x3c!-- Existing body content goes here --\x3e\n\n    \x3c!-- Replaces the existing @Scripts.Render --\x3e\n    @Scripts.Render( "~/js", Html.JsCultureBundle() //Serves up the\n    "~/js-culture.de-DE" bundle for example )\n\n    \x3c!-- Existing body content continues here --\x3e\n  </body>\n</html>\n'})}),"\n",(0,a.jsx)(t.p,{children:"To illustrate how this works, a German user running a machine with the de-DE culture would be served up the following 2 files:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"globalize.culture.de-DE.js"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"bootstrap-datepicker.de.js"})}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"where-have-we-got-to",children:"Where have we got to?"}),"\n",(0,a.jsx)(t.p,{children:"With all this done we have now fixed the validation issues we were experiencing previously. This was done by including the Globalize library, the accept-language meta tag and the jQuery Validate Globalize extensions."}),"\n",(0,a.jsx)(t.p,{children:"Besides this we've laid the groundwork for introducing internationalised datepickers by introducing Andrew Rowls fork of the Bootstrap Datepicker. That's what we'll do next..."}),"\n",(0,a.jsx)(t.h2,{id:"international-bootstrap-datepicker",children:"International Bootstrap Datepicker"}),"\n",(0,a.jsxs)(t.p,{children:["The final steps of switching over to using a culture-specific date picker are achieved by making a change to the Scripts section in the ",(0,a.jsx)(t.code,{children:"Create.cshtml"})," file. The existing (and very simple) section should be replaced with this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'@section Scripts {\n<script type="text/javascript">\n    var currentCulture = $("meta[name=\'accept-language\']").prop("content"),\n        language;\n    // Set Globalize to the current culture driven by the meta tag (if any)\n    if (currentCulture) {\n        language = (currentCulture in $.fn.datepicker.dates)\n            ? currentCulture //a language exists which looks like "zh-CN" so we\'ll use it\n            : currentCulture.split("-")[0]; //we\'ll try for a language that looks like "de" and use it if it exists (otherwise it will fall back to the default)\n    }\n    //Initialise any date pickers\n    $(\'.datepicker\').datepicker({ language: language });\n<\/script>\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:'The script above takes the region from the accept-language meta tag and attempts to look up an associated "language" for the Bootstrap Datepicker. If it finds one it uses it, if not then the default language of "en" / English will be used.'}),"\n",(0,a.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(t.p,{children:"In this post we:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"fixed the validation issues we'd introduced by marrying up Twitter.Bootstrap.MVC4 and the Bootstrap Datepicker"}),"\n",(0,a.jsx)(t.li,{children:"switched over to using the Andrew Rowls fork of Bootstrap Datepicker and made use of the internationalisation functionality it exposes."}),"\n"]})]})}function p(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return o}});var i=n(67294);let a={},r=i.createContext(a);function o(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},14245:function(e){e.exports=JSON.parse('{"permalink":"/twitterbootstrapmvc4-meet-bootstrap_14","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2013-01-14-twitterbootstrapmvc4-meet-bootstrap_14/index.md","source":"@site/blog/2013-01-14-twitterbootstrapmvc4-meet-bootstrap_14/index.md","title":"Twitter.Bootstrap.MVC4 meet Bootstrap Datepicker *and* get your Internationalization on...","description":"Learn how to internationalize ASP.NET web apps using Globalize and Bootstrap Datepicker in this developers comprehensive step by step guide.","date":"2013-01-14T00:00:00.000Z","tags":[{"inline":false,"label":"Globalize","permalink":"/tags/globalize","description":"The Globalize library."},{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."}],"readingTime":5.565,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"twitterbootstrapmvc4-meet-bootstrap_14","title":"Twitter.Bootstrap.MVC4 meet Bootstrap Datepicker *and* get your Internationalization on...","authors":"johnnyreilly","tags":["globalize","javascript"],"hide_table_of_contents":false,"description":"Learn how to internationalize ASP.NET web apps using Globalize and Bootstrap Datepicker in this developers comprehensive step by step guide."},"unlisted":false,"prevItem":{"title":"Using Expressions with Constructors","permalink":"/using-expressions-with-constructors"},"nextItem":{"title":"Twitter.Bootstrap.MVC4 meet Bootstrap Datepicker","permalink":"/twitterbootstrapmvc4-meet-bootstrap"}}')}}]);