"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[35389],{23090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var s=n(71108),o=n(74848),i=n(28453);const a={slug:"typescript-types-and-repeatable-builds",title:"@types is rogue",authors:"johnnyreilly",tags:[],hide_table_of_contents:!1,description:"Type definitions from Definitely Typed under @types namespace on npm cannot be trusted to follow semantic versioning, leading to breakages."},r=void 0,p={authorsImageUrls:[void 0]},c=[{value:"How do we respond to this?",id:"how-do-we-respond-to-this",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:'Or perhaps I should call this "@types and repeatable builds"....'}),"\n",(0,o.jsx)(t.p,{children:"The other day, on a React / TypeScript project I work on, the nightly CI build started failing. But nothing had changed in the project... What gives? After digging I discovered the reason; spome of the type definitions which my project depends upon had changed. Why did this break my build? Let\u2019s learn some more..."}),"\n",(0,o.jsxs)(t.p,{children:["We acquire type definitions via npm. Type definitions from Definitely Typed are published to npm by an ",(0,o.jsx)(t.a,{href:"https://github.com/Microsoft/types-publisher",children:"automated process"})," and they are all published under the @types namespace on npm. So, the ",(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/react",children:"react type definition"})," is published as the ",(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/@types/react",children:"@types/react"})," package, the node type definition is published as the ",(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/@types/node",children:"@types/node"})," package. The hip bone's connected to the thigh bone. You get the picture."]}),"\n",(0,o.jsxs)(t.p,{children:["The npm ecosystem is essentially built on top of ",(0,o.jsx)(t.a,{href:"http://semver.org/",children:"semantic versioning"})," and they ",(0,o.jsx)(t.a,{href:"https://docs.npmjs.com/getting-started/semantic-versioning",children:"take it seriously"}),". Essentially, when a package is published it should be categorised as a major release (breaking changes), a minor release (extra functionality which is backwards compatible) or a patch release (backwards compatible bug fixes)."]}),"\n",(0,o.jsx)(t.p,{children:"Now we get to the meat of the matter: @types is rogue. You cannot trust the version numbers on @types packages to respect semantic versioning. They don't."}),"\n",(0,o.jsxs)(t.p,{children:["The main reason for this is that when it comes to versioning, the @types type definition essentially looks to mirror the version of the package they are seeking to type. ",(0,o.jsx)(t.em,{children:"THIS MEANS THE TYPE DEFINITION CANNOT DO ITS OWN SEMANTIC VERSIONING."})," A simple change in a type definition can lead to breakages in consuming code. That's what happened to me. Let's say an exported interface name changes; all code that relies upon the old name will now break. You see? Pain."]}),"\n",(0,o.jsx)(t.h2,{id:"how-do-we-respond-to-this",children:"How do we respond to this?"}),"\n",(0,o.jsxs)(t.p,{children:["My own take has been to pin the version numbers of @types packages; fixing to specific definitions. No ",(0,o.jsx)(t.code,{children:'"~"'})," or ",(0,o.jsx)(t.code,{children:'"^"'})," for my ",(0,o.jsx)(t.code,{children:"@types devDependencies"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["No respect semantic versioning? No problem. You can go much further with repeatable builds and made use of ",(0,o.jsx)(t.a,{href:"https://code.facebook.com/posts/1840075619545360",children:"facebook's new npm client yarn"})," and ",(0,o.jsx)(t.a,{href:"https://yarnpkg.com/blog/2016/11/24/lockfiles-for-all/",children:"lockfiles"})," (very popular BTW) but I haven't felt the need yet. This should be ample for now."]}),"\n",(0,o.jsxs)(t.p,{children:["The other question that may be nagging at your subconscious is this: what\u2019s an easy way to know when new packages are available for my project dependencies? Well, the ",(0,o.jsx)(t.code,{children:"Get-Package -Updates"})," (nuget hat tip) for npm that I\u2019d recommend is this: ",(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/npm-check-updates",children:"npm-check-updates"}),". It does the job wonderfully."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(96540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},71108:e=>{e.exports=JSON.parse('{"permalink":"/typescript-types-and-repeatable-builds","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2017-02-14-typescript-types-and-repeatable-builds/index.md","source":"@site/blog/2017-02-14-typescript-types-and-repeatable-builds/index.md","title":"@types is rogue","description":"Type definitions from Definitely Typed under @types namespace on npm cannot be trusted to follow semantic versioning, leading to breakages.","date":"2017-02-14T00:00:00.000Z","tags":[],"readingTime":2.27,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"typescript-types-and-repeatable-builds","title":"@types is rogue","authors":"johnnyreilly","tags":[],"hide_table_of_contents":false,"description":"Type definitions from Definitely Typed under @types namespace on npm cannot be trusted to follow semantic versioning, leading to breakages."},"unlisted":false,"prevItem":{"title":"Under the Duck: An Afternoon in Open Source","permalink":"/under-duck-afternoon-in-open-source"},"nextItem":{"title":"Hands-free HTTPS","permalink":"/hands-free-https"}}')}}]);