"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["27954"],{41142:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return c}});var o=n(76773),s=n(85893),i=n(50065);let a={slug:"its-not-dead-2-mobx-react-devtools-and-the-undead",title:"It's Not Dead 2: mobx-react-devtools and the undead",authors:"johnnyreilly",tags:["webpack"],hide_table_of_contents:!1,description:"Using `mobx-react-devtools` with `process.env.NODE_ENV` caused problems with webpack production mode. A different approach fixed the issue."},r=void 0,d={authorsImageUrls:[void 0]},c=[{value:"Who Betrayed Me?",id:"who-betrayed-me",level:2},{value:"Perhaps We Change the Advice?",id:"perhaps-we-change-the-advice",level:2}];function l(e){let t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"I spent today digging through our webpack 4 config trying to work out why a production bundle contained code like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'if("production"!==e.env.NODE_ENV){//...\n'})}),"\n",(0,s.jsxs)(t.p,{children:["My expectation was that with webpack 4 and ",(0,s.jsx)(t.code,{children:"'mode': 'production'"})," this meant that behind the scenes all ",(0,s.jsx)(t.code,{children:"process.env.NODE_ENV"})," statements should be converted to ",(0,s.jsx)(t.code,{children:"'production'"}),". Subsequently Uglify would automatically get its groove on with the resulting ",(0,s.jsx)(t.code,{children:'if("production"!=="production") ...'})," and et voil\xe0!... Strip the dead code."]}),"\n",(0,s.jsx)(t.p,{children:"It seemed that was not the case. I was seeing (regrettably) undead code. And who here actually likes the undead?"}),"\n",(0,s.jsx)(t.h2,{id:"who-betrayed-me",children:"Who Betrayed Me?"}),"\n",(0,s.jsxs)(t.p,{children:["My beef was with webpack. It done did me wrong. Or... So I thought. webpack did nothing wrong. It is pure and good and unjustly complained about. It was my other love: ",(0,s.jsx)(t.a,{href:"https://github.com/mobxjs/mobx",children:"mobx"}),". Or to be more specific: ",(0,s.jsx)(t.a,{href:"https://github.com/mobxjs/mobx-react-devtools",children:"mobx-react-devtools"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["It turns out that the way you use ",(0,s.jsx)(t.code,{children:"mobx-react-devtools"})," reliably makes the difference. It's the cause of the stray ",(0,s.jsx)(t.code,{children:'("production"!==e.env.NODE_ENV)'})," statements in our bundle output. After a ",(0,s.jsx)(t.strong,{children:"long"})," time I happened upon ",(0,s.jsx)(t.a,{href:"https://github.com/mobxjs/mobx-react-devtools/issues/66#issuecomment-365151531",children:"this issue"})," which contained a gem by one ",(0,s.jsx)(t.a,{href:"https://github.com/gilesbutler",children:"Giles Butler"}),". His suggested way to reference ",(0,s.jsx)(t.code,{children:"mobx-react-devtools"})," is (as far as I can tell) the solution!"]}),"\n",(0,s.jsxs)(t.p,{children:["On a dummy project I had the ",(0,s.jsx)(t.code,{children:"mobx-react-devtools"})," advised code in place:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import * as React from 'react';\nimport { Layout } from './components/layout';\nimport DevTools from 'mobx-react-devtools';\n\nexport const App: React.SFC<{}> = (_props) => (\n  <div className=\"ui container\">\n    <Layout />\n    {process.env.NODE_ENV !== 'production' ? (\n      <DevTools position={{ bottom: 20, right: 20 }} />\n    ) : null}\n  </div>\n);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["With this I had a build size of 311kb. Closer examination of my bundle revealed that my ",(0,s.jsx)(t.code,{children:"bundle.js"})," was riddled with ",(0,s.jsx)(t.code,{children:'("production"!==e.env.NODE_ENV)'})," statements. Sucks, right?"]}),"\n",(0,s.jsx)(t.p,{children:"Then I tried this instead:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import * as React from 'react';\nimport { Layout } from './components/layout';\nconst { Fragment } = React;\n\nconst DevTools =\n  process.env.NODE_ENV !== 'production'\n    ? require('mobx-react-devtools').default\n    : Fragment;\n\nexport const App: React.SFC<{}> = (_props) => (\n  <div className=\"ui container\">\n    <Layout />\n    <DevTools position={{ bottom: 20, right: 20 }} />\n  </div>\n);\n"})}),"\n",(0,s.jsx)(t.p,{children:"With this approach I got a build size of 191kb. This was thanks to the dead code being actually stripped. That's a saving of 120kb!"}),"\n",(0,s.jsx)(t.h2,{id:"perhaps-we-change-the-advice",children:"Perhaps We Change the Advice?"}),"\n",(0,s.jsx)(t.p,{children:"There's a suggestion that the README should be changed to reflect this advice - until that happens, I wanted to share this solution. Also, I've a nagging feeling that I've missed something pertinent here; if someone knows something that I should... Tell me please!"})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return a}});var o=n(67294);let s={},i=o.createContext(s);function a(e){let t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}},76773:function(e){e.exports=JSON.parse('{"permalink":"/its-not-dead-2-mobx-react-devtools-and-the-undead","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-03-26-its-not-dead-2-mobx-react-devtools-and-the-undead/index.md","source":"@site/blog/2018-03-26-its-not-dead-2-mobx-react-devtools-and-the-undead/index.md","title":"It\'s Not Dead 2: mobx-react-devtools and the undead","description":"Using `mobx-react-devtools` with `process.env.NODE_ENV` caused problems with webpack production mode. A different approach fixed the issue.","date":"2018-03-26T00:00:00.000Z","tags":[{"inline":false,"label":"webpack","permalink":"/tags/webpack","description":"The webpack module bundler."}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"its-not-dead-2-mobx-react-devtools-and-the-undead","title":"It\'s Not Dead 2: mobx-react-devtools and the undead","authors":"johnnyreilly","tags":["webpack"],"hide_table_of_contents":false,"description":"Using `mobx-react-devtools` with `process.env.NODE_ENV` caused problems with webpack production mode. A different approach fixed the issue."},"unlisted":false,"prevItem":{"title":"Using Reflection to Identify Unwanted Dependencies","permalink":"/using-reflection-to-identify-unwanted-dependencies"},"nextItem":{"title":"Uploading Images to Cloudinary with the Fetch API","permalink":"/uploading-images-to-cloudinary-with-fetch"}}')}}]);