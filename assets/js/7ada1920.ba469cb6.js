"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[5810],{3133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var r=t(84756),s=t(74848),a=t(28453);const o={slug:"nswag-generated-c-sharp-client-property-name-clash",title:"NSwag generated C# client: Open API property name clashes and decimal types rather than double",authors:"johnnyreilly",tags:["c#","swagger"],image:"./title-image.png",hide_table_of_contents:!1,description:"Generate C# and TypeScript client libraries from OpenAPI / Swagger definitions using NSwag while overcoming language conflicts and numeric types."},i=void 0,c={image:t(66505).A,authorsImageUrls:[void 0]},l=[{value:"Make a C# Client Generator",id:"make-a-c-client-generator",level:2},{value:"When properties collide",id:"when-properties-collide",level:2},{value:"Use <code>decimal</code> not <code>double</code> for floating point numbers",id:"use-decimal-not-double-for-floating-point-numbers",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["NSwag is a great tool for generating client libraries in C# and TypeScript from Open API / Swagger definitions. You can face issues where Open API property names collide due to the nature of the C# language, and when you want to use ",(0,s.jsx)(n.code,{children:"decimal"})," for your floating point numeric type over ",(0,s.jsx)(n.code,{children:"double"}),". This post demonstrates how to get over both issues."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"title image reading &quot;NSwag generated C# client: Open API property name clashes and decimal types rather than double&quot; with a C# logo and Open API logos",src:t(23038).A+"",width:"1600",height:"900",loading:"lazy"})}),"\n",(0,s.jsx)(n.h2,{id:"make-a-c-client-generator",children:"Make a C# Client Generator"}),"\n",(0,s.jsx)(n.p,{children:"Let's get a console app set up that will allow us to generate a C# client using an Open API file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"dotnet new console -o NSwag\ncd NSwag\ndotnet add package NSwag.CodeGeneration.CSharp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We'll also add a ",(0,s.jsx)(n.code,{children:"petstore-simple.json"})," file to our project which we'll borrow from ",(0,s.jsx)(n.a,{href:"https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/petstore-simple.json",children:"https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/petstore-simple.json"})," (home of the Open API specification):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "swagger": "2.0",\n  "info": {\n    "version": "1.0.0",\n    "title": "Swagger Petstore",\n    "description": "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification",\n    "termsOfService": "http://swagger.io/terms/",\n    "contact": {\n      "name": "Swagger API Team"\n    },\n    "license": {\n      "name": "MIT"\n    }\n  },\n  "host": "petstore.swagger.io",\n  "basePath": "/api",\n  "schemes": ["http"],\n  "consumes": ["application/json"],\n  "produces": ["application/json"],\n  "paths": {\n    "/pets": {\n      "get": {\n        "description": "Returns all pets from the system that the user has access to",\n        "operationId": "findPets",\n        "produces": [\n          "application/json",\n          "application/xml",\n          "text/xml",\n          "text/html"\n        ],\n        "parameters": [\n          {\n            "name": "tags",\n            "in": "query",\n            "description": "tags to filter by",\n            "required": false,\n            "type": "array",\n            "items": {\n              "type": "string"\n            },\n            "collectionFormat": "csv"\n          },\n          {\n            "name": "limit",\n            "in": "query",\n            "description": "maximum number of results to return",\n            "required": false,\n            "type": "integer",\n            "format": "int32"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "pet response",\n            "schema": {\n              "type": "array",\n              "items": {\n                "$ref": "#/definitions/Pet"\n              }\n            }\n          },\n          "default": {\n            "description": "unexpected error",\n            "schema": {\n              "$ref": "#/definitions/ErrorModel"\n            }\n          }\n        }\n      },\n      "post": {\n        "description": "Creates a new pet in the store.  Duplicates are allowed",\n        "operationId": "addPet",\n        "produces": ["application/json"],\n        "parameters": [\n          {\n            "name": "pet",\n            "in": "body",\n            "description": "Pet to add to the store",\n            "required": true,\n            "schema": {\n              "$ref": "#/definitions/NewPet"\n            }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "pet response",\n            "schema": {\n              "$ref": "#/definitions/Pet"\n            }\n          },\n          "default": {\n            "description": "unexpected error",\n            "schema": {\n              "$ref": "#/definitions/ErrorModel"\n            }\n          }\n        }\n      }\n    },\n    "/pets/{id}": {\n      "get": {\n        "description": "Returns a user based on a single ID, if the user does not have access to the pet",\n        "operationId": "findPetById",\n        "produces": [\n          "application/json",\n          "application/xml",\n          "text/xml",\n          "text/html"\n        ],\n        "parameters": [\n          {\n            "name": "id",\n            "in": "path",\n            "description": "ID of pet to fetch",\n            "required": true,\n            "type": "integer",\n            "format": "int64"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "pet response",\n            "schema": {\n              "$ref": "#/definitions/Pet"\n            }\n          },\n          "default": {\n            "description": "unexpected error",\n            "schema": {\n              "$ref": "#/definitions/ErrorModel"\n            }\n          }\n        }\n      },\n      "delete": {\n        "description": "deletes a single pet based on the ID supplied",\n        "operationId": "deletePet",\n        "parameters": [\n          {\n            "name": "id",\n            "in": "path",\n            "description": "ID of pet to delete",\n            "required": true,\n            "type": "integer",\n            "format": "int64"\n          }\n        ],\n        "responses": {\n          "204": {\n            "description": "pet deleted"\n          },\n          "default": {\n            "description": "unexpected error",\n            "schema": {\n              "$ref": "#/definitions/ErrorModel"\n            }\n          }\n        }\n      }\n    }\n  },\n  "definitions": {\n    "Pet": {\n      "type": "object",\n      "allOf": [\n        {\n          "$ref": "#/definitions/NewPet"\n        },\n        {\n          "required": ["id"],\n          "properties": {\n            "id": {\n              "type": "integer",\n              "format": "int64"\n            }\n          }\n        }\n      ]\n    },\n    "NewPet": {\n      "type": "object",\n      "required": ["name"],\n      "properties": {\n        "name": {\n          "type": "string"\n        },\n        "tag": {\n          "type": "string"\n        }\n      }\n    },\n    "ErrorModel": {\n      "type": "object",\n      "required": ["code", "message"],\n      "properties": {\n        "code": {\n          "type": "integer",\n          "format": "int32"\n        },\n        "message": {\n          "type": "string"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We'll tweak our ",(0,s.jsx)(n.code,{children:"NSwag.csproj"})," file to ensure that the ",(0,s.jsx)(n.code,{children:"json"})," file is included in our build output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n  \x3c!-- ... ---\x3e\n  <ItemGroup>\n    <Content Include="**\\*.json">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </Content>\n  </ItemGroup>\n</Project>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will give us a console app with a reference to NSwag. Now we'll flesh out the ",(0,s.jsx)(n.code,{children:"Program.cs"})," file thusly:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing NJsonSchema;\nusing NJsonSchema.Visitors;\nusing NSwag.CodeGeneration.CSharp;\n\nnamespace NSwag {\n    class Program {\n        static async Task Main(string[] args) {\n            Console.WriteLine("Generating client...");\n            await ClientGenerator.GenerateCSharpClient();\n            Console.WriteLine("Generated client.");\n        }\n    }\n\n    public static class ClientGenerator {\n\n        public async static Task GenerateCSharpClient() =>\n            GenerateClient(\n                // https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/petstore-simple.json\n                document: await GetDocumentFromFile("petstore-simple.json"),\n                generatedLocation: "GeneratedClient.cs",\n                generateCode: (OpenApiDocument document) => {\n                    var settings = new CSharpClientGeneratorSettings();\n\n                    var generator = new CSharpClientGenerator(document, settings);\n                    var code = generator.GenerateFile();\n                    return code;\n                }\n            );\n\n        private static void GenerateClient(OpenApiDocument document, string generatedLocation, Func<OpenApiDocument, string> generateCode) {\n            var root = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);\n            var location = Path.GetFullPath(Path.Join(root, @"../../../", generatedLocation));\n\n            Console.WriteLine($"Generating {location}...");\n\n            var code = generateCode(document);\n\n            System.IO.File.WriteAllText(location, code);\n        }\n\n        private static async Task<OpenApiDocument> GetDocumentFromFile(string swaggerJsonFilePath) {\n            var root = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);\n            var swaggerJson = await File.ReadAllTextAsync(Path.GetFullPath(Path.Join(root, swaggerJsonFilePath)));\n            var document = await OpenApiDocument.FromJsonAsync(swaggerJson);\n\n            return document;\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If we perform a ",(0,s.jsx)(n.code,{children:"dotnet run"})," we now pump out a ",(0,s.jsx)(n.code,{children:"GeneratedClient.cs"})," file which is a C# client library for the pet store. Fabulous."]}),"\n",(0,s.jsxs)(n.p,{children:["So far so dandy. We're taking an Open API ",(0,s.jsx)(n.code,{children:"json"})," file and generating a C# client library from it."]}),"\n",(0,s.jsx)(n.h2,{id:"when-properties-collide",children:"When properties collide"}),"\n",(0,s.jsxs)(n.p,{children:["It's time to break things. We're presently generating a ",(0,s.jsx)(n.code,{children:"Pet"})," class that looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]\npublic partial class Pet : NewPet\n{\n    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]\n    public long Id { get; set; }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We're going to take our ",(0,s.jsx)(n.code,{children:"Pet"})," definition in the ",(0,s.jsx)(n.code,{children:"petstore-simple.json"})," file, and add a new ",(0,s.jsx)(n.code,{children:"@id"})," property alongside the ",(0,s.jsx)(n.code,{children:"id"})," property:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"Pet": {\n    "type": "object",\n    "allOf": [\n        {\n            "$ref": "#/definitions/NewPet"\n        },\n        {\n            "required": [\n                "id"\n            ],\n            "properties": {\n                "id": {\n                    "type": "integer",\n                    "format": "int64"\n                },\n                "@id": {\n                    "type": "integer",\n                    "format": "int64"\n                }\n            }\n        }\n    ]\n},\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For why? Whilst this may seem esoteric, this is a scenario that can present. It's not unknown to encounter properties which are identical, save for an ",(0,s.jsx)(n.code,{children:"@"})," prefix. This is often the case for meta-properties."]}),"\n",(0,s.jsx)(n.p,{children:"What do we get if we run our generator over that?"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]\npublic partial class Pet : NewPet\n{\n    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]\n    public long Id { get; set; }\n\n    [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]\n    public long Id { get; set; }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We get code that doesn't compile. You can't have two properties in a C# class with the same name. You also cannot have ",(0,s.jsx)(n.code,{children:"@"})," as a character in a C# property or variable name. To quote the ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/verbatim",children:"docs"}),":"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The @ special character serves as a verbatim identifier."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["It so happens that, by default, NSwag purges ",(0,s.jsx)(n.code,{children:"@"})," characters from property names. If there isn't another property which is named the same save for an ",(0,s.jsx)(n.code,{children:"@"})," prefix, this is a fine strategy. If there is, as for us now, you're toast."]}),"\n",(0,s.jsxs)(n.p,{children:["There's a workaround. We'll create a new ",(0,s.jsx)(n.code,{children:"HandleAtCSharpPropertyNameGenerator"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'/// <summary>\n/// Replace characters which will not comply with C# syntax with something that will\n/// </summary>\npublic class HandleAtCSharpPropertyNameGenerator : NJsonSchema.CodeGeneration.IPropertyNameGenerator {\n    /// <summary>Generates the property name.</summary>\n    /// <param name="property">The property.</param>\n    /// <returns>The new name.</returns>\n    public virtual string Generate(JsonSchemaProperty property) =>\n        ConversionUtilities.ConvertToUpperCamelCase(property.Name\n            .Replace("\\"", string.Empty)\n            .Replace("@", "__") // make "@" => "__", so "@type" => "__type"\n            .Replace("?", string.Empty)\n            .Replace("$", string.Empty)\n            .Replace("[", string.Empty)\n            .Replace("]", string.Empty)\n            .Replace("(", "_")\n            .Replace(")", string.Empty)\n            .Replace(".", "-")\n            .Replace("=", "-")\n            .Replace("+", "plus"), true)\n            .Replace("*", "Star")\n            .Replace(":", "_")\n            .Replace("-", "_")\n            .Replace("#", "_");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This is a replacement for the ",(0,s.jsx)(n.code,{children:"CSharpPropertyNameGenerator"})," that NSwag ships with. Rather than purging the ",(0,s.jsx)(n.code,{children:"@"})," character, it replaces usage with a double underscore: ",(0,s.jsx)(n.code,{children:"__"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We'll make use of our new ",(0,s.jsx)(n.code,{children:"PropertyNameGenerator"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'public async static Task GenerateCSharpClient() =>\n    GenerateClient(\n        // https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/petstore-simple.json\n        document: await GetDocumentFromFile("petstore-simple.json"),\n        generatedLocation: "GeneratedClient.cs",\n        generateCode: (OpenApiDocument document) => {\n            var settings = new CSharpClientGeneratorSettings {\n                CSharpGeneratorSettings = {\n                    PropertyNameGenerator = new HandleAtCSharpPropertyNameGenerator() // @ shouldn\'t cause us problems\n                }\n            };\n\n            var generator = new CSharpClientGenerator(document, settings);\n            var code = generator.GenerateFile();\n            return code;\n        }\n    );\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With this in place, when we ",(0,s.jsx)(n.code,{children:"dotnet run"})," we create a class that looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]\npublic partial class Pet : NewPet\n{\n    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]\n    public long Id { get; set; }\n\n    [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]\n    public long __id { get; set; }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["So the newly generated property name is ",(0,s.jsx)(n.code,{children:"__id"})," rather than the clashing ",(0,s.jsx)(n.code,{children:"Id"}),". Rather wonderfully, this works. It resolves the issue we faced. We've chosen to use ",(0,s.jsx)(n.code,{children:"__"})," as our prefix - we could choose something else if that worked better for us."]}),"\n",(0,s.jsx)(n.p,{children:"Knowing that this hook exists is super useful."}),"\n",(0,s.jsxs)(n.h2,{id:"use-decimal-not-double-for-floating-point-numbers",children:["Use ",(0,s.jsx)(n.code,{children:"decimal"})," not ",(0,s.jsx)(n.code,{children:"double"})," for floating point numbers"]}),"\n",(0,s.jsxs)(n.p,{children:["Another common problem with generated C# clients is the number type used to represent floating point numbers. The default for C# is ",(0,s.jsx)(n.code,{children:"double"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This is a reasonable choice when you consider the ",(0,s.jsx)(n.a,{href:"https://swagger.io/docs/specification/data-models/data-types/#numbers",children:"official format"})," for highly precise floating point numbers is ",(0,s.jsx)(n.code,{children:"double"}),":"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["OpenAPI has two numeric types, ",(0,s.jsx)(n.code,{children:"number"})," and ",(0,s.jsx)(n.code,{children:"integer"}),", where ",(0,s.jsx)(n.code,{children:"number"})," includes both integer and floating-point numbers. An optional ",(0,s.jsx)(n.code,{children:"format"})," keyword serves as a hint for the tools to use a specific numeric type:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"float"})," - Floating-point numbers.\n",(0,s.jsx)(n.code,{children:"double"})," - Floating-point numbers with double precision."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Let's tweak our pet definition to reflect this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"Pet": {\n    "type": "object",\n    "allOf": [\n        {\n            "$ref": "#/definitions/NewPet"\n        },\n        {\n            "required": [\n                "id"\n            ],\n            "properties": {\n                "id": {\n                    "type": "number",\n                    "format": "double"\n                },\n                "@id": {\n                    "type": "number",\n                    "format": "double"\n                }\n            }\n        }\n    ]\n},\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With this in place, when we ",(0,s.jsx)(n.code,{children:"dotnet run"})," we create a class that looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]\npublic partial class Pet : NewPet\n{\n    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]\n    public double Id { get; set; }\n\n    [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]\n    public double __id { get; set; }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["C# developers may well rather work with a ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.decimal?view=net-5.0",children:(0,s.jsx)(n.code,{children:"decimal"})}),' type which can handle "financial calculations that require large numbers of significant integral and fractional digits and no round-off errors".']}),"\n",(0,s.jsxs)(n.p,{children:["There is a way to switch from using ",(0,s.jsx)(n.code,{children:"double"})," to ",(0,s.jsx)(n.code,{children:"decimal"})," in your generated clients. I've been using the approach for some years, and I suspect I first adapted it from ",(0,s.jsx)(n.a,{href:"https://github.com/RicoSuter/NSwag/issues/1814#issuecomment-448752684",children:"a comment on GitHub"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["It uses the ",(0,s.jsx)(n.a,{href:"https://en.m.wikipedia.org/wiki/Visitor_pattern",children:"visitor pattern"})," and looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"/// <summary>\n/// By default the C# decimal number type used is double; this makes it decimal\n/// </summary>\npublic class DoubleToDecimalVisitor : JsonSchemaVisitorBase {\n    protected override JsonSchema VisitSchema(JsonSchema schema, string path, string typeNameHint) {\n        if (schema.Type == JsonObjectType.Number)\n            schema.Format = JsonFormatStrings.Decimal;\n\n        return schema;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The code above, when invoked upon our ",(0,s.jsx)(n.code,{children:"OpenApiDocument"}),", changes the format of all number types to be ",(0,s.jsx)(n.code,{children:"decimal"}),". Which results in code along these lines:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]\npublic partial class Pet : NewPet\n{\n    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]\n    public decimal Id { get; set; }\n\n    [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]\n    public decimal __id { get; set; }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If we take all the code, and put it together, we end up with this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing NJsonSchema;\nusing NJsonSchema.Visitors;\nusing NSwag.CodeGeneration.CSharp;\n\nnamespace NSwag {\n    class Program {\n        static async Task Main(string[] args) {\n            Console.WriteLine("Generating client...");\n            await ClientGenerator.GenerateCSharpClient();\n            Console.WriteLine("Generated client.");\n        }\n    }\n\n    public static class ClientGenerator {\n\n        public async static Task GenerateCSharpClient() =>\n            GenerateClient(\n                // https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/petstore-simple.json\n                document: await GetDocumentFromFile("petstore-simple.json"),\n                generatedLocation: "GeneratedClient.cs",\n                generateCode: (OpenApiDocument document) => {\n                    new DoubleToDecimalVisitor().Visit(document); // we want decimals not doubles\n\n                    var settings = new CSharpClientGeneratorSettings {\n                        CSharpGeneratorSettings = {\n                            PropertyNameGenerator = new HandleAtCSharpPropertyNameGenerator() // @ shouldn\'t cause us problems\n                        }\n                    };\n\n                    var generator = new CSharpClientGenerator(document, settings);\n                    var code = generator.GenerateFile();\n                    return code;\n                }\n            );\n\n        private static void GenerateClient(OpenApiDocument document, string generatedLocation, Func<OpenApiDocument, string> generateCode) {\n            var root = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);\n            var location = Path.GetFullPath(Path.Join(root, @"../../../", generatedLocation));\n\n            Console.WriteLine($"Generating {location}...");\n\n            var code = generateCode(document);\n\n            System.IO.File.WriteAllText(location, code);\n        }\n\n        private static async Task<OpenApiDocument> GetDocumentFromFile(string swaggerJsonFilePath) {\n            var root = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);\n            var swaggerJson = await File.ReadAllTextAsync(Path.GetFullPath(Path.Join(root, swaggerJsonFilePath)));\n            var document = await OpenApiDocument.FromJsonAsync(swaggerJson);\n\n            return document;\n        }\n    }\n\n    /// <summary>\n    /// By default the C# decimal number type used is double; this makes it decimal\n    /// </summary>\n    public class DoubleToDecimalVisitor : JsonSchemaVisitorBase {\n        protected override JsonSchema VisitSchema(JsonSchema schema, string path, string typeNameHint) {\n            if (schema.Type == JsonObjectType.Number)\n                schema.Format = JsonFormatStrings.Decimal;\n\n            return schema;\n        }\n    }\n\n    /// <summary>\n    /// Replace characters which will not comply with C# syntax with something that will\n    /// </summary>\n    public class HandleAtCSharpPropertyNameGenerator : NJsonSchema.CodeGeneration.IPropertyNameGenerator {\n        /// <summary>Generates the property name.</summary>\n        /// <param name="property">The property.</param>\n        /// <returns>The new name.</returns>\n        public virtual string Generate(JsonSchemaProperty property) =>\n            ConversionUtilities.ConvertToUpperCamelCase(property.Name\n                .Replace("\\"", string.Empty)\n                .Replace("@", "__") // make "@" => "__", so "@type" => "__type"\n                .Replace("?", string.Empty)\n                .Replace("$", string.Empty)\n                .Replace("[", string.Empty)\n                .Replace("]", string.Empty)\n                .Replace("(", "_")\n                .Replace(")", string.Empty)\n                .Replace(".", "-")\n                .Replace("=", "-")\n                .Replace("+", "plus"), true)\n                .Replace("*", "Star")\n                .Replace(":", "_")\n                .Replace("-", "_")\n                .Replace("#", "_");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"This post takes the tremendous NSwag, and demonstrates a mechanism for using it to create C# clients from an Open API / Swagger documents which:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["can handle property names with an ",(0,s.jsx)(n.code,{children:"@"})," prefix which might collide with the same property without the prefix"]}),"\n",(0,s.jsxs)(n.li,{children:["use ",(0,s.jsx)(n.code,{children:"decimal"})," as the preferred number type for floating point numbers"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},23038:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/title-image-9d10b6aaac2d152813dbc2d20789b6b7.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},66505:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/title-image-9d10b6aaac2d152813dbc2d20789b6b7.png"},84756:e=>{e.exports=JSON.parse('{"permalink":"/nswag-generated-c-sharp-client-property-name-clash","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2021-10-31-nswag-generated-c-sharp-client-property-name-clash/index.md","source":"@site/blog/2021-10-31-nswag-generated-c-sharp-client-property-name-clash/index.md","title":"NSwag generated C# client: Open API property name clashes and decimal types rather than double","description":"Generate C# and TypeScript client libraries from OpenAPI / Swagger definitions using NSwag while overcoming language conflicts and numeric types.","date":"2021-10-31T00:00:00.000Z","tags":[{"inline":false,"label":"C#","permalink":"/tags/csharp","description":"The C# programming language."},{"inline":false,"label":"Swagger","permalink":"/tags/swagger","description":"The Swagger API documentation framework - now known as OpenAPI."}],"readingTime":9.75,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"nswag-generated-c-sharp-client-property-name-clash","title":"NSwag generated C# client: Open API property name clashes and decimal types rather than double","authors":"johnnyreilly","tags":["c#","swagger"],"image":"./title-image.png","hide_table_of_contents":false,"description":"Generate C# and TypeScript client libraries from OpenAPI / Swagger definitions using NSwag while overcoming language conflicts and numeric types."},"unlisted":false,"prevItem":{"title":"Azure standard availability tests with Bicep","permalink":"/azure-standard-tests-with-bicep"},"nextItem":{"title":"Docusaurus, meta tags and Google Discover","permalink":"/docusaurus-meta-tags-and-google-discover"}}')}}]);