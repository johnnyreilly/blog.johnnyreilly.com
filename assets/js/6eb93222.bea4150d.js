"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[41514],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={slug:"images-in-markdown-for-azure-devops-marketplace",title:"Visual Studio Marketplace: images in Markdown!",authors:"johnnyreilly",tags:["Azure DevOps"],image:"./azure-devops-marketplace.webp",description:"Publish your README/index.md and associated images to Visual Studio Marketplace.",hide_table_of_contents:!1},l=void 0,p={permalink:"/images-in-markdown-for-azure-devops-marketplace",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-11-28-images-in-markdown-for-azure-devops-marketplace/index.md",source:"@site/blog/2020-11-28-images-in-markdown-for-azure-devops-marketplace/index.md",title:"Visual Studio Marketplace: images in Markdown!",description:"Publish your README/index.md and associated images to Visual Studio Marketplace.",date:"2020-11-28T00:00:00.000Z",formattedDate:"November 28, 2020",tags:[{label:"Azure DevOps",permalink:"/tags/azure-dev-ops"}],readingTime:2.41,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"images-in-markdown-for-azure-devops-marketplace",title:"Visual Studio Marketplace: images in Markdown!",authors:"johnnyreilly",tags:["Azure DevOps"],image:"./azure-devops-marketplace.webp",description:"Publish your README/index.md and associated images to Visual Studio Marketplace.",hide_table_of_contents:!1},prevItem:{title:"azure-pipelines-task-lib and isOutput setVariable",permalink:"/azure-pipelines-task-lib-and-isoutput-setvariable"},nextItem:{title:"Bulletproof uniq with TypeScript generics (yay code reviews!)",permalink:"/bulletproof-uniq-with-typescript"}},u={image:n(94120).Z,authorsImageUrls:[void 0]},c=[{value:"How can our tasks look as lovely?",id:"how-can-our-tasks-look-as-lovely",level:2},{value:"Mark(Down) our manifest",id:"markdown-our-manifest",level:2},{value:"Now the images...",id:"now-the-images",level:2}],d={toc:c};function m(e){var{components:t}=e,s=i(e,["components"]);return(0,a.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},d,s),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"I've recently found myself developing ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/extend/develop/add-build-task?view=azure-devops"},"custom pipelines task extensions for Azure DevOps"),". The extensions being developed end up in the ",(0,a.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/azuredevops"},"Azure DevOps Marketplace"),". What you see there when you look at existing extensions is some pretty lovely documentation."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"eager",fetchpriority:"high",alt:"screenshot of a rich Markdown powered screen with images in Visual Studio Marketplace",src:n(94120).Z,width:"600",height:"413"})),(0,a.kt)("h2",{id:"how-can-our-tasks-look-as-lovely"},"How can our tasks look as lovely?"),(0,a.kt)("p",null,"That, my friends, is the question to answer. Good documentation is key to success. Here's the ask: when a custom task is installed it becomes available in the marketplace, we want it to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"contain documentation"),(0,a.kt)("li",{parentName:"ul"},"that documentation should support images... For a picture, famously, speaks a thousand words")),(0,a.kt)("h2",{id:"markdown-our-manifest"},"Mark(Down) our manifest"),(0,a.kt)("p",null,"To get documentation showing up in the marketplace, we need to take a look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"vss-extension.json")," file which lies at the root of our extension folder. It's a kind of manifest file and is documented ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/extend/develop/manifest?view=azure-devops"},"here"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/extend/develop/manifest?view=azure-devops#discovery-attributes"},"Tucked away in the docs, you'll find mention of a ",(0,a.kt)("inlineCode",{parentName:"a"},"content")," property and the words:")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Dictionary of content files that describe your extension to users... Each file is assumed to be in ",(0,a.kt)("a",{parentName:"p",href:"https://help.github.com/articles/github-flavored-markdown/"},"GitHub Flavored Markdown format"),". The path of each item is the path to the markdown file in the extension. Valid keys: ",(0,a.kt)("inlineCode",{parentName:"p"},"details"),".")),(0,a.kt)("p",null,"This means we can have a Markdown file in our repo which documents our task. To stay consistent with most projects, a solid choice is to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"README/index.md")," that sits in the root of the project to this end."),(0,a.kt)("p",null,"So the simple addition of this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  //...\n  "content": {\n    "details": {\n      "path": "README/index.md"\n    }\n  }\n  //...\n}\n')),(0,a.kt)("p",null,"Gives us documentation in the marketplace. Yay!"),(0,a.kt)("h2",{id:"now-the-images"},"Now the images..."),(0,a.kt)("p",null,"If we are referencing images in our ",(0,a.kt)("inlineCode",{parentName:"p"},"README/index.md")," then, as it stands right now, they won't show up in the marketplace. It'll be broken link city. Imagine some Markdown like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"![alt text](images/screenshot.png)\n")),(0,a.kt)("p",null,"This is entirely correct and supported, but won't work by default. This is because these images need to be specified in the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/extend/develop/manifest?view=azure-devops#files"},(0,a.kt)("inlineCode",{parentName:"a"},"files")," property")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"vss-extension.json"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  //...\n  "content": {\n    "details": {\n      "path": "README/index.md"\n    }\n  },\n  "files": [\n    {\n      "path": "images",\n      "addressable": true\n    }\n  ]\n  //...\n}\n')),(0,a.kt)("p",null,"Consider the above; the ",(0,a.kt)("inlineCode",{parentName:"p"},"path")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"images")," includes everything inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"images")," folder in the task. However, it's crucial that the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/extend/develop/manifest?view=azure-devops#properties-1"},(0,a.kt)("inlineCode",{parentName:"a"},'"addressable": true'))," is present as well. It's this that makes the files in this ",(0,a.kt)("inlineCode",{parentName:"p"},"path")," URL-addressable. And without that, the images won't be displayed."),(0,a.kt)("p",null,"That's it! We're done! We can have rich, image inclusive, documentation in our custom tasks."),(0,a.kt)("p",null,"A final note: it's possible to specify individual files rather than whole paths in the ",(0,a.kt)("inlineCode",{parentName:"p"},"files")," directory and you might want to do that if you're being very careful around file size. There is a maximum size for a custom task and it's easy to breach it. But by and large I find that \"allowlisting\" a single directory is easier."))}m.isMDXComponent=!0},94120:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/azure-devops-marketplace-1bdb3a833d6a0e48a6c8840314143902.webp"}}]);