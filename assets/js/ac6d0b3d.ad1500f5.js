"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[90798],{25623:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/Forbidden-300fbe3de9f26ca1e8cfd55ee6cbd806.webp"},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(96540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},50623:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var n=o(57652),s=o(74848),i=o(28453);const r={slug:"how-to-make-azure-ad-403",title:"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect",authors:"johnnyreilly",tags:["asp.net","azure"],image:"./Forbidden.webp",hide_table_of_contents:!1,description:"The `Microsoft.Identity.Web` library redirects to AccessDenied with a 302 (redirect) status code. Learn to return a 403 (forbidden) status code instead."},a=void 0,c={image:o(25623).A,authorsImageUrls:[void 0]},d=[{value:"Give us <code>403</code>",id:"give-us-403",level:2},{value:"Extra customisation bonus points",id:"extra-customisation-bonus-points",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["By default ",(0,s.jsx)(t.code,{children:"Microsoft.Identity.Web"})," responds to unauthorized requests with a 302 (redirect). Do you want a 403 (forbidden) instead? Here's how."]}),"\n",(0,s.jsxs)(t.p,{children:["If you're using the tremendous ",(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-web-app-sign-user-app-configuration?tabs=aspnetcore",children:"Azure Active Directory for authentication with ASP.NET"})," then there's a good chance you're using the ",(0,s.jsx)(t.a,{href:"https://github.com/AzureAD/microsoft-identity-web",children:(0,s.jsx)(t.code,{children:"Microsoft.Identity.Web"})})," library. It's this that allows us to drop the following statement into the ",(0,s.jsx)(t.code,{children:"ConfigureServices"})," method of our ",(0,s.jsx)(t.code,{children:"Startup"})," class:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:"services.AddMicrosoftIdentityWebAppAuthentication(Configuration);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Which (combined with configuration in our ",(0,s.jsx)(t.code,{children:"appsettings.json"})," files) hooks us up with Azure AD for authentication. This is 95% awesome. The 5% is what we're here for. Here's a screenshot of the scenario that troubles us:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"a screenshot of Chrome Devtools showing a 302",src:o(59223).A+"",width:"2326",height:"1090",loading:"lazy"})}),"\n",(0,s.jsxs)(t.p,{children:["We've made a request to ",(0,s.jsx)(t.code,{children:"/WeatherForecast"}),"; a secured endpoint (a controller decorated with the ",(0,s.jsx)(t.code,{children:"Authorize"})," attribute). We're authenticated; the app knows who we are. But we're not authorized / allowed to access this endpoint. We don't have permission. The HTTP specification caters directly for this scenario with ",(0,s.jsxs)(t.a,{href:"https://tools.ietf.org/html/rfc7231#section-6.5.3",children:["status code ",(0,s.jsx)(t.code,{children:"403 Forbidden"})]}),":"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["However, ",(0,s.jsx)(t.code,{children:"Microsoft.Identity.Web"})," is ploughing another furrow. Instead of returning ",(0,s.jsx)(t.code,{children:"403"}),", it's returning ",(0,s.jsx)(t.code,{children:"302 Found"})," and redirecting the browser to ",(0,s.jsx)(t.code,{children:"https://localhost:5001/Account/AccessDenied?ReturnUrl=%2FWeatherForecast"}),". Now the intentions here are ",(0,s.jsx)(t.em,{children:"great"}),". If you wanted to implement a page in your application at that endpoint that displayed some kind of useful message it would be really useful. However, what if you want the more HTTP-y behaviour instead? In the case of a HTTP request triggered by JavaScript (typical for Single Page Applications) then this redirect isn't that helpful. JavaScript doesn't really know what to do with the ",(0,s.jsx)(t.code,{children:"302"})," and whilst you could code around this, it's not desirable."]}),"\n",(0,s.jsxs)(t.p,{children:["We want ",(0,s.jsx)(t.code,{children:"403"})," - we don't want ",(0,s.jsx)(t.code,{children:"302"}),"."]}),"\n",(0,s.jsxs)(t.h2,{id:"give-us-403",children:["Give us ",(0,s.jsx)(t.code,{children:"403"})]}),"\n",(0,s.jsxs)(t.p,{children:["You can have this behaviour by dropping the following code after your ",(0,s.jsx)(t.code,{children:"services.AddMicrosoftIdentityWebAppAuthentication"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:"services.Configure<CookieAuthenticationOptions>(CookieAuthenticationDefaults.AuthenticationScheme, options =>\n{\n    options.Events.OnRedirectToAccessDenied = new Func<RedirectContext<CookieAuthenticationOptions>, Task>(context =>\n    {\n        context.Response.StatusCode = StatusCodes.Status403Forbidden;\n        return context.Response.CompleteAsync();\n    });\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This code hijacks the redirect to AccessDenied and transforms it into a ",(0,s.jsx)(t.code,{children:"403"})," instead. Tremendous! What does this look like?"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"a screenshot of Chrome Devtools showing a 403",src:o(68770).A+"",width:"2326",height:"1090",loading:"lazy"})}),"\n",(0,s.jsx)(t.p,{children:"This is the behaviour we want!"}),"\n",(0,s.jsx)(t.h2,{id:"extra-customisation-bonus-points",children:"Extra customisation bonus points"}),"\n",(0,s.jsxs)(t.p,{children:["You may want to have some nuance to the way you handle unauthorized requests. Because of the nature of ",(0,s.jsx)(t.code,{children:"OnRedirectToAccessDenied"})," this is entirely possible; you have complete access to the requests coming in which you can use to direct behaviour. To take a single example, let's say we want to direct normal browsing behaviour (AKA humans clicking about in Chrome) which is not authorized to a given screen, otherwise provide ",(0,s.jsx)(t.code,{children:"403"}),"s. What would that look like?"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'services.Configure<CookieAuthenticationOptions>(CookieAuthenticationDefaults.AuthenticationScheme, options =>\n{\n    options.Events.OnRedirectToAccessDenied = new Func<RedirectContext<CookieAuthenticationOptions>, Task>(context =>\n    {\n        var isRequestForHtml = context.Request.Headers["Accept"].ToString().Contains("text/html");\n        if (isRequestForHtml) {\n            context.Response.StatusCode = StatusCodes.Status302Found;\n            context.Response.Headers["Location"] = "/unauthorized";\n        }\n        else {\n            context.Response.StatusCode = StatusCodes.Status403Forbidden;\n        }\n\n        return context.Response.CompleteAsync();\n    });\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["So above, we check the request ",(0,s.jsx)(t.code,{children:"Accept"})," headers and see if they contain ",(0,s.jsx)(t.code,{children:'"text/html"'}),"; which we're using as a signal that the request came from a users browsing. (This may not be bulletproof; better suggestions gratefully received.) If the request does contain a ",(0,s.jsx)(t.code,{children:'"text/html"``Accept'})," header then we redirect the client to an ",(0,s.jsx)(t.code,{children:"/unauthorized"})," screen, otherwise we return ",(0,s.jsx)(t.code,{children:"403"})," as we did before. Super flexible and powerful!"]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},57652:e=>{e.exports=JSON.parse('{"permalink":"/how-to-make-azure-ad-403","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-12-21-how-to-make-azure-ad-403/index.md","source":"@site/blog/2020-12-21-how-to-make-azure-ad-403/index.md","title":"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect","description":"The `Microsoft.Identity.Web` library redirects to AccessDenied with a 302 (redirect) status code. Learn to return a 403 (forbidden) status code instead.","date":"2020-12-21T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."},{"inline":false,"label":"Azure","permalink":"/tags/azure","description":"The Microsoft cloud platform."}],"readingTime":2.85,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"how-to-make-azure-ad-403","title":"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect","authors":"johnnyreilly","tags":["asp.net","azure"],"image":"./Forbidden.webp","hide_table_of_contents":false,"description":"The `Microsoft.Identity.Web` library redirects to AccessDenied with a 302 (redirect) status code. Learn to return a 403 (forbidden) status code instead."},"unlisted":false,"prevItem":{"title":"dotnet-format: Prettier your C# with lint-staged & husky","permalink":"/prettier-your-csharp-with-dotnet-format-and-lint-staged"},"nextItem":{"title":"Nullable reference types; CSharp\'s very own strictNullChecks","permalink":"/nullable-reference-types-csharp-strictnullchecks"}}')},59223:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/AccessDenied-8f7fe7a5efb19bea55dcae3920dce906.webp"},68770:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/Forbidden-300fbe3de9f26ca1e8cfd55ee6cbd806.webp"}}]);