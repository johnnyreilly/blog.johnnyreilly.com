"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[76495],{41151:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=o(85893),r=o(11151);const i={slug:"setting-build-version-using-appveyor",title:"Setting Build Version Using AppVeyor and ASP.Net Core",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell."},s=void 0,l={permalink:"/setting-build-version-using-appveyor",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2017-04-25-setting-build-version-using-appveyor/index.md",source:"@site/blog/2017-04-25-setting-build-version-using-appveyor/index.md",title:"Setting Build Version Using AppVeyor and ASP.Net Core",description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell.",date:"2017-04-25T00:00:00.000Z",formattedDate:"April 25, 2017",tags:[{label:"asp.net",permalink:"/tags/asp-net"}],readingTime:1.03,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"setting-build-version-using-appveyor",title:"Setting Build Version Using AppVeyor and ASP.Net Core",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell."},unlisted:!1,prevItem:{title:"TypeScript: Spare the Rod, Spoil the Code",permalink:"/typescript-spare-rod-spoil-code"},nextItem:{title:"I'm looking for work!",permalink:"/im-looking-for-work"}},a={authorsImageUrls:[void 0]},p=[];function c(e){const t={a:"a",code:"code",p:"p",...(0,r.a)(),...e.components};return(0,n.jsxs)(t.p,{children:["AppVeyor has ",(0,n.jsx)(t.a,{href:"https://www.appveyor.com/docs/build-configuration/#assemblyinfo-patching",children:"support for setting the version of a binary during a build"}),". However - this deals with the classic ASP.Net world of ",(0,n.jsx)(t.code,{children:"AssemblyInfo"}),". I didn't find any reference to support for doing the same with dot net core. Remember, dot net core ",(0,n.jsxs)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json-to-csproj#version",children:["relies upon a ",(0,n.jsx)(t.code,{children:"&lt;Version&gt;"})," or a ",(0,n.jsx)(t.code,{children:"&lt;VersionPrefix&gt;"})," setting in the ",(0,n.jsx)(t.code,{children:".csproj"})," file"]}),". Personally, ",(0,n.jsx)(t.code,{children:"&lt;Version&gt;"})," is my jam."]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>l,a:()=>s});var n=o(67294);const r={},i=n.createContext(r);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);