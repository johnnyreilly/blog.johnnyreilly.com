"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["98919"],{45795:function(e,t,i){i.r(t),i.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return h}});var s=i(34979),o=i(85893),n=i(50065);let a={slug:"html-to-pdf-using-wcf-service",title:"HTML to PDF using a WCF Service",authors:"johnnyreilly",tags:[],hide_table_of_contents:!1,description:"This ASP.NET WCF service creates PDFs from HTML and is remotely fired with wkhtmltopdf, using `webHttpBinding` for simple service calls."},r=void 0,l={authorsImageUrls:[void 0]},h=[{value:"TL; DR - &quot;Talk is cheap. Show me the code.&quot;",id:"tl-dr---talk-is-cheap-show-me-the-code",level:2},{value:"A little more detail",id:"a-little-more-detail",level:2},{value:"That which binds us",id:"that-which-binds-us",level:2},{value:"Good behaviour",id:"good-behaviour",level:2},{value:"Test Harness",id:"test-harness",level:2}];function c(e){let t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"tl-dr---talk-is-cheap-show-me-the-code",children:'TL; DR - "Talk is cheap. Show me the code."'}),"\n",(0,o.jsxs)(t.p,{children:["Some time ago I wrote a ",(0,o.jsx)(t.a,{href:"/making-pdfs-from-html-in-c-using",children:"post which demonstrated how you could make PDFs from HTML"})," using C# and ",(0,o.jsx)(t.a,{href:"http://code.google.com/p/wkhtmltopdf/",children:"wkhtmltopdf"}),". To my lasting surprise this has been the most popular post I've written. I recently put together an ASP.NET WCF service which exposed this functionality which I thought might be worth sharing. The code can be found on GitHub ",(0,o.jsx)(t.a,{href:"https://github.com/johnnyreilly/PdfMakerWcfService",children:"here"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"a-little-more-detail",children:"A little more detail"}),"\n",(0,o.jsxs)(t.p,{children:["I should say up front that I'm still a little ambivalent about how sensible an idea this is. Behind the scenes this WCF service is remotely firing up wkhtmltopdf using ",(0,o.jsx)(t.code,{children:"System.Diagnostics.Process"}),". I feel a little wary about recommending this as a solution for a variety of not particularly defined reasons. However, I have to say I've found this pretty stable and reliable. Bottom line it seems to work and work consistently. But I though I should include a caveat emptor; there is probably a better approach than this available. Anyway..."]}),"\n",(0,o.jsxs)(t.p,{children:["There isn't actually a great deal to say about this WCF service. It should (hopefully) just do what it says on the tin. Putting it together didn't involve a great deal of work; essentially it takes the code from the initial blog post and just wraps it in a WCF service called ",(0,o.jsx)(t.code,{children:"PdfMaker"}),". The service exposes 2 methods:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"GetPdf"})," - given a supplied URL this method creates a PDF and then returns it as a Stream to the client"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"GetPdfUrl"})," - given a supplied URL this method creates a PDF and then returns the location of it to the client"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Both of these methods also set a Location header in the response indicating the location of the created PDF."}),"\n",(0,o.jsx)(t.h2,{id:"that-which-binds-us",children:"That which binds us"}),"\n",(0,o.jsxs)(t.p,{children:["The service uses ",(0,o.jsx)(t.code,{children:"webHttpBinding"}),'. This is commonly employed when people want to expose a RESTful WCF service. The reason I\'ve used this binding is I wanted a simple "in" when calling the service. I wanted to be able to call the service via AJAX as well as directly by browsing to the service and supplying a URL-encoded URL like this:']}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"http://localhost:59002/PdfMaker.svc/GetPdf?url=http%3A%2F%2Fnews.ycombinator.com/"}),"You may wonder why I'm using ",(0,o.jsx)(t.a,{href:"http://news.ycombinator.com",children:"http://news.ycombinator.com"})," for the example above. I chose this as Hacker News is a very simple site; very few resources and a small page size. This means the service has less work to do when creating the PDF; it's a quick demo."]}),"\n",(0,o.jsx)(t.p,{children:"I should say that this service is arguably **not** completely RESTful as each GET operation behind the scenes attempts to create a new PDF (arguably a side-effect). These should probably be POST operations as they create a new resource each time they're hit. However, if they were I wouldn't be able to just enter a URL into a browser for testing and that's really useful. So tough, I shake my fist at the devotees of pure REST on this occasion. (If I should be attacked in the street shortly after this blog is posted then the police should be advised this is good line of inquiry...)"}),"\n",(0,o.jsx)(t.h2,{id:"good-behaviour",children:"Good behaviour"}),"\n",(0,o.jsxs)(t.p,{children:["It's worth noting that ",(0,o.jsx)(t.code,{children:"automaticFormatSelectionEnabled"})," set to true on the behaviour so that content negotiation is enabled. Obviously for the ",(0,o.jsx)(t.code,{children:"GetPdf"})," action this is rather meaningless as it's a stream that's passed back. However, for the ",(0,o.jsx)(t.code,{children:"GetPdfUrl"})," action the returned string can either be JSON or XML. The Fiddler screenshots below demonstrate this in action."]}),"\n",(0,o.jsx)(t.h2,{id:"test-harness",children:"Test Harness"}),"\n",(0,o.jsxs)(t.p,{children:["As a final touch I added in a test harness in the form of ",(0,o.jsx)(t.code,{children:"Demo.aspx"}),". Here's an example of the output generated when pointing at Hacker News:"]}),"\n",(0,o.jsx)("iframe",{src:"https://docs.google.com/file/d/0B87K8-qxOZGFMGNCUWRneUFsVFU/preview",width:"500",height:"500"}),"\n",(0,o.jsxs)(t.p,{children:["And that's it. If there was a need this service could be easily extended to leverage the ",(0,o.jsx)(t.a,{href:"http://madalgo.au.dk/~jakobt/wkhtmltoxdoc/wkhtmltopdf-0.9.9-doc.html",children:"various options"})," that wkhtmltopdf makes available. Hope people find it useful."]})]})}function d(e={}){let{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},50065:function(e,t,i){i.d(t,{Z:function(){return r},a:function(){return a}});var s=i(67294);let o={},n=s.createContext(o);function a(e){let t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(n.Provider,{value:t},e.children)}},34979:function(e){e.exports=JSON.parse('{"permalink":"/html-to-pdf-using-wcf-service","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2013-01-03-html-to-pdf-using-wcf-service/index.md","source":"@site/blog/2013-01-03-html-to-pdf-using-wcf-service/index.md","title":"HTML to PDF using a WCF Service","description":"This ASP.NET WCF service creates PDFs from HTML and is remotely fired with wkhtmltopdf, using `webHttpBinding` for simple service calls.","date":"2013-01-03T00:00:00.000Z","tags":[],"readingTime":3.13,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"html-to-pdf-using-wcf-service","title":"HTML to PDF using a WCF Service","authors":"johnnyreilly","tags":[],"hide_table_of_contents":false,"description":"This ASP.NET WCF service creates PDFs from HTML and is remotely fired with wkhtmltopdf, using `webHttpBinding` for simple service calls."},"unlisted":false,"prevItem":{"title":"Twitter.Bootstrap.MVC4 meet Bootstrap Datepicker","permalink":"/twitterbootstrapmvc4-meet-bootstrap"},"nextItem":{"title":"Getting up to speed with Bloomberg\'s Open API...","permalink":"/a-nicer-net-api-for-bloombergs-open-api"}}')}}]);