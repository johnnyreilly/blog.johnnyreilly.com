"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[23150],{13225:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/title-image-29f5f663eb5da2a98325dc6ad5967e95.png"},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var s=i(96540);const n={},l=s.createContext(n);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(l.Provider,{value:t},e.children)}},35483:e=>{e.exports=JSON.parse('{"permalink":"/azure-pipelines-meet-vitest","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-08-05-azure-pipelines-meet-vitest/index.md","source":"@site/blog/2023-08-05-azure-pipelines-meet-vitest/index.md","title":"Azure Pipelines meet Vitest","description":"This post details how to integrate the test runner Vitest with Azure Pipelines.","date":"2023-08-05T00:00:00.000Z","tags":[{"inline":false,"label":"Azure Pipelines","permalink":"/tags/azure-pipelines","description":"The Azure Pipelines CI / CD service."},{"inline":false,"label":"Automated Testing","permalink":"/tags/automated-testing","description":"How to perform the automation of tests."}],"readingTime":2.93,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"azure-pipelines-meet-vitest","title":"Azure Pipelines meet Vitest","authors":"johnnyreilly","image":"./title-image.png","tags":["azure pipelines","automated testing"],"description":"This post details how to integrate the test runner Vitest with Azure Pipelines.","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Azure Open AI: handling capacity and quota limits with Bicep","permalink":"/azure-open-ai-capacity-quota-bicep"},"nextItem":{"title":"Azure Container Apps, Bicep, bring your own certificates and custom domains","permalink":"/azure-container-apps-bicep-bring-your-own-certificates-custom-domains"}}')},63167:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/title-image-29f5f663eb5da2a98325dc6ad5967e95.png"},73862:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/test-results-af22126afcf8abe740b04d2878c16418.webp"},88981:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var s=i(35483),n=i(74848),l=i(28453);const r={slug:"azure-pipelines-meet-vitest",title:"Azure Pipelines meet Vitest",authors:"johnnyreilly",image:"./title-image.png",tags:["azure pipelines","automated testing"],description:"This post details how to integrate the test runner Vitest with Azure Pipelines.",hide_table_of_contents:!1},a=void 0,o={image:i(13225).A,authorsImageUrls:[void 0]},p=[{value:"Tests run as part of our pipeline",id:"tests-run-as-part-of-our-pipeline",level:2},{value:"Report test results in Azure Pipelines UI",id:"report-test-results-in-azure-pipelines-ui",level:2},{value:"Putting it all together",id:"putting-it-all-together",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["This post explains how to integrate the tremendous test runner ",(0,n.jsx)(t.a,{href:"https://vitest.dev/",children:"Vitest"})," with the continuous integration platform ",(0,n.jsx)(t.a,{href:"https://azure.microsoft.com/en-gb/products/devops/pipelines/",children:"Azure Pipelines"}),". If you read ",(0,n.jsx)(t.a,{href:"/azure-pipelines-meet-jest",children:"the post on integrating with Jest"}),", you'll recognise a lot of common ground with this. Once again we want:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Tests run as part of our pipeline"}),"\n",(0,n.jsx)(t.li,{children:"A failing test fails the build"}),"\n",(0,n.jsx)(t.li,{children:"Test results reported in Azure Pipelines UI"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"title image reading &quot;Azure Pipelines meet Vitest&quot; with the Pipelines and Vitest logos",src:i(63167).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,n.jsx)(t.p,{children:"This post assumes we have a Vitest project set up and an Azure Pipeline in place. Let's get started."}),"\n",(0,n.jsx)(t.h2,{id:"tests-run-as-part-of-our-pipeline",children:"Tests run as part of our pipeline"}),"\n",(0,n.jsxs)(t.p,{children:["First of all, lets get the tests running. We'll crack open our ",(0,n.jsx)(t.code,{children:"azure-pipelines.yml"})," file and, in the appropriate place add the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yml",children:"- bash: npm run test:ci\n  displayName: 'npm test'\n  workingDirectory: src/client-app\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The above will, when run, trigger a ",(0,n.jsx)(t.code,{children:"npm run test:ci"})," in the ",(0,n.jsx)(t.code,{children:"src/client-app"})," folder of the project (it's here where the app lives). What does ",(0,n.jsx)(t.code,{children:"test:ci"})," do? Well, it's a script in the ",(0,n.jsx)(t.code,{children:"package.json"})," that looks like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'"test": "vitest",\n"test:ci": "vitest run --reporter=default --reporter=junit --outputFile=reports/junit.xml",\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You'll note above we've got 2 scripts; ",(0,n.jsx)(t.code,{children:"test"})," and ",(0,n.jsx)(t.code,{children:"test:ci"}),". The former is the default script that Vitest will run when you run ",(0,n.jsx)(t.code,{children:"npm test"}),". The latter is the script that we'll use in our pipeline. The difference between the two is that the ",(0,n.jsx)(t.code,{children:"test:ci"})," script will:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Doesn't run in watch mode"}),"\n",(0,n.jsx)(t.li,{children:"Fail the build if any tests fail"}),"\n",(0,n.jsx)(t.li,{children:"Produce a JUnit XML report which details test results. This is the format that Azure Pipelines can use to ingest test results."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The test results are written to ",(0,n.jsx)(t.code,{children:"reports/junit.xml"})," which is a path relative to the ",(0,n.jsx)(t.code,{children:"src/client-app"})," folder. Because you may test this locally, it's probably worth adding the ",(0,n.jsx)(t.code,{children:"reports"})," folder to your ",(0,n.jsx)(t.code,{children:".gitignore"})," file to avoid it accidentally being committed."]}),"\n",(0,n.jsx)(t.h2,{id:"report-test-results-in-azure-pipelines-ui",children:"Report test results in Azure Pipelines UI"}),"\n",(0,n.jsxs)(t.p,{children:["Our tests are running, but we're not seeing the results in the Azure Pipelines UI. For that we need the ",(0,n.jsxs)(t.a,{href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/publish-test-results-v2",children:[(0,n.jsx)(t.code,{children:"PublishTestResults"})," task"]}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["We need to add a new step to our ",(0,n.jsx)(t.code,{children:"azure-pipelines.yml"})," file ",(0,n.jsx)(t.em,{children:"after"})," our ",(0,n.jsx)(t.code,{children:"npm run test:ci"})," step:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yml",children:"- task: PublishTestResults@2\n  displayName: 'supply npm test results to pipelines'\n  condition: succeededOrFailed() # because otherwise we won't know what tests failed\n  inputs:\n    testResultsFiles: 'src/client-app/reports/junit.xml'\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This will read the test results from our ",(0,n.jsx)(t.code,{children:"src/client-app/reports/junit.xml"})," file and pump them into Pipelines. Do note that we're ",(0,n.jsx)(t.em,{children:"always"})," running this step; so if the previous step failed (as it would in the case of a failing test) we still pump out the details of what that failure was."]}),"\n",(0,n.jsx)(t.p,{children:"And that's it! Azure Pipelines and Vitest integrated."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"screenshot of test results published to Azure Pipelines",src:i(73862).A+"",width:"2996",height:"1084",loading:"lazy"})}),"\n",(0,n.jsx)(t.h2,{id:"putting-it-all-together",children:"Putting it all together"}),"\n",(0,n.jsxs)(t.p,{children:["The complete ",(0,n.jsx)(t.code,{children:"azure-pipelines.yml"})," additions look like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yml",children:"- bash: npm run test:ci\n  displayName: 'npm test'\n  workingDirectory: src/client-app\n\n- task: PublishTestResults@2\n  displayName: 'supply npm test results to pipelines'\n  condition: succeededOrFailed() # because otherwise we won't know what tests failed\n  inputs:\n    testResultsFiles: 'src/client-app/reports/junit.xml'\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Please note, there's nothing special about the ",(0,n.jsx)(t.code,{children:"reports/junit.xml"})," file. You can change the name of the file and/or the location of the file. Just make sure you update the ",(0,n.jsx)(t.code,{children:"testResultsFiles"})," value in the ",(0,n.jsx)(t.code,{children:"PublishTestResults"})," task to match."]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);