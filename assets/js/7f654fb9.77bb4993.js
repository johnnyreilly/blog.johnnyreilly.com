"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["75536"],{69522:function(e,r,n){n.r(r),n.d(r,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return s},metadata:function(){return t},toc:function(){return c}});var t=n(97949),o=n(85893),i=n(50065);let s={slug:"my-unrequited-love-for-isolate-scope",title:"My Unrequited Love for Isolate Scope",authors:"johnnyreilly",tags:["angularjs","typescript","javascript"],hide_table_of_contents:!1,description:"A new version of the serverError directive is presented without isolated scope after discovering directives can only create one isolated scope."},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"A New Hope",id:"a-new-hope",level:2},{value:"serverError.ts",id:"servererrorts",level:3},{value:"serverError.js",id:"servererrorjs",level:3},{value:"My Plea",id:"my-plea",level:2}];function d(e){let r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"/angularjs-meet-aspnet-server-validation",children:"I wrote a little while ago about creating a directive to present server errors on the screen in an Angular application"}),". In my own (not so humble opinion), it was really quite nice. I was particularly proud of my usage of isolate scope. However, pride comes before a fall."]}),"\n",(0,o.jsx)(r.p,{children:"It turns out that using isolate scope in a directive is not always wise. Or rather \u2013 not always possible. And this is why:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'Error: [$compile:multidir] Multiple directives [datepickerPopup, serverError] asking for new/isolated scope on: <input name="sage.dateOfBirth" class="col-xs-12 col-sm-9" type="text" value="" ng-click="vm.dateOfBirthDatePickerOpen()" server-error="vm.errors" ng-model="vm.sage.dateOfBirth" is-open="vm.dateOfBirthDatePickerIsOpen" datepicker-popup="dd MMM yyyy">\n'})}),"\n",(0,o.jsxs)(r.p,{children:["Ug. What happened here? Well, I had a date field that I was using my serverError directive on. Nothing too controversial there. The problem came when I tried to plug in ",(0,o.jsx)(r.a,{href:"http://angular-ui.github.io/bootstrap/",children:"UI Bootstrap\u2019s datepicker"})," as well. That\u2019s right the directives are fighting. Sad face."]}),"\n",(0,o.jsx)(r.p,{children:"To be more precise, it turns out that only one directive on an element is allowed to create an isolated scope. So if I want to use UI Bootstrap\u2019s datepicker (and I do) \u2013 well my serverError directive is toast."}),"\n",(0,o.jsx)(r.h2,{id:"a-new-hope",children:"A New Hope"}),"\n",(0,o.jsx)(r.p,{children:"So ladies and gentlemen, let me present serverError 2.0 \u2013 this time without isolated scope:"}),"\n",(0,o.jsx)(r.h3,{id:"servererrorts",children:"serverError.ts"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"(function () {\n  'use strict';\n\n  var app = angular.module('app');\n\n  // Plant a validation message to the right of the element when it is declared invalid by the server\n  app.directive('serverError', [\n    function () {\n      // Usage:\n      // <input class=\"col-xs-12 col-sm-9\"\n      //        name=\"sage.name\" ng-model=\"vm.sage.name\" server-error=\"vm.errors\" />\n\n      var directive = {\n        link: link,\n        restrict: 'A',\n        require: 'ngModel', // supply the ngModel controller as the 4th parameter in the link function\n      };\n      return directive;\n\n      function link(\n        scope: ng.IScope,\n        element: ng.IAugmentedJQuery,\n        attrs: ng.IAttributes,\n        ngModelController: ng.INgModelController,\n      ) {\n        // Extract values from attributes (deliberately not using isolated scope)\n        var errorKey: string = attrs['name']; // eg \"sage.name\"\n        var errorDictionaryExpression: string = attrs['serverError']; // eg \"vm.errors\"\n\n        // Bootstrap alert template for error\n        var template =\n          '<div class=\"alert alert-danger col-xs-9 col-xs-offset-2\" role=\"alert\"><i class=\"glyphicon glyphicon-warning-sign larger\"></i> %error%</div>';\n\n        // Create an element to hold the validation message\n        var decorator = angular.element('<div></div>');\n        element.after(decorator);\n\n        // Watch ngModelController.$error.server & show/hide validation accordingly\n        scope.$watch(\n          safeWatch(() => ngModelController.$error.server),\n          showHideValidation,\n        );\n\n        function showHideValidation(serverError: boolean) {\n          // Display an error if serverError is true otherwise clear the element\n          var errorHtml = '';\n          if (serverError) {\n            var errorDictionary: { [field: string]: string } = scope.$eval(\n              errorDictionaryExpression,\n            );\n            errorHtml = template.replace(\n              /%error%/,\n              errorDictionary[errorKey] || 'Unknown error occurred...',\n            );\n          }\n          decorator.html(errorHtml);\n        }\n\n        // wipe the server error message upon keyup or change events so can revalidate with server\n        element.on('keyup change', (event) => {\n          scope.$apply(() => {\n            ngModelController.$setValidity('server', true);\n          });\n        });\n      }\n    },\n  ]);\n\n  // Thanks @Basarat! http://stackoverflow.com/a/24863256/761388\n  function safeWatch<T extends Function>(expression: T) {\n    return () => {\n      try {\n        return expression();\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n})();\n"})}),"\n",(0,o.jsx)(r.h3,{id:"servererrorjs",children:"serverError.js"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:"(function () {\n  'use strict';\n\n  var app = angular.module('app');\n\n  // Plant a validation message to the right of the element when it is declared invalid by the server\n  app.directive('serverError', [\n    function () {\n      // Usage:\n      // <input class=\"col-xs-12 col-sm-9\"\n      //        name=\"sage.name\" ng-model=\"vm.sage.name\" server-error=\"vm.errors\" />\n      var directive = {\n        link: link,\n        restrict: 'A',\n        require: 'ngModel',\n      };\n      return directive;\n\n      function link(scope, element, attrs, ngModelController) {\n        // Extract values from attributes (deliberately not using isolated scope)\n        var errorKey = attrs['name'];\n        var errorDictionaryExpression = attrs['serverError'];\n\n        // Bootstrap alert template for error\n        var template =\n          '<div class=\"alert alert-danger col-xs-9 col-xs-offset-2\" role=\"alert\"><i class=\"glyphicon glyphicon-warning-sign larger\"></i> %error%</div>';\n\n        // Create an element to hold the validation message\n        var decorator = angular.element('<div></div>');\n        element.after(decorator);\n\n        // Watch ngModelController.$error.server & show/hide validation accordingly\n        scope.$watch(\n          safeWatch(function () {\n            return ngModelController.$error.server;\n          }),\n          showHideValidation,\n        );\n\n        function showHideValidation(serverError) {\n          // Display an error if serverError is true otherwise clear the element\n          var errorHtml = '';\n          if (serverError) {\n            var errorDictionary = scope.$eval(errorDictionaryExpression);\n            errorHtml = template.replace(\n              /%error%/,\n              errorDictionary[errorKey] || 'Unknown error occurred...',\n            );\n          }\n          decorator.html(errorHtml);\n        }\n\n        // wipe the server error message upon keyup or change events so can revalidate with server\n        element.on('keyup change', function (event) {\n          scope.$apply(function () {\n            ngModelController.$setValidity('server', true);\n          });\n        });\n      }\n    },\n  ]);\n\n  // Thanks @Basarat! http://stackoverflow.com/a/24863256/761388\n  function safeWatch(expression) {\n    return function () {\n      try {\n        return expression();\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n})();\n"})}),"\n",(0,o.jsx)(r.p,{children:"This version of the serverError directive is from a users perspective identical to the previous version. But it doesn\u2019t use isolated scope \u2013 this means it can be used in concert with other directives which do."}),"\n",(0,o.jsxs)(r.p,{children:["It works by pulling the ",(0,o.jsx)(r.code,{children:"name"})," and ",(0,o.jsx)(r.code,{children:"serverError"})," values off the attrs parameter. ",(0,o.jsx)(r.code,{children:"name"})," is just a string - the value of which never changes so it can be used as is. ",(0,o.jsx)(r.code,{children:"serverError"})," is an expression that represents the error dictionary that is used to store the server error messages. This is accessed through use of ",(0,o.jsx)(r.code,{children:"scope.$eval"})," as an when it needs to."]}),"\n",(0,o.jsx)(r.h2,{id:"my-plea",children:"My Plea"}),"\n",(0,o.jsxs)(r.p,{children:["What I\u2019ve outlined here works. I\u2019ll admit that usage of ",(0,o.jsx)(r.code,{children:"$eval"})," makes me feel a little bit dirty (I\u2019ve got ",(0,o.jsx)(r.a,{href:"http://www.jslint.com/lint.html#evil",children:"\u201Ceval is evil\u201D"})," running through my head). Whilst it works, I\u2019m not sure what I\u2019ve done is necessarily best practice. After all ",(0,o.jsx)(r.a,{href:"https://docs.angularjs.org/guide/directive",children:"the Angular docs themselves say"}),":"]}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"*Best Practice:"})," Use the scope option to create isolate scopes when making components that you want to reuse throughout your app. *"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"But as we\u2019ve seen this isn\u2019t always an option. I\u2019ve written this post to document my own particular struggle and ask the question \u201Cis there a better way?\u201D If you know then please tell me!"})]})}function p(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,r,n){n.d(r,{Z:function(){return a},a:function(){return s}});var t=n(67294);let o={},i=t.createContext(o);function s(e){let r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}},97949:function(e){e.exports=JSON.parse('{"permalink":"/my-unrequited-love-for-isolate-scope","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-08-12-my-unrequited-love-for-isolate-scope/index.md","source":"@site/blog/2014-08-12-my-unrequited-love-for-isolate-scope/index.md","title":"My Unrequited Love for Isolate Scope","description":"A new version of the serverError directive is presented without isolated scope after discovering directives can only create one isolated scope.","date":"2014-08-12T00:00:00.000Z","tags":[{"inline":false,"label":"Angular JS","permalink":"/tags/angularjs","description":"The original Angular JS framework."},{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."},{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."}],"readingTime":4.515,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"my-unrequited-love-for-isolate-scope","title":"My Unrequited Love for Isolate Scope","authors":"johnnyreilly","tags":["angularjs","typescript","javascript"],"hide_table_of_contents":false,"description":"A new version of the serverError directive is presented without isolated scope after discovering directives can only create one isolated scope."},"unlisted":false,"prevItem":{"title":"Running JavaScript Unit Tests in AppVeyor","permalink":"/running-javascript-unit-tests-in-appveyor"},"nextItem":{"title":"Getting more RESTful with Web API and IHttpActionResult","permalink":"/getting-more-RESTful-with-Web-API"}}')}}]);