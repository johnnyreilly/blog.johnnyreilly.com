"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["1010"],{18574:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return d}});var o=n(57264),a=n(85893),r=n(50065);let i={slug:"uploading-images-to-cloudinary-with-fetch",title:"Uploading Images to Cloudinary with the Fetch API",authors:"johnnyreilly",tags:["react"],hide_table_of_contents:!1,description:"Learn how to handle image uploads to Cloudinary using Fetch instead of SuperAgent with a sample code demonstrating the replacement of FormData."},l=void 0,s={authorsImageUrls:[void 0]},d=[];function c(e){let t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["I was recently checking out a ",(0,a.jsx)(t.a,{href:"https://css-tricks.com/image-upload-manipulation-react/",children:"very good post"})," which explained how to upload images using ",(0,a.jsx)(t.a,{href:"https://github.com/react-dropzone/react-dropzone",children:"React Dropzone"})," and ",(0,a.jsx)(t.a,{href:"https://github.com/visionmedia/superagent",children:"SuperAgent"})," to ",(0,a.jsx)(t.a,{href:"https://cloudinary.com/",children:"Cloudinary"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["It's a brilliant post; you should totally read it. Even if you hate images, uploads and JavaScript. However, there was one thing in there that I didn't want; SuperAgent. It's lovely but I'm a ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"Fetch"})," guy. That's just how I roll. The question is, how do I do the below using Fetch?"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"handleImageUpload(file) {\n    let upload = request.post(CLOUDINARY_UPLOAD_URL)\n                     .field('upload_preset', CLOUDINARY_UPLOAD_PRESET)\n                     .field('file', file);\n\n    upload.end((err, response) => {\n      if (err) {\n        console.error(err);\n      }\n\n      if (response.body.secure_url !== '') {\n        this.setState({\n          uploadedFileCloudinaryUrl: response.body.secure_url\n        });\n      }\n    });\n  }\n"})}),"\n",(0,a.jsx)(t.p,{children:"Well it actually took me longer to work out than I'd like to admit. But now I have, let me save you the bother. To do the above using Fetch you just need this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"handleImageUpload(file) {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET); // Replace the preset name with your own\n\n    fetch(CLOUDINARY_UPLOAD_URL, {\n      method: 'POST',\n      body: formData\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.secure_url !== '') {\n          this.setState({\n            uploadedFileCloudinaryUrl: data.secure_url\n          });\n        }\n      })\n      .catch(err => console.error(err))\n  }\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To get a pre-canned project to try this with take a look at ",(0,a.jsx)(t.a,{href:"https://github.com/damonbauer/react-cloudinary",children:"Damon's repo"}),"."]})]})}function u(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return i}});var o=n(67294);let a={},r=o.createContext(a);function i(e){let t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},57264:function(e){e.exports=JSON.parse('{"permalink":"/uploading-images-to-cloudinary-with-fetch","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-03-25-uploading-images-to-cloudinary-with-fetch/index.md","source":"@site/blog/2018-03-25-uploading-images-to-cloudinary-with-fetch/index.md","title":"Uploading Images to Cloudinary with the Fetch API","description":"Learn how to handle image uploads to Cloudinary using Fetch instead of SuperAgent with a sample code demonstrating the replacement of FormData.","date":"2018-03-25T00:00:00.000Z","tags":[{"inline":false,"label":"React","permalink":"/tags/react","description":"The React library."}],"readingTime":1.03,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"uploading-images-to-cloudinary-with-fetch","title":"Uploading Images to Cloudinary with the Fetch API","authors":"johnnyreilly","tags":["react"],"hide_table_of_contents":false,"description":"Learn how to handle image uploads to Cloudinary using Fetch instead of SuperAgent with a sample code demonstrating the replacement of FormData."},"unlisted":false,"prevItem":{"title":"It\'s Not Dead 2: mobx-react-devtools and the undead","permalink":"/its-not-dead-2-mobx-react-devtools-and-the-undead"},"nextItem":{"title":"It\'s Not Dead: webpack and dead code elimination limitations","permalink":"/its-not-dead-webpack-and-dead-code"}}')}}]);