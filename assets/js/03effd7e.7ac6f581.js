"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[40467],{43245:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(74848),o=n(28453);const i={slug:"using-kernel-memory-to-chunk-documents-into-azure-ai-search",title:"Using Kernel Memory to Chunk Documents into Azure AI Search",authors:"johnnyreilly",image:"./title-image.png",tags:["azure","c#","asp.net","ai"],description:"To build RAG (Retrieval Augmented Generation) experiences, where LLMs can query documents, you need a strategy to chunk those documents. Kernel Memory supports this.",hide_table_of_contents:!1},a=void 0,s={permalink:"/using-kernel-memory-to-chunk-documents-into-azure-ai-search",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-04-21-using-kernel-memory-to-chunk-documents-into-azure-ai-search/index.md",source:"@site/blog/2024-04-21-using-kernel-memory-to-chunk-documents-into-azure-ai-search/index.md",title:"Using Kernel Memory to Chunk Documents into Azure AI Search",description:"To build RAG (Retrieval Augmented Generation) experiences, where LLMs can query documents, you need a strategy to chunk those documents. Kernel Memory supports this.",date:"2024-04-21T00:00:00.000Z",tags:[{label:"azure",permalink:"/tags/azure"},{label:"c#",permalink:"/tags/c"},{label:"asp.net",permalink:"/tags/asp-net"},{label:"ai",permalink:"/tags/ai"}],readingTime:16.155,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"using-kernel-memory-to-chunk-documents-into-azure-ai-search",title:"Using Kernel Memory to Chunk Documents into Azure AI Search",authors:"johnnyreilly",image:"./title-image.png",tags:["azure","c#","asp.net","ai"],description:"To build RAG (Retrieval Augmented Generation) experiences, where LLMs can query documents, you need a strategy to chunk those documents. Kernel Memory supports this.",hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Large Language Models, Open API, View Models and the Backend for Frontend Pattern",permalink:"/large-language-models-view-models-backend-for-frontend"},nextItem:{title:"Overview of webpack, a JavaScript bundler",permalink:"/webpack-overview"}},c={image:n(19779).A,authorsImageUrls:[void 0]},l=[];function u(e){const t={a:"a",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["I've recently been working on building retrieval augmented generation (RAG) experiences into applications; building systems where large language models (LLMs) can query documents. To achieve this, we first need a strategy to chunk those documents and make them LLM-friendly. ",(0,r.jsx)(t.a,{href:"https://github.com/microsoft/kernel-memory",children:"Kernel Memory"}),", a sister project of ",(0,r.jsx)(t.a,{href:"https://github.com/microsoft/semantic-kernel",children:"Semantic Kernel"})," supports this."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"title image reading &quot;Using Kernel Memory to Chunk Documents into Azure AI Search&quot; with the Azure Open AI / Azure AI Search logos",src:n(12138).A+"",width:"800",height:"450",loading:"eager",fetchpriority:"high"})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},19779:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/title-image-337c58e5e55f92f59a1d1db49366ec04.png"},12138:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/title-image-337c58e5e55f92f59a1d1db49366ec04.png"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(96540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);