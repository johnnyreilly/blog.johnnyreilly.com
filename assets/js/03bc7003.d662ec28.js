"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["83664"],{14917:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l}});var i=n(17295),a=n(85893),r=n(50065);let o={slug:"typescript-webpack-alias-goodbye-relative-paths",title:"Using TypeScript and webpack alias: goodbye relative paths",authors:"johnnyreilly",tags:["webpack","typescript"],hide_table_of_contents:!1,description:"Use TypeScript with webpack alias to avoid long relative paths in imports. Try `path mapping` or `resolve.alias`. Use `tsconfig-paths-webpack-plugin`."},p=void 0,s={authorsImageUrls:[void 0]},l=[];function c(e){let t={code:"code",p:"p",...(0,r.a)(),...e.components};return(0,a.jsxs)(t.p,{children:["This post shows how you can use TypeScript with webpack ",(0,a.jsx)(t.code,{children:"alias"})," to move away from using relative paths in your ",(0,a.jsx)(t.code,{children:"import"})," statements."]})}function u(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return p},a:function(){return o}});var i=n(67294);let a={},r=i.createContext(a);function o(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},17295:function(e){e.exports=JSON.parse('{"permalink":"/typescript-webpack-alias-goodbye-relative-paths","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-08-21-typescript-webpack-alias-goodbye-relative-paths/index.md","source":"@site/blog/2018-08-21-typescript-webpack-alias-goodbye-relative-paths/index.md","title":"Using TypeScript and webpack alias: goodbye relative paths","description":"Use TypeScript with webpack alias to avoid long relative paths in imports. Try `path mapping` or `resolve.alias`. Use `tsconfig-paths-webpack-plugin`.","date":"2018-08-21T00:00:00.000Z","tags":[{"inline":false,"label":"webpack","permalink":"/tags/webpack","description":"The webpack module bundler."},{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."}],"readingTime":2.865,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"typescript-webpack-alias-goodbye-relative-paths","title":"Using TypeScript and webpack alias: goodbye relative paths","authors":"johnnyreilly","tags":["webpack","typescript"],"hide_table_of_contents":false,"description":"Use TypeScript with webpack alias to avoid long relative paths in imports. Try `path mapping` or `resolve.alias`. Use `tsconfig-paths-webpack-plugin`."},"unlisted":false,"prevItem":{"title":"Semantic Versioning and Definitely Typed","permalink":"/semantic-versioning-and-definitely-typed"},"nextItem":{"title":"Azure App Service: nested configuration for ASP.NET running in Web App for Containers using Application Settings","permalink":"/azure-app-service-web-app-containers-asp-net-nested-configuration"}}')}}]);