"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[17859],{76068:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=n(85893),s=n(11151);const r={slug:"typescript-eslint-no-unused-vars",title:"ESLint no-unused-vars: _ ignore prefix",authors:"johnnyreilly",tags:["typescript","javascript","ESLint"],image:"./title-image.png",description:"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _",hide_table_of_contents:!1},o=void 0,a={permalink:"/typescript-eslint-no-unused-vars",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-02-18-typescript-eslint-no-unused-vars/index.md",source:"@site/blog/2024-02-18-typescript-eslint-no-unused-vars/index.md",title:"ESLint no-unused-vars: _ ignore prefix",description:"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _",date:"2024-02-18T00:00:00.000Z",formattedDate:"February 18, 2024",tags:[{label:"typescript",permalink:"/tags/typescript"},{label:"javascript",permalink:"/tags/javascript"},{label:"ESLint",permalink:"/tags/es-lint"}],readingTime:5.225,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"typescript-eslint-no-unused-vars",title:"ESLint no-unused-vars: _ ignore prefix",authors:"johnnyreilly",tags:["typescript","javascript","ESLint"],image:"./title-image.png",description:"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _",hide_table_of_contents:!1},unlisted:!1,nextItem:{title:"Using Bun in Azure Pipelines",permalink:"/using-bun-in-azure-pipelines"}},c={image:n(86891).Z,authorsImageUrls:[void 0]},l=[];function d(e){const t={a:"a",code:"code",img:"img",p:"p",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["I'm a longtime user of TypeScripts ",(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/tsconfig#noUnusedLocals",children:(0,i.jsx)(t.code,{children:"noUnusedLocals"})})," and ",(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/tsconfig#noUnusedParameters",children:(0,i.jsx)(t.code,{children:"noUnusedParameters"})})," settings. I like to avoid leaving unused variables in my code; these compiler options help me do that."]}),"\n",(0,i.jsxs)(t.p,{children:["I use ESLint alongside TypeScript. The ",(0,i.jsx)(t.a,{href:"https://eslint.org/docs/latest/rules/no-unused-vars",children:(0,i.jsx)(t.code,{children:"no-unused-vars"})})," rule provides similar functionality to TypeScripts ",(0,i.jsx)(t.code,{children:"noUnusedLocals"})," and ",(0,i.jsx)(t.code,{children:"noUnusedParameters"})," settings, but has more power and more flexibility. For instance, ",(0,i.jsx)(t.code,{children:"no-unused-vars"})," can catch unused error variables; TypeScript's ",(0,i.jsx)(t.code,{children:"noUnusedLocals"})," and ",(0,i.jsx)(t.code,{children:"noUnusedParameters"})," cannot."]}),"\n",(0,i.jsxs)(t.p,{children:["One thing that I missed when switching to the ESLint option is that, with ",(0,i.jsx)(t.code,{children:"noUnusedLocals"})," and ",(0,i.jsx)(t.code,{children:"noUnusedParameters"}),", you can simply ignore unused variables by prefixing a variable with the ",(0,i.jsx)(t.code,{children:"_"})," character. That's right, sometimes I want to declare a variable that I know I'm not going to use, and I want to do that without getting shouted at by the linter."]}),"\n",(0,i.jsxs)(t.p,{children:["It turns out you can get ESLint to respect the TypeScript default of ignoring variables prefixed with ",(0,i.jsx)(t.code,{children:"_"}),"; ",(0,i.jsxs)(t.a,{href:"https://github.com/typescript-eslint/typescript-eslint/issues/8464#issuecomment-1943325441",children:["it's just not the default configuration for ",(0,i.jsx)(t.code,{children:"no-unused-vars"})]}),". But with a little configuration we can have it. This post is a quick guide to how to implement that configuration."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"title image reading &quot;From TypeScript noUnusedLocals and noUnusedParameters to ESLint no-unused-vars (with _ prefix)&quot; with the ESLint and TypeScript logo",src:n(44921).Z+"",width:"800",height:"450",loading:"eager",fetchpriority:"high"})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},86891:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/title-image-84e07ec452e3456b556977d64d3c682e.png"},44921:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/title-image-84e07ec452e3456b556977d64d3c682e.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var i=n(67294);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);