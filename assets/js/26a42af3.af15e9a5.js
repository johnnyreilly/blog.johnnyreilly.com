"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[87118],{77746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>o});var s=n(74848),r=n(28453);const l={slug:"nullable-reference-types-csharp-strictnullchecks",title:"Nullable reference types; CSharp's very own strictNullChecks",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"C# introduces nullable reference types similar to TypeScripts `strictNullChecks`. Enabling raises warnings and solves null reference risks."},i=void 0,c={permalink:"/nullable-reference-types-csharp-strictnullchecks",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-12-20-nullable-reference-types-csharp-strictnullchecks/index.md",source:"@site/blog/2020-12-20-nullable-reference-types-csharp-strictnullchecks/index.md",title:"Nullable reference types; CSharp's very own strictNullChecks",description:"C# introduces nullable reference types similar to TypeScripts `strictNullChecks`. Enabling raises warnings and solves null reference risks.",date:"2020-12-20T00:00:00.000Z",tags:[{label:"c#",permalink:"/tags/c"}],readingTime:3.86,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"nullable-reference-types-csharp-strictnullchecks",title:"Nullable reference types; CSharp's very own strictNullChecks",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"C# introduces nullable reference types similar to TypeScripts `strictNullChecks`. Enabling raises warnings and solves null reference risks."},unlisted:!1,prevItem:{title:"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect",permalink:"/how-to-make-azure-ad-403"},nextItem:{title:"azure-pipelines-task-lib and isOutput setVariable",permalink:"/azure-pipelines-task-lib-and-isoutput-setvariable"}},a={authorsImageUrls:[void 0]},o=[];function p(e){const t={a:"a",code:"code",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(t.p,{children:["'Tis the season to play with new compiler settings! I'm a very keen TypeScript user and have been merrily using ",(0,s.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks",children:(0,s.jsx)(t.code,{children:"strictNullChecks"})})," since it shipped. I was dimly aware that C# was also getting a similar feature by the name of ",(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/nullable-reference-types",children:"nullable reference types"}),"."]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(96540);const r={},l=s.createContext(r);function i(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);