"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[92864],{45572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=t(85893),o=t(11151);const s={slug:"using-reflection-to-identify-unwanted-dependencies",title:"Using Reflection to Identify Unwanted Dependencies",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"Learn how to identify unwelcome dependencies in complex web apps by walking a dependency tree using reflection-based tests."},d=void 0,r={permalink:"/using-reflection-to-identify-unwanted-dependencies",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-04-28-using-reflection-to-identify-unwanted-dependencies/index.md",source:"@site/blog/2018-04-28-using-reflection-to-identify-unwanted-dependencies/index.md",title:"Using Reflection to Identify Unwanted Dependencies",description:"Learn how to identify unwelcome dependencies in complex web apps by walking a dependency tree using reflection-based tests.",date:"2018-04-28T00:00:00.000Z",formattedDate:"April 28, 2018",tags:[{label:"asp.net",permalink:"/tags/asp-net"}],readingTime:2.545,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"using-reflection-to-identify-unwanted-dependencies",title:"Using Reflection to Identify Unwanted Dependencies",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"Learn how to identify unwelcome dependencies in complex web apps by walking a dependency tree using reflection-based tests."},unlisted:!1,prevItem:{title:"Compromising: A Guide for Developers",permalink:"/compromising-guide-for-developers"},nextItem:{title:"It's Not Dead 2: mobx-react-devtools and the undead",permalink:"/its-not-dead-2-mobx-react-devtools-and-the-undead"}},a={authorsImageUrls:[void 0]},l=[];function c(e){const n={p:"p",...(0,o.a)(),...e.components};return(0,i.jsx)(n.p,{children:"I having a web app which is fairly complex. It's made up of services, controllers and all sorts of things. So far, so unremarkable. However, I needed to ensure that the controllers did not attempt to access the database via any of their dependencies. Or their dependencies, dependencies. Or their dependencies. You get my point."})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>d});var i=t(67294);const o={},s=i.createContext(o);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);