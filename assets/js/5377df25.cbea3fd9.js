"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["558"],{49411:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var s=t(77975),i=t(85893),o=t(50065);let a={slug:"using-expressions-with-constructors",title:"Using Expressions with Constructors",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"This article explains how John used LINQs expression to extend a validation class and automatically change the property name."},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"So what&#39;s the problem?",id:"so-whats-the-problem",level:2},{value:"So what&#39;s the solution?",id:"so-whats-the-solution",level:2}];function d(e){let n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Every now and then you think \"x should be easy\" - and it isn't. I had one of those situations this morning. Something I thought would take 5 minutes had me still pondering 30 minutes later. I finally cracked it (with the help of a colleague - thanks Marc!) and I wanted to note down what I did since I'm sure to forget this."}),"\n",(0,i.jsx)(n.h2,{id:"so-whats-the-problem",children:"So what's the problem?"}),"\n",(0,i.jsx)(n.p,{children:"In our project we had a very simple validation class. It looked a bit like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"    public class FieldValidation\n    {\n        public FieldValidation(string fieldName, string message)\n        {\n            FieldName = fieldName;\n            Message = message;\n        }\n\n        public string FieldName { get; set; }\n        public string Message { get; set; }\n    }\n"})}),"\n",(0,i.jsx)(n.p,{children:"I wanted to take this class and extend it to have a constructor which allowed me to specify a Type and subsequently an Expression of that Type that allowed me to specify a property. 10 points if you read the last sentence and understood it without reading it a second time."}),"\n",(0,i.jsx)(n.p,{children:"Code is a better illustration; take a look below. I wanted to go from #1 to #2:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'//#1 Specify field name up front - how we currently use this\nvar oldSchoolValidation = new FieldValidation(\n  "WithAProperty", "Message of some kind...");\n\n//#2 Field name driven directly by property - how we want to use this\nvar newSchoolValidation = new FieldValidation<AnObject>(\n  x => x.WithAProperty, "Message of some kind...");\n\n/// <summary>\n/// Example class for demo\n/// </summary>\npublic class AnObject\n{\n  public bool WithAProperty { get; set; }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:['"Why?" I hear you ask. Well we had a swathe of statements in the code which test each property for a problem and would create a ',(0,i.jsx)(n.code,{children:"FieldValidation"})," with the very same property name if one was found. There's no real problem with that but I'm a man that likes to refactor. Property names change and I didn't want to have to remember to manually go through each ",(0,i.jsx)(n.code,{children:"FieldValidation"})," keeping these in line. If I was using the actual property name to drive the creation of my ",(0,i.jsx)(n.code,{children:"FieldValidations"})," then that problem disappears. And I like that."]}),"\n",(0,i.jsx)(n.h2,{id:"so-whats-the-solution",children:"So what's the solution?"}),"\n",(0,i.jsx)(n.p,{children:"Well it's this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'    public class FieldValidation\n    {\n        public FieldValidation(string fieldName, string message)\n        {\n            FieldName = fieldName;\n            Message = message;\n        }\n\n        public string FieldName { get; set; }\n        public string Message { get; set; }\n    }\n\n    public class FieldValidation<T> : FieldValidation where T : class\n    {\n        public FieldValidation(\n            Expression<Func<T, object>> expression,\n            string message)\n        {\n            //Will work for reference types\n            var body = expression.Body as MemberExpression;\n\n            if (body == null)\n            {\n                //Will work for value types\n                var uBody = (UnaryExpression)expression.Body;\n                body = uBody.Operand as MemberExpression;\n            }\n\n\n            if (body == null)\n                throw new ArgumentException("Invalid property expression");\n\n            FieldName = body.Member.Name;\n            Message = message;\n        }\n    }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see we have taken the original FieldValidation class and added in a generic constructor which instead of taking ",(0,i.jsx)(n.code,{children:"string fieldName"})," as a first argument it takes ",(0,i.jsx)(n.code,{children:"Expression&lt;Func&lt;T, object&gt;&gt; expression"}),". LINQ's Expression magic is used to determine the supplied property name which is smashing. If you were wondering, the first ",(0,i.jsx)(n.code,{children:"MemberExpression"})," code is used for ",(0,i.jsx)(n.em,{children:"reference"})," types. The ",(0,i.jsx)(n.code,{children:"UnaryExpression"})," wrapping a ",(0,i.jsx)(n.code,{children:"MemberExpression"})," code is used for ",(0,i.jsx)(n.em,{children:"value"})," types. A good explanation of this can be found ",(0,i.jsx)(n.a,{href:"http://stackoverflow.com/a/12975480/761388",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["My colleague directed me to ",(0,i.jsx)(n.a,{href:"http://stackoverflow.com/a/2916344",children:"this crucial StackOverflow answer"})," which provided some much needed direction when I was thrashing. And that's it; we're done, home free."]})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var s=t(67294);let i={},o=s.createContext(i);function a(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},77975:function(e){e.exports=JSON.parse('{"permalink":"/using-expressions-with-constructors","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2013-02-13-using-expressions-with-constructors/index.md","source":"@site/blog/2013-02-13-using-expressions-with-constructors/index.md","title":"Using Expressions with Constructors","description":"This article explains how John used LINQs expression to extend a validation class and automatically change the property name.","date":"2013-02-13T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":2.835,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"using-expressions-with-constructors","title":"Using Expressions with Constructors","authors":"johnnyreilly","tags":["asp.net"],"hide_table_of_contents":false,"description":"This article explains how John used LINQs expression to extend a validation class and automatically change the property name."},"unlisted":false,"prevItem":{"title":"Unit testing MVC controllers / Mocking UrlHelper","permalink":"/unit-testing-mvc-controllers-mocking"},"nextItem":{"title":"Twitter.Bootstrap.MVC4 meet Bootstrap Datepicker *and* get your Internationalization on...","permalink":"/twitterbootstrapmvc4-meet-bootstrap_14"}}')}}]);