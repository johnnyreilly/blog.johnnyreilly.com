"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[90702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,f=u["".concat(p,".").concat(d)]||u[d]||y[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});n(67294);var r=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={slug:"setting-build-version-using-appveyor",title:"Setting Build Version Using AppVeyor and ASP.Net Core",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell."},p=void 0,s={permalink:"/setting-build-version-using-appveyor",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2017-04-25-setting-build-version-using-appveyor/index.md",source:"@site/blog/2017-04-25-setting-build-version-using-appveyor/index.md",title:"Setting Build Version Using AppVeyor and ASP.Net Core",description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell.",date:"2017-04-25T00:00:00.000Z",formattedDate:"April 25, 2017",tags:[{label:"asp.net",permalink:"/tags/asp-net"}],readingTime:1.03,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"setting-build-version-using-appveyor",title:"Setting Build Version Using AppVeyor and ASP.Net Core",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"AppVeyor doesnt have support for setting version of a binary in dot net core, but it can be done easily through PowerShell."},prevItem:{title:"TypeScript: Spare the Rod, Spoil the Code",permalink:"/typescript-spare-rod-spoil-code"},nextItem:{title:"I'm looking for work!",permalink:"/im-looking-for-work"}},c={authorsImageUrls:[void 0]},u=[],y={toc:u};function d(e){var{components:t}=e,n=a(e,["components"]);return(0,r.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},y,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"AppVeyor has ",(0,r.kt)("a",{parentName:"p",href:"https://www.appveyor.com/docs/build-configuration/#assemblyinfo-patching"},"support for setting the version of a binary during a build"),". However - this deals with the classic ASP.Net world of ",(0,r.kt)("inlineCode",{parentName:"p"},"AssemblyInfo"),". I didn't find any reference to support for doing the same with dot net core. Remember, dot net core ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json-to-csproj#version"},"relies upon a ",(0,r.kt)("inlineCode",{parentName:"a"},"&lt;Version&gt;")," or a ",(0,r.kt)("inlineCode",{parentName:"a"},"&lt;VersionPrefix&gt;")," setting in the ",(0,r.kt)("inlineCode",{parentName:"a"},".csproj")," file"),". Personally, ",(0,r.kt)("inlineCode",{parentName:"p"},"&lt;Version&gt;")," is my jam."),(0,r.kt)("p",null,"However, coming up with your own bit of powershell that stamps the version during the build is a doddle; here we go:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ps"},'Param($projectFile, $buildNum)\n\n$content = [IO.File]::ReadAllText($projectFile)\n\n$regex = new-object System.Text.RegularExpressions.Regex (\'(<version>)([\\d]+.[\\d]+.[\\d]+)(.[\\d]+)(<\\/Version>)\',\n         [System.Text.RegularExpressions.RegexOptions]::MultiLine)\n\n$version = $null\n$match = $regex.Match($content)\nif($match.Success) {\n    # from "<version>1.0.0.0</version>" this will extract "1.0.0"\n    $version = $match.groups[2].value\n}\n\n# suffix build number onto $version. eg "1.0.0.15"\n$version = "$version.$buildNum"\n\n# update "<version>1.0.0.0</version>" to "<version>$version</version>"\n$content = $regex.Replace($content, \'${1}\' + $version + \'${4}\')\n\n# update csproj file\n[IO.File]::WriteAllText($projectFile, $content)\n\n# update AppVeyor build\nUpdate-AppveyorBuild -Version $version\n</version>\n')),(0,r.kt)("p",null,"You can invoke this script as part of the build process in AppVeyor by adding something like this to your ",(0,r.kt)("inlineCode",{parentName:"p"},"appveyor.yml"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"before_build:\n  - ps: .\\ModifyVersion.ps1 $env:APPVEYOR_BUILD_FOLDER\\src\\Proverb.Web\\Proverb.Web.csproj $env:APPVEYOR_BUILD_NUMBER\n")),(0,r.kt)("p",null,"It will keep the first 3 parts of the version in your ",(0,r.kt)("inlineCode",{parentName:"p"},".csproj"),' (eg "1.0.0") and suffix on the build number supplied by AppVeyor.'))}d.isMDXComponent=!0}}]);