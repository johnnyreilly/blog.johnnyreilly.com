"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["54533"],{63431:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return a},metadata:function(){return r},toc:function(){return c}});var r=n(28131),i=n(85893),s=n(50065);let a={slug:"create-es2015-map-from-array-in-typescript",title:"Creating an ES2015 Map from an Array in TypeScript",authors:"johnnyreilly",tags:["typescript","javascript"],hide_table_of_contents:!1,description:"TypeScript `Map` initialization from an `Array` is discussed with a workaround using a type assertion of ` as [string, string]`."},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"This Doesn&#39;t Work",id:"this-doesnt-work",level:2},{value:"This Does",id:"this-does",level:2}];function p(e){let t={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["I'm a great lover of ES2015's ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:(0,i.jsx)(t.code,{children:"Map"})}),". However, just recently I tumbled over something I find a touch inconvenient about how you initialise a new ",(0,i.jsx)(t.code,{children:"Map"})," from the contents of an ",(0,i.jsx)(t.code,{children:"Array"})," in TypeScript."]}),"\n",(0,i.jsx)(t.h2,{id:"this-doesnt-work",children:"This Doesn't Work"}),"\n",(0,i.jsx)(t.p,{children:"We're going try to something like this: (pilfered from the MDN docs)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"var kvArray = [\n  ['key1', 'value1'],\n  ['key2', 'value2'],\n];\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nvar myMap = new Map(kvArray);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Simple enough right? Well I'd rather assumed that I should be able to do something like this in TypeScript:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'const iAmAnArray [\n  { value: "value1", text: "hello" }\n  { value: "value2", text: "map" }\n];\n\nconst iAmAMap = new Map<string, string>(\n  iAmAnArray.map(x => [x.value, x.text])\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"However, to my surprise this errored out with:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"[ts] Argument of type 'string[][]' is not assignable to parameter of type 'Iterable<[string, string]>'.\n  Types of property '[Symbol.iterator]' are incompatible.\n    Type '() => IterableIterator<string[]>' is not assignable to type '() => Iterator<[string, string]>'.\n      Type 'IterableIterator<string[]>' is not assignable to type 'Iterator<[string, string]>'.\n        Types of property 'next' are incompatible.\n          Type '(value?: any) => IteratorResult<string[]>' is not assignable to type '(value?: any) => IteratorResult<[string, string]>'.\n            Type 'IteratorResult<string[]>' is not assignable to type 'IteratorResult<[string, string]>'.\n              Type 'string[]' is not assignable to type '[string, string]'.\n                Property '0' is missing in type 'string[]'.\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Disappointing right? It's expecting ",(0,i.jsx)(t.code,{children:"Iterable&lt;[string, string]&gt;"})," and an ",(0,i.jsx)(t.code,{children:"Array"})," with 2 elements that are strings is ",(0,i.jsx)(t.em,{children:"not"})," inferred to be that."]}),"\n",(0,i.jsx)(t.h2,{id:"this-does",children:"This Does"}),"\n",(0,i.jsxs)(t.p,{children:["It emerges that there is a way to do this though; you just need to give the compiler a clue. You need to include a type assertion of ",(0,i.jsx)(t.code,{children:" as [string, string]"})," which tells the compiler that what you've just declared is a ",(0,i.jsx)(t.code,{children:"Tuple"})," of ",(0,i.jsx)(t.code,{children:"string"})," and ",(0,i.jsx)(t.code,{children:"string"}),". (Please note that ",(0,i.jsx)(t.code,{children:"[string, string]"})," corresponds to the types of the ",(0,i.jsx)(t.code,{children:"Key"})," and ",(0,i.jsx)(t.code,{children:"Value"})," of your ",(0,i.jsx)(t.code,{children:"Map"})," and should be set accordingly.)"]}),"\n",(0,i.jsx)(t.p,{children:"So a working version of the code looks like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'const iAmAnArray [\n  { value: "value1", text: "hello" }\n  { value: "value2", text: "map" }\n];\n\nconst iAmAMap = new Map<string, string>(\n  iAmAnArray.map(x => [x.value, x.text] as [string, string])\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"Or, to be terser, this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'const iAmAnArray [\n  { value: "value1", text: "hello" }\n  { value: "value2", text: "map" }\n];\n\nconst iAmAMap = new Map( // Look Ma!  No type annotations\n  iAmAnArray.map(x => [x.value, x.text] as [string, string])\n);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["I've raised this as an issue with the TypeScript team; you can find details ",(0,i.jsx)(t.a,{href:"https://github.com/Microsoft/TypeScript/issues/8936",children:"here"}),"."]})]})}function d(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return a}});var r=n(67294);let i={},s=r.createContext(i);function a(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}},28131:function(e){e.exports=JSON.parse('{"permalink":"/create-es2015-map-from-array-in-typescript","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-06-02-create-es2015-map-from-array-in-typescript/index.md","source":"@site/blog/2016-06-02-create-es2015-map-from-array-in-typescript/index.md","title":"Creating an ES2015 Map from an Array in TypeScript","description":"TypeScript `Map` initialization from an `Array` is discussed with a workaround using a type assertion of ` as [string, string]`.","date":"2016-06-02T00:00:00.000Z","tags":[{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."},{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."}],"readingTime":2.105,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"create-es2015-map-from-array-in-typescript","title":"Creating an ES2015 Map from an Array in TypeScript","authors":"johnnyreilly","tags":["typescript","javascript"],"hide_table_of_contents":false,"description":"TypeScript `Map` initialization from an `Array` is discussed with a workaround using a type assertion of ` as [string, string]`."},"unlisted":false,"prevItem":{"title":"Understanding webpack\'s DefinePlugin (and using with TypeScript)","permalink":"/using-webpacks-defineplugin-with-typescript"},"nextItem":{"title":"The Mysterious Case of webpack, AngularJS and jQuery","permalink":"/the-mysterious-case-of-webpack-angular-and-jquery"}}')}}]);