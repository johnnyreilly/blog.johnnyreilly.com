"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[15814],{8215:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/title-image-cb268ba4b2458174c1b6f43e85ea82a3.png"},18338:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/title-image-cb268ba4b2458174c1b6f43e85ea82a3.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},30952:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>h});var s=t(48256),a=t(74848),r=t(28453);const i={slug:"swashbuckle-inheritance-multiple-return-types",title:"Swashbuckle & inheritance: Give. Me. The. Types",authors:"johnnyreilly",tags:["swagger","asp.net"],image:"./title-image.png",description:"For API endpoints that return multiple types, you can use inheritance with Swashbuckle to get create a Swagger / Open API definition; here is how.",hide_table_of_contents:!1},o=void 0,c={image:t(18338).A,authorsImageUrls:[void 0]},h=[{value:"Making a simple API",id:"making-a-simple-api",level:2},{value:"Multiple return types",id:"multiple-return-types",level:2},{value:"Serving up subtypes",id:"serving-up-subtypes",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"For API endpoints that return multiple types, you can use inheritance with Swashbuckle to get create a Swagger / Open API definition featuring the variety of available types. Serving all these types is not the default behaviour. This post shows you how to opt in."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"title image reading &quot;Swashbuckle and inheritance: Give. Me. The. Types&quot; with Sid Swashbuckle the Pirate and Open API logos",src:t(8215).A+"",width:"1600",height:"900",loading:"lazy"})}),"\n",(0,a.jsx)(n.h2,{id:"making-a-simple-api",children:"Making a simple API"}),"\n",(0,a.jsx)(n.p,{children:"The first thing we're going to need is an API, which we'll build with the .NET 6 SDK:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dotnet new webapi\ndotnet add package Swashbuckle.AspNetCore\n"})}),"\n",(0,a.jsxs)(n.p,{children:["When we run this with ",(0,a.jsx)(n.code,{children:"dotnet run"})," we find Swashbuckle living at ",(0,a.jsx)(n.a,{href:"http://localhost:5000/swagger/index.html",children:"http://localhost:5000/swagger/index.html"})," defining our web api that serves up a WeatherForecast:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"screenshot of swagger UI including WeatherForecast",src:t(81806).A+"",width:"1289",height:"1232",loading:"lazy"})}),"\n",(0,a.jsxs)(n.p,{children:["If we look at the ",(0,a.jsx)(n.code,{children:"swagger.json"})," created at our ",(0,a.jsx)(n.code,{children:"http://localhost:5000/swagger/v1/swagger.json"})," endpoint we see the following definition:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "openapi": "3.0.1",\n  "info": {\n    "title": "SwashbuckleInheritance",\n    "version": "1.0"\n  },\n  "paths": {\n    "/WeatherForecast": {\n      "get": {\n        "tags": ["WeatherForecast"],\n        "operationId": "GetWeatherForecast",\n        "responses": {\n          "200": {\n            "description": "Success",\n            "content": {\n              "text/plain": {\n                "schema": {\n                  "type": "array",\n                  "items": {\n                    "$ref": "#/components/schemas/WeatherForecast"\n                  }\n                }\n              },\n              "application/json": {\n                "schema": {\n                  "type": "array",\n                  "items": {\n                    "$ref": "#/components/schemas/WeatherForecast"\n                  }\n                }\n              },\n              "text/json": {\n                "schema": {\n                  "type": "array",\n                  "items": {\n                    "$ref": "#/components/schemas/WeatherForecast"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  "components": {\n    "schemas": {\n      "WeatherForecast": {\n        "type": "object",\n        "properties": {\n          "date": {\n            "type": "string",\n            "format": "date-time"\n          },\n          "temperatureC": {\n            "type": "integer",\n            "format": "int32"\n          },\n          "temperatureF": {\n            "type": "integer",\n            "format": "int32",\n            "readOnly": true\n          },\n          "summary": {\n            "type": "string",\n            "nullable": true\n          }\n        },\n        "additionalProperties": false\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Only a single return type is defined: ",(0,a.jsx)(n.code,{children:"WeatherForecast"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"multiple-return-types",children:"Multiple return types"}),"\n",(0,a.jsxs)(n.p,{children:["Now we've got our simple API, let's evolve it to serve up multiple types. We're going to do this by updating our ",(0,a.jsx)(n.code,{children:"WeatherForecast.cs"})," as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"public class WeatherForecast\n{\n    public DateTime Date { get; set; }\n\n    public int TemperatureC { get; set; }\n\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n    public string? Summary { get; set; }\n}\n\npublic class WeatherForecastWithLocation : WeatherForecast\n{\n    public string? Location { get; set; }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We now have both a ",(0,a.jsx)(n.code,{children:"WeatherForecast"})," and a ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"})," that inherits from ",(0,a.jsx)(n.code,{children:"WeatherForecast"})," and adds in a ",(0,a.jsx)(n.code,{children:"Location"})," property."]}),"\n",(0,a.jsxs)(n.p,{children:["We'll also update the ",(0,a.jsx)(n.code,{children:"GetWeatherForecast"})," endpoint to surface both these types:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'[HttpGet(Name = "GetWeatherForecast")]\npublic IEnumerable<WeatherForecast> Get() =>\n    DateTime.Now.Minute < 30\n        ? Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n        })\n        : Enumerable.Range(1, 5).Select(index => new WeatherForecastWithLocation\n        {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)],\n            Location = "London"\n        })\n        .ToArray();\n'})}),"\n",(0,a.jsxs)(n.p,{children:["We've amended the endpoint to return ",(0,a.jsx)(n.code,{children:"WeatherForecast"}),"s for the first thirty minutes of each hour, and ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"}),"s for the second thirty minutes. This is plainly a contrived example, but it demonstrates what it looks like to have an API endpoint with multiple return types."]}),"\n",(0,a.jsxs)(n.p,{children:["Incidentally, the reason we're able to achieve this without the compiler shouting at us is because our endpoint is saying it returns a ",(0,a.jsx)(n.code,{children:"WeatherForecast"})," and that is the base type of ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"})," as well."]}),"\n",(0,a.jsx)(n.p,{children:"To prove that it works, we wait for half past the hour and enter:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -X 'GET' 'http://localhost:5000/WeatherForecast'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We see back JSON that includes the ",(0,a.jsx)(n.code,{children:"Location"})," property. Huzzah!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "location": "London",\n    "date": "2022-03-07T08:51:02.0932353+00:00",\n    "temperatureC": -4,\n    "temperatureF": 25,\n    "summary": "Bracing"\n  },\n  {\n    "location": "London",\n    "date": "2022-03-08T08:51:02.0938418+00:00",\n    "temperatureC": -5,\n    "temperatureF": 24,\n    "summary": "Balmy"\n  },\n  {\n    "location": "London",\n    "date": "2022-03-09T08:51:02.0938513+00:00",\n    "temperatureC": 51,\n    "temperatureF": 123,\n    "summary": "Warm"\n  },\n  {\n    "location": "London",\n    "date": "2022-03-10T08:51:02.0938518+00:00",\n    "temperatureC": 35,\n    "temperatureF": 94,\n    "summary": "Warm"\n  },\n  {\n    "location": "London",\n    "date": "2022-03-11T08:51:02.0938537+00:00",\n    "temperatureC": 2,\n    "temperatureF": 35,\n    "summary": "Cool"\n  }\n]\n'})}),"\n",(0,a.jsx)(n.p,{children:"Whilst we've got behaviour that handles multiple return types, what we don't have is Swagger / Open API that represents that. Despite our tweaks, our Swagger / Open API definition remains unchanged."}),"\n",(0,a.jsx)(n.h2,{id:"serving-up-subtypes",children:"Serving up subtypes"}),"\n",(0,a.jsxs)(n.p,{children:["In a perfect world, C# would have support for discriminated unions, and we'd be using ",(0,a.jsx)(n.a,{href:"https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/",children:(0,a.jsx)(n.code,{children:"oneOf"})})," to represent the multiple types being surfaced. ",(0,a.jsx)(n.a,{href:"https://github.com/dotnet/csharplang/issues/113",children:"The day may come where C# supports discriminated unions"}),", but until that time we'll be achieving this behaviour with inheritance. We do this by having an endpoint that surfaces up a base type, and all our possible return types must either subclass that base type, or be that base type."]}),"\n",(0,a.jsxs)(n.p,{children:["To be clearer: we want our served up Swagger / Open API definition to serve up the definitions of our subclasses. It needs to shout about ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"})," in the same way it shouts about ",(0,a.jsx)(n.code,{children:"WeatherForecast"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["It turns out that this is eminently achievable with Swashbuckle, but you do need to know where to look. ",(0,a.jsx)(n.a,{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore#describing-discriminators",children:"Look here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To apply this tweak to our own ",(0,a.jsx)(n.code,{children:"Program.cs"})," we simply update the ",(0,a.jsx)(n.code,{children:"AddSwaggerGen"})," as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"builder.Services.AddSwaggerGen(swaggerGenOptions =>\n{\n    swaggerGenOptions.UseAllOfForInheritance();\n    swaggerGenOptions.UseOneOfForPolymorphism();\n\n    swaggerGenOptions.SelectSubTypesUsing(baseType =>\n        typeof(Program).Assembly.GetTypes().Where(type => type.IsSubclassOf(baseType))\n    );\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"There's three things we're doing here:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["With ",(0,a.jsx)(n.a,{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore#enabling-inheritance",children:(0,a.jsx)(n.code,{children:"UseAllOfForInheritance"})})," we're enabling inheritance - this allows us to maintain the inheritance hierarchy in any generated client models."]}),"\n",(0,a.jsxs)(n.li,{children:["With ",(0,a.jsx)(n.a,{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore#enabling-polymorphism",children:(0,a.jsx)(n.code,{children:"UseOneOfForPolymorphism"})})," we're listing the possible subtypes for an action that accepts/returns base types."]}),"\n",(0,a.jsxs)(n.li,{children:["With ",(0,a.jsx)(n.a,{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore#detecting-subtypes",children:(0,a.jsx)(n.code,{children:"SelectSubTypesUsing"})})," we're pointing Swashbuckle at the type hierarchies it exposes in the generated Swagger."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Then next time we ",(0,a.jsx)(n.code,{children:"dotnet run"})," we see that we're serving up both ",(0,a.jsx)(n.code,{children:"WeatherForecast"})," and ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"screenshot of swagger UI including WeatherForecast and WeatherForecastWithLocation",src:t(49580).A+"",width:"1282",height:"1184",loading:"lazy"})}),"\n",(0,a.jsxs)(n.p,{children:["We can also see this directly in the ",(0,a.jsx)(n.code,{children:"swagger.json"})," created at our ",(0,a.jsx)(n.code,{children:"http://localhost:5000/swagger/v1/swagger.json"})," endpoint:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "openapi": "3.0.1",\n  "info": {\n    "title": "SwashbuckleInheritance",\n    "version": "1.0"\n  },\n  "paths": {\n    "/WeatherForecast": {\n      "get": {\n        "tags": ["WeatherForecast"],\n        "operationId": "GetWeatherForecast",\n        "responses": {\n          "200": {\n            "description": "Success",\n            "content": {\n              "text/plain": {\n                "schema": {\n                  "type": "array",\n                  "items": {\n                    "oneOf": [\n                      {\n                        "$ref": "#/components/schemas/WeatherForecast"\n                      },\n                      {\n                        "$ref": "#/components/schemas/WeatherForecastWithLocation"\n                      }\n                    ]\n                  }\n                }\n              },\n              "application/json": {\n                "schema": {\n                  "type": "array",\n                  "items": {\n                    "oneOf": [\n                      {\n                        "$ref": "#/components/schemas/WeatherForecast"\n                      },\n                      {\n                        "$ref": "#/components/schemas/WeatherForecastWithLocation"\n                      }\n                    ]\n                  }\n                }\n              },\n              "text/json": {\n                "schema": {\n                  "type": "array",\n                  "items": {\n                    "oneOf": [\n                      {\n                        "$ref": "#/components/schemas/WeatherForecast"\n                      },\n                      {\n                        "$ref": "#/components/schemas/WeatherForecastWithLocation"\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  "components": {\n    "schemas": {\n      "WeatherForecast": {\n        "type": "object",\n        "properties": {\n          "date": {\n            "type": "string",\n            "format": "date-time"\n          },\n          "temperatureC": {\n            "type": "integer",\n            "format": "int32"\n          },\n          "temperatureF": {\n            "type": "integer",\n            "format": "int32",\n            "readOnly": true\n          },\n          "summary": {\n            "type": "string",\n            "nullable": true\n          }\n        },\n        "additionalProperties": false\n      },\n      "WeatherForecastWithLocation": {\n        "type": "object",\n        "allOf": [\n          {\n            "$ref": "#/components/schemas/WeatherForecast"\n          }\n        ],\n        "properties": {\n          "location": {\n            "type": "string",\n            "nullable": true\n          }\n        },\n        "additionalProperties": false\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"There's two things to note about the new definition:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"})," type is included in the ",(0,a.jsx)(n.code,{children:"schemas"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The return type has widened to include ",(0,a.jsx)(n.code,{children:"WeatherForecastWithLocation"})," as well using ",(0,a.jsx)(n.code,{children:"oneOf"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'"oneOf": [\n    {\n        "$ref": "#/components/schemas/WeatherForecast"\n    },\n    {\n        "$ref": "#/components/schemas/WeatherForecastWithLocation"\n    }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Success!"})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},48256:e=>{e.exports=JSON.parse('{"permalink":"/swashbuckle-inheritance-multiple-return-types","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2022-03-06-swashbuckle-inheritance-multiple-return-types/index.md","source":"@site/blog/2022-03-06-swashbuckle-inheritance-multiple-return-types/index.md","title":"Swashbuckle & inheritance: Give. Me. The. Types","description":"For API endpoints that return multiple types, you can use inheritance with Swashbuckle to get create a Swagger / Open API definition; here is how.","date":"2022-03-06T00:00:00.000Z","tags":[{"inline":false,"label":"Swagger","permalink":"/tags/swagger","description":"The Swagger API documentation framework - now known as OpenAPI."},{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":5.33,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"swashbuckle-inheritance-multiple-return-types","title":"Swashbuckle & inheritance: Give. Me. The. Types","authors":"johnnyreilly","tags":["swagger","asp.net"],"image":"./title-image.png","description":"For API endpoints that return multiple types, you can use inheritance with Swashbuckle to get create a Swagger / Open API definition; here is how.","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Lighthouse meet GitHub Actions","permalink":"/lighthouse-meet-github-actions"},"nextItem":{"title":"Azure Static Web Apps - a Netlify alternative","permalink":"/azure-static-web-apps-a-netlify-alternative"}}')},49580:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/screenshot-swagger-ui-with-location-47ddbace31520c3ec84fc570bbde9aa6.png"},81806:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/screenshot-initial-swagger-ui-bd6fdb1604bb88f69a25f6419618eaf4.png"}}]);