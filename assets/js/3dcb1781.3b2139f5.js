"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[18624],{5684:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/title-image-fae370d4476e00436aeda389c5ff8423.png"},8278:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/screenshot-mui-tabs-5d4bdd365e8a259d3de2651bec27d630.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(96540);const s={},o=a.createContext(s);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:n},e.children)}},40542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var a=t(59207),s=t(74848),o=t(28453);const i={slug:"text-first-mui-tabs",title:"Text-first MUI Tabs",authors:"johnnyreilly",tags:["react","mui"],image:"./title-image.png",hide_table_of_contents:!1,description:"Learn how to use the MUI tabs component in a text first way that remains strongly typed."},l=void 0,r={image:t(5684).A,authorsImageUrls:[void 0]},d=[{value:"Official example",id:"official-example",level:2},{value:"Text-first tabs",id:"text-first-tabs",level:2},{value:"Strongly typed tabs",id:"strongly-typed-tabs",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"I love the Material-UI (MUI) library for React. Hand on heart, I'm not very good at making UIs that are attractive. So I always grab for something to paper over the cracks. MUI is awesome for that."}),"\n",(0,s.jsxs)(n.p,{children:["One of the components that I use frequently is the ",(0,s.jsx)(n.a,{href:"https://mui.com/material-ui/react-tabs/",children:"tabs component"}),'. However, I\'ve found that it can be a little tricky to use in a "text-first" way, that also remains strongly typed. This post documents how to do just that!']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"title image reading &quot;Text-first MUI Tabs&quot; with the MUI logo",src:t(52221).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,s.jsx)(n.h2,{id:"official-example",children:"Official example"}),"\n",(0,s.jsx)(n.p,{children:"What does the tabs component look like? Well, here's a screenshot of it in action:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"screenshot of the tabs component",src:t(8278).A+"",width:"690",height:"312",loading:"lazy"})}),"\n",(0,s.jsx)(n.p,{children:"It's very useful if you'd like your users to be able to switch between different views easily. The official MUI documentation provides an example of how to use the tabs component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction CustomTabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default function BasicTabs() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab label=\"Item One\" {...a11yProps(0)} />\n          <Tab label=\"Item Two\" {...a11yProps(1)} />\n          <Tab label=\"Item Three\" {...a11yProps(2)} />\n        </Tabs>\n      </Box>\n      <CustomTabPanel value={value} index={0}>\n        Item One\n      </CustomTabPanel>\n      <CustomTabPanel value={value} index={1}>\n        Item Two\n      </CustomTabPanel>\n      <CustomTabPanel value={value} index={2}>\n        Item Three\n      </CustomTabPanel>\n    </Box>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This example is great, but (personally) I find it a little hard to read. There's a direct relationship between the tabs and the tab panels, but it's not immediately obvious. When you see the ",(0,s.jsx)(n.code,{children:"0"})," passed to ",(0,s.jsx)(n.code,{children:"a11yProps"})," and the ",(0,s.jsx)(n.code,{children:"0"})," passed to ",(0,s.jsx)(n.code,{children:"CustomTabPanel"}),", it's not clear that they're related. And if the ",(0,s.jsx)(n.code,{children:"a11yProps"})," function call was not present, it would be even less clear."]}),"\n",(0,s.jsx)(n.p,{children:"I'd like to see the tabs and tab panels presented together in a more text-first way, that makes the relationship between tab and tab panel more apparent."}),"\n",(0,s.jsx)(n.h2,{id:"text-first-tabs",children:"Text-first tabs"}),"\n",(0,s.jsx)(n.p,{children:"The code I'd like to see would look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<Box sx={{ width: '100%' }}>\n  <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n    <Tabs\n      value={selectedTab}\n      onChange={handleChange}\n      aria-label=\"basic tabs example\"\n    >\n      <Tab {...customTabProps('Item One')} />\n      <Tab {...customTabProps('Item Two')} />\n      <Tab {...customTabProps('Item Three')} />\n    </Tabs>\n  </Box>\n  <CustomTabPanel selectedTab={selectedTab} tab=\"Item One\">\n    Item One\n  </CustomTabPanel>\n  <CustomTabPanel selectedTab={selectedTab} tab=\"Item Two\">\n    Item Two\n  </CustomTabPanel>\n  <CustomTabPanel selectedTab={selectedTab} tab=\"Item Three\">\n    Item Three\n  </CustomTabPanel>\n</Box>\n"})}),"\n",(0,s.jsxs)(n.p,{children:['In this code snippet, the tabs and tab panels have more of a linkage, in a text-first way. It\'s hopefully clear that the "Item One" ',(0,s.jsx)(n.code,{children:"Tab"}),' and the "Item One" ',(0,s.jsx)(n.code,{children:"CustomTabPanel"})," are related."]}),"\n",(0,s.jsxs)(n.p,{children:["In the code above, the ",(0,s.jsx)(n.code,{children:"customTabProps"})," function is used to generate the props for the tabs (it's an evolution of the ",(0,s.jsx)(n.code,{children:"a11yProps"})," function that handles accessibility props as well as all others). Meanwhile, the ",(0,s.jsx)(n.code,{children:"CustomTabPanel"})," component is used to render the tab panels. The ",(0,s.jsx)(n.code,{children:"selectedTab"})," state is used to keep track of the selected tab."]}),"\n",(0,s.jsx)(n.p,{children:"How does this work? And is it strongly typed? Let's find out."}),"\n",(0,s.jsx)(n.h2,{id:"strongly-typed-tabs",children:"Strongly typed tabs"}),"\n",(0,s.jsx)(n.p,{children:"Yes, it's strongly typed! We achieve this by defining a mapping of tab text to tab index:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const tabs = {\n  'Item One': 0,\n  'Item Two': 1,\n  'Item Three': 2,\n} as const;\n\ntype TabText = keyof typeof tabs;\n\ntype TabIndex = (typeof tabs)[TabText];\n"})}),"\n",(0,s.jsxs)(n.p,{children:['So "Item One" is ',(0,s.jsx)(n.code,{children:"0"}),', "Item Two" is ',(0,s.jsx)(n.code,{children:"1"}),', and "Item Three" is ',(0,s.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We then do some TypeScript magic to strongly type this. We use ",(0,s.jsx)(n.code,{children:"as const"})," to tell TypeScript this is an immutable object. With that done we can then extract the keys and values from the object and use them to create the derived types ",(0,s.jsx)(n.code,{children:"TabText"})," and ",(0,s.jsx)(n.code,{children:"TabIndex"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TabText"})," is the keys of the ",(0,s.jsx)(n.code,{children:"tabs"})," object and ",(0,s.jsx)(n.code,{children:"TabIndex"})," is the values. So ",(0,s.jsx)(n.code,{children:"TabText"})," is ",(0,s.jsx)(n.code,{children:'"Item One" | "Item Two" | "Item Three"'})," and ",(0,s.jsx)(n.code,{children:"TabIndex"})," is ",(0,s.jsx)(n.code,{children:"0 | 1 | 2"}),". If we should subsequently amend the ",(0,s.jsx)(n.code,{children:"tabs"})," object in our code, TypeScript will ensure that the ",(0,s.jsx)(n.code,{children:"TabText"})," and ",(0,s.jsx)(n.code,{children:"TabIndex"})," types are updated accordingly."]}),"\n",(0,s.jsx)(n.p,{children:"We can then use these types in our components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"function customTabProps(tab: TabText) {\n  const index = tabs[tab];\n  return {\n    id: `simple-tab-tab-${index}`,\n    'aria-controls': `simple-tab-tabpanel-${index}`,\n    label: tab,\n  };\n}\n\ninterface CustomTabPanelProps {\n  children?: React.ReactNode;\n  tab: TabText;\n  selectedTab: TabIndex;\n}\n\nfunction CustomTabPanel(props: CustomTabPanelProps) {\n  const { children, selectedTab, tab, ...other } = props;\n  const index = tabs[tab];\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={selectedTab !== index}\n      id={`simple-tab-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-tab-${index}`}\n      {...other}\n    >\n      {selectedTab === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then our final example code looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"export default function BasicTabs() {\n  const [selectedTab, setSelectedTab] = React.useState<TabIndex>(\n    tabs['Item One'],\n  );\n  const handleChange = (event: React.SyntheticEvent, newValue: TabIndex) => {\n    setSelectedTab(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab {...customTabProps('Item One')} />\n          <Tab {...customTabProps('Item Two')} />\n          <Tab {...customTabProps('Item Three')} />\n        </Tabs>\n      </Box>\n      <CustomTabPanel selectedTab={selectedTab} tab=\"Item One\">\n        Item One\n      </CustomTabPanel>\n      <CustomTabPanel selectedTab={selectedTab} tab=\"Item Two\">\n        Item Two\n      </CustomTabPanel>\n      <CustomTabPanel selectedTab={selectedTab} tab=\"Item Three\">\n        Item Three\n      </CustomTabPanel>\n    </Box>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note how we use our ",(0,s.jsx)(n.code,{children:"TabIndex"})," types to strongly type the ",(0,s.jsx)(n.code,{children:"selectedTab"})," state and the ",(0,s.jsx)(n.code,{children:"handleChange"})," function. And also how the ",(0,s.jsx)(n.code,{children:"TabText"})," type is used to strongly type the ",(0,s.jsx)(n.code,{children:"tab"})," prop in the ",(0,s.jsx)(n.code,{children:"CustomTabPanel"})," component and the ",(0,s.jsx)(n.code,{children:"tab"})," argument in the ",(0,s.jsx)(n.code,{children:"customTabProps"})," function. With this in place, we cannot provide invalid tab text to the ",(0,s.jsx)(n.code,{children:"customTabProps"})," function or the ",(0,s.jsx)(n.code,{children:"CustomTabPanel"})," component. TypeScript would fight us every step of the way if we tried."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"So now we have a strongly typed, text-first way to use the MUI tabs component. We've used TypeScript to ensure that our tabs and tab panels are related in a way that is clear and easy to understand. This approach makes our code more maintainable and easier to work with. The full code is below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nconst tabs = {\n  'Item One': 0,\n  'Item Two': 1,\n  'Item Three': 2,\n} as const;\n\ntype TabText = keyof typeof tabs;\n\ntype TabIndex = (typeof tabs)[TabText];\n\nfunction customTabProps(tab: TabText) {\n  const index = tabs[tab];\n  return {\n    id: `simple-tab-tab-${index}`,\n    'aria-controls': `simple-tab-tabpanel-${index}`,\n    label: tab,\n  };\n}\n\ninterface CustomTabPanelProps {\n  children?: React.ReactNode;\n  tab: TabText;\n  selectedTab: TabIndex;\n}\n\nfunction CustomTabPanel(props: CustomTabPanelProps) {\n  const { children, selectedTab, tab, ...other } = props;\n  const index = tabs[tab];\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={selectedTab !== index}\n      id={`simple-tab-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-tab-${index}`}\n      {...other}\n    >\n      {selectedTab === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default function BasicTabs() {\n  const [selectedTab, setSelectedTab] = React.useState<TabIndex>(\n    tabs['Item One'],\n  );\n  const handleChange = (event: React.SyntheticEvent, newValue: TabIndex) => {\n    setSelectedTab(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab {...customTabProps('Item One')} />\n          <Tab {...customTabProps('Item Two')} />\n          <Tab {...customTabProps('Item Three')} />\n        </Tabs>\n      </Box>\n      <CustomTabPanel selectedTab={selectedTab} tab=\"Item One\">\n        Item One\n      </CustomTabPanel>\n      <CustomTabPanel selectedTab={selectedTab} tab=\"Item Two\">\n        Item Two\n      </CustomTabPanel>\n      <CustomTabPanel selectedTab={selectedTab} tab=\"Item Three\">\n        Item Three\n      </CustomTabPanel>\n    </Box>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"It's certainly more complicated than the official example (and this may well be why the official example is the way it is), but it matches my preferences."}),"\n",(0,s.jsxs)(n.p,{children:["As an aside, I'd like the code even more if I had the following instead of using ",(0,s.jsx)(n.code,{children:"Tab"})," with ",(0,s.jsx)(n.code,{children:"customTabProps"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<CustomTab tab="Item One" />\n'})}),"\n",(0,s.jsx)(n.p,{children:"I avoided that in this post because it would have made the example more complicated. But I think it would be a nice improvement."})]})}function b(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},52221:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/title-image-fae370d4476e00436aeda389c5ff8423.png"},59207:e=>{e.exports=JSON.parse('{"permalink":"/text-first-mui-tabs","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-03-20-text-first-mui-tabs/index.md","source":"@site/blog/2024-03-20-text-first-mui-tabs/index.md","title":"Text-first MUI Tabs","description":"Learn how to use the MUI tabs component in a text first way that remains strongly typed.","date":"2024-03-20T00:00:00.000Z","tags":[{"inline":false,"label":"React","permalink":"/tags/react","description":"The React library."},{"inline":false,"label":"MUI","permalink":"/tags/mui","description":"The MUI / Material UI component library."}],"readingTime":6.74,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"text-first-mui-tabs","title":"Text-first MUI Tabs","authors":"johnnyreilly","tags":["react","mui"],"image":"./title-image.png","hide_table_of_contents":false,"description":"Learn how to use the MUI tabs component in a text first way that remains strongly typed."},"unlisted":false,"prevItem":{"title":"Azure Cosmos DB: container items and generics","permalink":"/azure-cosmosdb-container-item-generics"},"nextItem":{"title":"Generate a Word document in ASP.NET","permalink":"/generate-word-doc-in-asp-net"}}')}}]);