"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[96984],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),b=a,f=c["".concat(l,".").concat(b)]||c[b]||m[b]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},91174:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>b,frontMatter:()=>s,metadata:()=>p,toc:()=>c});r(67294);var n=r(3905);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}const s={slug:"azure-pipelines-task-lib-and-isoutput-setvariable",title:"azure-pipelines-task-lib and isOutput setVariable",authors:"johnnyreilly",tags:["azure pipelines"],hide_table_of_contents:!1,description:'This is a workaround for custom Azure Pipelines task extension to output variable since the library does not support "isOutput=true."'},l=void 0,p={permalink:"/azure-pipelines-task-lib-and-isoutput-setvariable",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-12-09-azure-pipelines-task-lib-and-isoutput-setvariable/index.md",source:"@site/blog/2020-12-09-azure-pipelines-task-lib-and-isoutput-setvariable/index.md",title:"azure-pipelines-task-lib and isOutput setVariable",description:'This is a workaround for custom Azure Pipelines task extension to output variable since the library does not support "isOutput=true."',date:"2020-12-09T00:00:00.000Z",formattedDate:"December 9, 2020",tags:[{label:"azure pipelines",permalink:"/tags/azure-pipelines"}],readingTime:1.62,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"azure-pipelines-task-lib-and-isoutput-setvariable",title:"azure-pipelines-task-lib and isOutput setVariable",authors:"johnnyreilly",tags:["azure pipelines"],hide_table_of_contents:!1,description:'This is a workaround for custom Azure Pipelines task extension to output variable since the library does not support "isOutput=true."'},prevItem:{title:"Nullable reference types; CSharp's very own strictNullChecks",permalink:"/nullable-reference-types-csharp-strictnullchecks"},nextItem:{title:"Visual Studio Marketplace: images in Markdown!",permalink:"/images-in-markdown-for-azure-devops-marketplace"}},u={authorsImageUrls:[void 0]},c=[],m={toc:c};function b(e){var{components:t}=e,r=o(e,["components"]);return(0,n.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){a(e,t,r[t])}))}return e}({},m,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,'Some blog posts are insightful treatises on the future of web development, some are "here\'s how I solved my problem". This is most assuredly the latter.'),(0,n.kt)("p",null,"I'm writing an ",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/extend/develop/add-build-task?view=azure-devops"},"custom pipelines task extension for Azure Pipelines"),". It's written with TypeScript and the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/azure-pipelines-task-lib"},"azure-pipelines-task-lib"),"."),(0,n.kt)("p",null,"The pipeline needs to output a variable. Azure Pipelines does that using the ",(0,n.kt)("inlineCode",{parentName:"p"},"setvariable")," command combined with ",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-a-multi-job-output-variable"},"isOutput=true"),". This looks something like this: ",(0,n.kt)("inlineCode",{parentName:"p"},'##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the value"'),"."),(0,n.kt)("p",null,"The bad news is that the lib ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/azure-pipelines-task-lib/issues/688"},"doesn't presently support ",(0,n.kt)("inlineCode",{parentName:"a"},"isOutput=true")),". Gosh it makes me sad. Hopefully in future it will be resolved. But what now?"),(0,n.kt)("p",null,"For now we can hack ourselves a workaround:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import * as tl from 'azure-pipelines-task-lib/task';\nimport * as tcm from 'azure-pipelines-task-lib/taskcommand';\nimport * as os from 'os';\n\n/**\n * Sets a variable which will be output as well.\n *\n * @param     name    name of the variable to set\n * @param     val     value to set\n * @param     secret  whether variable is secret.  Multi-line secrets are not allowed.  Optional, defaults to false\n * @returns   void\n */\nexport function setOutputVariable(\n  name: string,\n  val: string,\n  secret = false,\n): void {\n  // use the implementation of setVariable to set all the internals,\n  // then subsequently set the output variable manually\n  tl.setVariable(name, val, secret);\n\n  const varValue = val || '';\n\n  // write the command\n  // see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-a-multi-job-output-variable\n  _command(\n    'task.setvariable',\n    {\n      variable: name || '',\n      isOutput: 'true',\n      issecret: (secret || false).toString(),\n    },\n    varValue,\n  );\n}\n\nconst _outStream = process.stdout;\n\nfunction _writeLine(str: string): void {\n  _outStream.write(str + os.EOL);\n}\n\nfunction _command(command: string, properties: any, message: string) {\n  const taskCmd = new tcm.TaskCommand(command, properties, message);\n  _writeLine(taskCmd.toString());\n}\n")),(0,n.kt)("p",null,"The above is effectively a wrapper for the existing ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/azure-pipelines-task-lib/blob/90e9cde0e509cba77185a80ef3af2fc898fb026c/node/task.ts#L162"},(0,n.kt)("inlineCode",{parentName:"a"},"setVariable")),". However, once it's called into the initial implementation, ",(0,n.kt)("inlineCode",{parentName:"p"},"setOutputVariable")," then writes out the same variable once more, but this time bolting on ",(0,n.kt)("inlineCode",{parentName:"p"},"isOutput=true"),"."),(0,n.kt)("p",null,"Finally, I've raised a PR to see if ",(0,n.kt)("inlineCode",{parentName:"p"},"isOutput")," can be added directly to the library. ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/azure-pipelines-task-lib/pull/691"},"You can track progress on that here.")))}b.isMDXComponent=!0}}]);