"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["14219"],{83999:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return r},toc:function(){return o}});var r=n(41054),s=n(85893),l=n(50065);let i={slug:"nullable-reference-types-csharp-strictnullchecks",title:"Nullable reference types; CSharp's very own strictNullChecks",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"C# introduces nullable reference types similar to TypeScripts `strictNullChecks`. Enabling raises warnings and solves null reference risks."},a=void 0,c={authorsImageUrls:[void 0]},o=[];function u(e){let t={a:"a",code:"code",p:"p",...(0,l.a)(),...e.components};return(0,s.jsxs)(t.p,{children:["'Tis the season to play with new compiler settings! I'm a very keen TypeScript user and have been merrily using ",(0,s.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks",children:(0,s.jsx)(t.code,{children:"strictNullChecks"})})," since it shipped. I was dimly aware that C# was also getting a similar feature by the name of ",(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/nullable-reference-types",children:"nullable reference types"}),"."]})}function p(e={}){let{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return i}});var r=n(67294);let s={},l=r.createContext(s);function i(e){let t=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(l.Provider,{value:t},e.children)}},41054:function(e){e.exports=JSON.parse('{"permalink":"/nullable-reference-types-csharp-strictnullchecks","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-12-20-nullable-reference-types-csharp-strictnullchecks/index.md","source":"@site/blog/2020-12-20-nullable-reference-types-csharp-strictnullchecks/index.md","title":"Nullable reference types; CSharp\'s very own strictNullChecks","description":"C# introduces nullable reference types similar to TypeScripts `strictNullChecks`. Enabling raises warnings and solves null reference risks.","date":"2020-12-20T00:00:00.000Z","tags":[{"inline":false,"label":"C#","permalink":"/tags/csharp","description":"The C# programming language."}],"readingTime":3.86,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"nullable-reference-types-csharp-strictnullchecks","title":"Nullable reference types; CSharp\'s very own strictNullChecks","authors":"johnnyreilly","tags":["c#"],"hide_table_of_contents":false,"description":"C# introduces nullable reference types similar to TypeScripts `strictNullChecks`. Enabling raises warnings and solves null reference risks."},"unlisted":false,"prevItem":{"title":"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect","permalink":"/how-to-make-azure-ad-403"},"nextItem":{"title":"azure-pipelines-task-lib and isOutput setVariable","permalink":"/azure-pipelines-task-lib-and-isoutput-setvariable"}}')}}]);