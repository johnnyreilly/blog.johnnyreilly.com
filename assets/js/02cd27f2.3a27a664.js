"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[4858],{48530:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=t(85893),r=t(11151);const i={slug:"concatting-ienumerables-in-csharp",title:"Concatting IEnumerables in C#",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator."},a=void 0,s={permalink:"/concatting-ienumerables-in-csharp",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-03-22-concatting-ienumerables-in-csharp/index.md",source:"@site/blog/2016-03-22-concatting-ienumerables-in-csharp/index.md",title:"Concatting IEnumerables in C#",description:"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator.",date:"2016-03-22T00:00:00.000Z",formattedDate:"March 22, 2016",tags:[{label:"c#",permalink:"/tags/c"}],readingTime:2.525,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"concatting-ienumerables-in-csharp",title:"Concatting IEnumerables in C#",authors:"johnnyreilly",tags:["c#"],hide_table_of_contents:!1,description:"Author proposes clean alternatives to `IEnumerable`s concatenation which entail creating custom extensions & using nulls for null-conditional operator."},unlisted:!1,prevItem:{title:"Instant Stubs with JSON.Net (just add hot water)",permalink:"/instant-stubs-with-jsonnet"},nextItem:{title:"Atom - Recovering from Corrupted Packages",permalink:"/atom-recovering-from-corrupted-packages"}},c={authorsImageUrls:[void 0]},l=[];function u(e){const n={a:"a",code:"code",p:"p",...(0,r.a)(),...e.components};return(0,o.jsxs)(n.p,{children:["I hate LINQ's ",(0,o.jsx)(n.a,{href:"https://msdn.microsoft.com/en-us/library/bb302894%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396",children:(0,o.jsx)(n.code,{children:"Enumerable.Concat"})})," when bringing together ",(0,o.jsx)(n.code,{children:"IEnumerable"}),"s. Not the behaviour (I love that!) but rather how code ends up looking when you use it. Consider this:"]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var o=t(67294);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);