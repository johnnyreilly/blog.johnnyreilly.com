"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["15070"],{22734:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return h}});var s=t(2815),i=t(85893),r=t(50065);let o={slug:"caching-and-cache-busting-with-requirejs",title:"Caching and cache-busting with RequireJS",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:'Learn how to use "urlArgs" in RequireJS to manage caching and offer a reusable solution for both development and production environments.'},a=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Research",id:"research",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Let\u2019s get the server involved!",id:"lets-get-the-server-involved",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Having put together a demo of using TypeScript with RequireJS my attention turned quickly to caching. Or rather, IE forced me to think about caching."}),"\n",(0,i.jsx)(n.p,{children:"Everyone has their own workflow, their own tools. The things they like to use as they put things together. And for me I\u2019m a Visual Studio man \u2013 it\u2019s not everyone\u2019s bag but I really like it. I find the JavaScript tooling is now really solid combined with IE and it (generally) makes me more productive. I want to use it. But, as you know, nothing is perfect..."}),"\n",(0,i.jsx)(n.p,{children:"So there I was, delighted with the TypeScript / RequireJS demo. It was working just lovely. I started investigating the debugging story. What would happen if I change a script file on the fly? When I refresh IE does it pick up the tweaks?"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s find out. I'll open up alerter.ts and change this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"var name = 'John';\n"})}),"\n",(0,i.jsx)(n.p,{children:"to this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"var name = 'Bobby';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And *",(0,i.jsx)(n.strong,{children:"boom"}),'*! Nothing. I\u2019ve refreshed IE and I\u2019m expecting to see \u201CWelcome to Code Camp, Bobby\u201D. But I\u2019m still reading \u201CWelcome to Code Camp, John\u201D... I bet Chrome wouldn\u2019t do this to me... And I\u2019m right! It doesn\u2019t. I don\u2019t want to get too much into the details of this but it looks like it comes down to Chrome sending an "If-Modified-Since" request header where IE does not. I\u2019m pretty sure that IE could be configured to behave likewise but I\u2019d rather not have to remember that. (And furthermore I don\u2019t want to have to remind every person that works on the app to do that as well.)']}),"\n",(0,i.jsx)(n.p,{children:"This raises a number of issues but essentially it gets me to think about the sort of caching I want. Like most of you I have 2 significant use cases:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Development"}),"\n",(0,i.jsx)(n.li,{children:"Production"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For Development I want any changes to JavaScript files to be picked up \u2013 I do *",(0,i.jsx)(n.strong,{children:"not"}),"* want caching. For Production I want caching in order that users have better performance / faster loading. If I ship a new version of the app to Production I also want users to pick up the new versions of a file and cache those."]}),"\n",(0,i.jsx)(n.h2,{id:"research",children:"Research"}),"\n",(0,i.jsxs)(n.p,{children:["I did a little digging. The most useful information I found was ",(0,i.jsx)(n.a,{href:"http://stackoverflow.com/q/8315088/761388",children:"a StackOverflow post on RequireJS and caching"}),". Actually I\u2019d recommend anyone reading this to head over and read that from top to bottom. Read the question and all of the answers as well \u2013 pretty much everything will add to your understanding of RequireJS."]}),"\n",(0,i.jsxs)(n.p,{children:["As with any set of answers there are different and conflicting views. ",(0,i.jsx)(n.a,{href:"http://stackoverflow.com/a/8479953/761388",children:"Phil McCull\u2019s (accepted) answer"})," was for my money the most useful. It pointed ",(0,i.jsx)(n.a,{href:"http://requirejs.org/docs/api.html#config-urlArgs",children:"back to the RequireJS documentation"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'*"urlArgs: Extra query string arguments appended to URLs that RequireJS uses to fetch resources. Most useful to cache bust when the browser or server is not configured correctly. Example cache bust setting for urlArgs:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"urlArgs: 'bust=' + new Date().getTime();\n"})}),"\n",(0,i.jsx)(n.p,{children:'During development it can be useful to use this, however be sure to remove it before deploying your code."'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Phil\u2019s answer suggests using urlArgs *",(0,i.jsx)(n.strong,{children:"both"}),"* for Production and for Development in 2 different ways. Using what amounts to a random number in the Development environment (as in the official docs) for cache-busting. For the Production environment he suggests using a specific version number which allows for client-side caching between different build versions."]}),"\n",(0,i.jsxs)(n.p,{children:["Full disclosure, this is not the approach favoured by James Burke (author of RequireJS). He doesn\u2019t go into why in the RequireJS docs but has ",(0,i.jsx)(n.a,{href:"https://groups.google.com/forum/#!msg/requirejs/3E9dP_BSQoY/36ut2Gtko7cJ",children:"elsewhere expounded on this"}),":"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"_For deployed assets, I prefer to put the version or hash for the whole build as a build directory, then just modify the baseUrl config used for the project to use that versioned directory as the baseUrl. Then no other files change, and it helps avoid some proxy issues where they may not cache an URL with a query string on it. _"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"I\u2019m not so worried about the proxy caching issue. My users tend to be people who use the application repeatedly and so the caching I most care about is their local machine caching. From what I understand urlArgs will work fine in this scenario. Yes the downside of this approach is that some proxy servers may not cache these assets. That\u2019s a shame but it\u2019s not a dealbreaker for me. As I said, I still have client side caching."}),"\n",(0,i.jsxs)(n.p,{children:["If you want to go a little deeper I recommend reading ",(0,i.jsx)(n.a,{href:"http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/",children:"Steve Souders post"})," on the topic (in case you\u2019re not aware Steve is Google\u2019s Mr Performance). Interestingly, looking at the comments on the post it sounds like the lack of support for proxy caching with querystrings may that may be starting to change."]}),"\n",(0,i.jsx)(n.p,{children:"But either way, I\u2019m happy with this approach. As I always say, if it\u2019s good enough for Stack Overflow then it\u2019s good enough for me."}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["I\u2019m going to start off using the demo from ",(0,i.jsx)(n.a,{href:"/typescript-and-requirejs-keep-it-simple",children:"my last blog post"})," as a basis. Let\u2019s take that and evolve it. As a result my solution is going to work with TypeScript and RequireJS (since the previous demo was about that) but the implementation I\u2019m going to come up with would work as well with vanilla JS as it would with TypeScript compiled JS."]}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s take a look at our index.html. First we\u2019ll drop our usage of ",(0,i.jsx)(n.code,{children:"main.ts"})," / ",(0,i.jsx)(n.code,{children:"main.js"}),' (our bootstrapper file that defines config and kicks off the "app"). We\u2019ll pull out the use of ',(0,i.jsx)(n.code,{children:"data-main"})," and instead, just after the reference to require we\u2019ll add the contents of ",(0,i.jsx)(n.code,{children:"main.js"})," much in ",(0,i.jsx)(n.a,{href:"http://requirejs.org/docs/api.html#config",children:"the style of the RequireJS docs"}),". We\u2019ll also include a urlArgs that as a cache-buster that uses the approach outlined ",(0,i.jsx)(n.a,{href:"http://requirejs.org/docs/api.html#config-urlArgs",children:"in the RequireJS docs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<script src=\"/scripts/require.js\"><\/script>\n<script>\n  require.config({\n    baseUrl: '/scripts',\n    paths: {\n      jquery: 'jquery-2.1.0',\n    },\n    urlArgs: 'v=' + new Date().getTime(),\n  });\n\n  require(['alerter'], function (alerter) {\n    alerter.showMessage();\n  });\n<\/script>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Spinning up the site all runs as you would expect. The question is: does this work as a cache-buster? Let\u2019s tweak ",(0,i.jsx)(n.code,{children:"alerter.ts"})," / ",(0,i.jsx)(n.code,{children:"alerter.js"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Oh yeah! We\u2019re cache-busting like gangbusters!"}),"\n",(0,i.jsx)(n.p,{children:"So now let\u2019s comment out our existing urlArgs (which represents the Development solution from Phil\u2019s answer) and replace it with a fixed value like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"//urlArgs: \"v=\" +  (new Date()).getTime()\nurlArgs: 'v=1';\n"})}),"\n",(0,i.jsx)(n.p,{children:"This represents the Production solution from Phil\u2019s answer. Now let\u2019s run, refresh a couple of times and ensure that our fixed querystring value results in a 304 status code (indicating \u201CNot Modified\u201D and cached item used)."}),"\n",(0,i.jsx)(n.p,{children:"It does! Now let\u2019s increment the value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"urlArgs: 'v=2';\n"})}),"\n",(0,i.jsx)(n.p,{children:"When we refresh the browser this should result in 200 status codes (indicating the cached version has not been used and the client has picked up a new version from the server)."}),"\n",(0,i.jsx)(n.p,{children:"Success! That\u2019s our premise tested \u2013 both Development and Production scenarios. Now we want to turn this into a slightly more sophisticated reusable solution like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<script src=\"/scripts/require.js\"><\/script>\n<script>\n  var inDevelopment = true,\n    version = '1';\n\n  require.config({\n    baseUrl: '/scripts',\n    paths: {\n      jquery: 'jquery-2.1.0',\n    },\n    urlArgs: 'v=' + (inDevelopment ? new Date().getTime() : version),\n  });\n\n  require(['alerter'], function (alerter) {\n    alerter.showMessage();\n  });\n<\/script>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the tweaked script above 2 variables are defined. The first is ",(0,i.jsx)(n.code,{children:"inDevelopment"})," which models whether you are in the Development scenario (true) or the Production scenario (false). The second is ",(0,i.jsx)(n.code,{children:"version"})," which represents the application version number. With this in place I can simply flip between the Development and Production scenario by changing the value of ",(0,i.jsx)(n.code,{children:"inDevelopment"}),". And when a new version ships I can change the version number to force a cache refresh on the users."]}),"\n",(0,i.jsxs)(n.p,{children:["What drives the values of ",(0,i.jsx)(n.code,{children:"inDevelopment"})," / ",(0,i.jsx)(n.code,{children:"version"})," is down to you. You could load the ",(0,i.jsx)(n.code,{children:"inDevelopment"})," / ",(0,i.jsx)(n.code,{children:"version"})," values from some application endpoint. You could hardcode them in your screen. The choices are yours. I\u2019m going to finish off with a simple approach that I've found useful."]}),"\n",(0,i.jsx)(n.h2,{id:"lets-get-the-server-involved",children:"Let\u2019s get the server involved!"}),"\n",(0,i.jsxs)(n.p,{children:["I want the server to drive my urlArgs value. Why? Well this project happens to be an ASP.NET project which handily has the concept of Development / Production scenarios nicely modelled by the ",(0,i.jsx)(n.a,{href:"http://msdn.microsoft.com/en-us/library/s10awwz0(v=vs.85).aspx",children:"web.config\u2019s compilation debug flag"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<configuration>\n  <system.web>\n    <compilation debug="true" targetFramework="4.5" />\n    <httpRuntime targetFramework="4.5" />\n  </system.web>\n</configuration>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If debug is ",(0,i.jsx)(n.code,{children:"true"})," then that reflects the Development scenario. If debug is ",(0,i.jsx)(n.code,{children:"false"})," then that reflects the Production scenario."]}),"\n",(0,i.jsxs)(n.p,{children:["So bearing that in mind I want to use the value of debug to drive my ",(0,i.jsx)(n.code,{children:"urlArgs"}),". If I have my debug flag set to ",(0,i.jsx)(n.code,{children:"true"})," I want to cache-bust all the way. Likewise, if debug is set to ",(0,i.jsx)(n.code,{children:"false"})," then I want to serve up the version number so that caching is used until the version number changes. Time to break out the C#:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'namespace RequireJSandCaching\n{\n    public static class RequireJSHelpers\n    {\n        private static readonly bool _inDebug;\n        private static readonly string _version;\n\n        static RequireJSHelpers()\n        {\n            _inDebug = System.Web.HttpContext.Current.IsDebuggingEnabled;\n            _version = (_inDebug)\n                ? "InDebug"\n                : System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();\n        }\n\n        public static string Version\n        {\n            get\n            {\n                return (_inDebug)\n                    ? System.DateTime.Now.Ticks.ToString()\n                    : _version;\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This is a static helper class called ",(0,i.jsx)(n.code,{children:"RequireJSHelpers"}),". It has a static constructor which initialises 2 fields. ",(0,i.jsx)(n.code,{children:"_inDebug"})," is taken from ",(0,i.jsx)(n.code,{children:"System.Web.HttpContext.Current.IsDebuggingEnabled"})," which exposes the compilation debug value. ",(0,i.jsx)(n.code,{children:"_version"})," is initialised, when debug is ",(0,i.jsx)(n.code,{children:"false"}),", to the version number of the dll (driven by this ",(0,i.jsx)(n.code,{children:'AssemblyInfo.cs [assembly: AssemblyVersion("1.0.*")]'})," attribute)"]}),"\n",(0,i.jsxs)(n.p,{children:["There\u2019s 1 property on this helper class called version. Depending on whether the app is in debug mode or not this attribute either exposes the application version or effectively the C# equivalent to JavaScript\u2019s ",(0,i.jsx)(n.code,{children:"(new Date()).getTime()"}),". (Well strictly speaking they have a different starting point in history but that\u2019s by-the-by... Both are of equal value as cache-busters.)"]}),"\n",(0,i.jsx)(n.p,{children:"You probably see where this is all going."}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s clone our ",(0,i.jsx)(n.code,{children:"index.html"})," page and call it ",(0,i.jsx)(n.code,{children:"serverUrlArgs.cshtml"})," (note the suffix). Let\u2019s replace the script section with this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<script>\n  require.config({\n    baseUrl: '/scripts',\n    paths: {\n      jquery: 'jquery-2.1.0',\n    },\n    urlArgs: 'v=@RequireJSandCaching.RequireJSHelpers.Version',\n  });\n\n  require(['alerter'], function (alerter) {\n    alerter.showMessage();\n  });\n<\/script>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Which drives ",(0,i.jsx)(n.code,{children:"urlArgs"})," from the ",(0,i.jsx)(n.code,{children:"RequireJSHelpers.Version"})," property. If we fire it up now (with debug set to true in our web.config) then we see requests like this:"]}),"\n",(0,i.jsx)(n.p,{children:"And if we set debug to false in our web.config then (after the initial requests have been cached) we see requests like this:"}),"\n",(0,i.jsxs)(n.p,{children:["This leaves us with a simple mechanism to drive our RequireJS caching. If debug is set to ",(0,i.jsx)(n.code,{children:"true"})," in our ",(0,i.jsx)(n.code,{children:"web.config"})," then Require will perform cache-busting. If debug is set to ",(0,i.jsx)(n.code,{children:"false"})," then RequireJS will perform only version-changing cache-busting and will, whilst the version remains constant, support client-side caching."]}),"\n",(0,i.jsxs)(n.p,{children:["Finished. In case it helps I\u2019ve put the code for this ",(0,i.jsx)(n.a,{href:"https://github.com/johnnyreilly/RequireJSandCaching",children:"up on GitHub"}),"."]})]})}function d(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return o}});var s=t(67294);let i={},r=s.createContext(i);function o(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},2815:function(e){e.exports=JSON.parse('{"permalink":"/caching-and-cache-busting-with-requirejs","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-03-05-caching-and-cache-busting-with-requirejs/index.md","source":"@site/blog/2014-03-05-caching-and-cache-busting-with-requirejs/index.md","title":"Caching and cache-busting with RequireJS","description":"Learn how to use \\"urlArgs\\" in RequireJS to manage caching and offer a reusable solution for both development and production environments.","date":"2014-03-05T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":8.925,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"caching-and-cache-busting-with-requirejs","title":"Caching and cache-busting with RequireJS","authors":"johnnyreilly","tags":["asp.net"],"hide_table_of_contents":false,"description":"Learn how to use \\"urlArgs\\" in RequireJS to manage caching and offer a reusable solution for both development and production environments."},"unlisted":false,"prevItem":{"title":"Knockout + Globalize = valueNumber Binding Handler","permalink":"/knockout-globalize-valuenumber-binding"},"nextItem":{"title":"TypeScript and RequireJS (Keep It Simple)","permalink":"/typescript-and-requirejs-keep-it-simple"}}')}}]);