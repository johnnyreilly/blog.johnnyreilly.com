"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["62408"],{13972:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return c}});var s=t(56944),i=t(85893),a=t(50065);let r={slug:"he-tasks-me-he-heaps-me-i-will-wreak",title:"He tasks me; he heaps me.... I will wreak that MOQ upon him.",authors:"johnnyreilly",tags:["automated testing"],hide_table_of_contents:!1,description:"Use Moq to simplify async testing, with ReturnAsync method. For testing a class that consumes async API, mock it using Task.Delay with Moqs Returns."},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"But wait.... What if there&#39;s like... Nothing?",id:"but-wait-what-if-theres-like-nothing",level:2},{value:"Here&#39;s one I made earlier...",id:"heres-one-i-made-earlier",level:2}];function h(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Enough with the horrific misquotes - this is about Moq and async (that's my slight justification for robbing Herman Melville)."}),"\n",(0,i.jsxs)(n.p,{children:["It's pretty straightforward to use Moq to do async testing thanks to it's marvellous ",(0,i.jsx)(n.code,{children:"ReturnsAsync"})," method. That means it's really easy to test a class that consumes an async API. Below is an example of a class that does just that: (it so happens that this class is a Web API controller but that's pretty irrelevant to be honest)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"namespace Proverb.Web.Controllers\n{\n    // ISageService included inline for ease of explanation\n    public interface ISageService\n    {\n        Task<int> DeleteAsync(int id);\n    }\n\n    public class SageController : ApiController\n    {\n        ISageService _sageService;\n\n        public SageController(ISageService userService)\n        {\n            _sageService = userService;\n        }\n\n        public async Task<IHttpActionResult> Delete(int id)\n        {\n            int deleteCount = await _sageService.DeleteAsync(id);\n\n            if (deleteCount == 0)\n                return NotFound();\n            else\n                return Ok();\n        }\n   }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To mock the ",(0,i.jsx)(n.code,{children:"_sageService.DeleteAsync"})," method it's as easy as this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"namespace Proverb.Web.Tests.ASPNet.Controllers\n{\n    [TestClass]\n    public class SageControllerTests\n    {\n        private Mock<ISageService> _sageServiceMock;\n        private SageController _controller;\n\n        [TestInitialize]\n        public void Initialise()\n        {\n            _sageServiceMock = new Mock<ISageService>();\n\n            _controller = new SageController(_sageServiceMock.Object);\n        }\n\n        [TestMethod]\n        public async Task Delete_returns_a_NotFound()\n        {\n            _sageServiceMock\n                .Setup(x => x.DeleteAsync(_sage.Id))\n                .ReturnsAsync(0); // This makes me *so* happy...\n\n            IHttpActionResult result = await _controller.Delete(_sage.Id);\n\n            var notFound = result as NotFoundResult;\n            Assert.IsNotNull(notFound);\n            _sageServiceMock.Verify(x => x.DeleteAsync(_sage.Id));\n        }\n\n        [TestMethod]\n        public async Task Delete_returns_an_Ok()\n        {\n            _sageServiceMock\n                .Setup(x => x.DeleteAsync(_sage.Id))\n                .ReturnsAsync(1); // I'm still excited now!\n\n            IHttpActionResult result = await _controller.Delete(_sage.Id);\n\n            var ok = result as OkResult;\n            Assert.IsNotNull(ok);\n            _sageServiceMock.Verify(x => x.DeleteAsync(_sage.Id));\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"but-wait-what-if-theres-like-nothing",children:"But wait.... What if there's like... Nothing?"}),"\n",(0,i.jsxs)(n.p,{children:["Nope, I'm not getting into metaphysics. Something more simple. What if the ",(0,i.jsx)(n.code,{children:"async"})," API you're consuming returns just a ",(0,i.jsx)(n.code,{children:"Task"}),"? Not a ",(0,i.jsx)(n.code,{children:"Task"})," of ",(0,i.jsx)(n.code,{children:"int"})," but a simple old humble ",(0,i.jsx)(n.code,{children:"Task"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"So to take our example we're going from this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"public interface ISageService\n    {\n        Task<int> DeleteAsync(int id);\n    }\n"})}),"\n",(0,i.jsx)(n.p,{children:"To this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"public interface ISageService\n    {\n        Task DeleteAsync(int id);\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Your initial thought might be \"well that's okay, I'll just lop off the ",(0,i.jsx)(n.code,{children:"ReturnsAsync"})," statements and I'm home free\". That's what I thought anyway.... And I was *",(0,i.jsx)(n.strong,{children:"WRONG"}),"*! A moments thought and you realise that there's still a return type - it's just ",(0,i.jsx)(n.code,{children:"Task"})," now. What you want to do is something like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"_sageServiceMock\n                .Setup(x => x.DeleteAsync(_sage.Id))\n                .ReturnsAsync(void); // This'll definitely work... Probably\n"})}),"\n",(0,i.jsxs)(n.p,{children:["No it won't - ",(0,i.jsx)(n.code,{children:"void"})," is not a real type and much as you might like it to, this is not going to work."]}),"\n",(0,i.jsxs)(n.p,{children:["So right now you're thinking, well Moq probably has my back - it'll have something like ",(0,i.jsx)(n.code,{children:"ReturnsTask"}),", right? Wrong! It's intentional it turns out - there's a discussion on ",(0,i.jsx)(n.a,{href:"https://github.com/Moq/moq4/issues/117",children:"GitHub about the issue"}),". And in that discussion there's just what we need. We can use ",(0,i.jsx)(n.code,{children:"Task.Delay"})," or ",(0,i.jsx)(n.code,{children:"Task.FromResult"})," alongside Moq's good old ",(0,i.jsx)(n.code,{children:"Returns"})," method and we're home free!"]}),"\n",(0,i.jsx)(n.h2,{id:"heres-one-i-made-earlier",children:"Here's one I made earlier..."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"namespace Proverb.Web.Controllers\n{\n    // ISageService again included inline for ease of explanation\n    public interface ISageService\n    {\n        Task DeleteAsync(int id);\n    }\n\n    public class SageController : ApiController\n    {\n        ISageService _sageService;\n\n        public SageController(ISageService userService)\n        {\n            _sageService = userService;\n        }\n\n        public async Task<IHttpActionResult> Delete(int id)\n        {\n            await _sageService.DeleteAsync(id);\n\n            return Ok();\n        }\n   }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"namespace Proverb.Web.Tests.ASPNet.Controllers\n{\n    [TestClass]\n    public class SageControllerTests\n    {\n        private Mock<ISageService> _sageServiceMock;\n        private SageController _controller;\n\n        readonly Task TaskOfNowt = Task.Delay(0);\n        // Or you could use this equally valid but slightly more verbose approach:\n        //readonly Task TaskOfNowt = Task.FromResult<object>(null);\n\n        [TestInitialize]\n        public void Initialise()\n        {\n            _sageServiceMock = new Mock<ISageService>();\n\n            _controller = new SageController(_sageServiceMock.Object);\n        }\n\n        [TestMethod]\n        public async Task Delete_returns_an_Ok()\n        {\n            _sageServiceMock\n                .Setup(x => x.DeleteAsync(_sage.Id))\n                .Returns(TaskOfNowt); // Feels good doesn't it?\n\n            IHttpActionResult result = await _controller.Delete(_sage.Id);\n\n            var ok = result as OkResult;\n            Assert.IsNotNull(ok);\n            _sageServiceMock.Verify(x => x.DeleteAsync(_sage.Id));\n        }\n    }\n}\n"})})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return r}});var s=t(67294);let i={},a=s.createContext(i);function r(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},56944:function(e){e.exports=JSON.parse('{"permalink":"/he-tasks-me-he-heaps-me-i-will-wreak","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-10-03-he-tasks-me-he-heaps-me-i-will-wreak/index.md","source":"@site/blog/2014-10-03-he-tasks-me-he-heaps-me-i-will-wreak/index.md","title":"He tasks me; he heaps me.... I will wreak that MOQ upon him.","description":"Use Moq to simplify async testing, with ReturnAsync method. For testing a class that consumes async API, mock it using Task.Delay with Moqs Returns.","date":"2014-10-03T00:00:00.000Z","tags":[{"inline":false,"label":"Automated Testing","permalink":"/tags/automated-testing","description":"How to perform the automation of tests."}],"readingTime":3.045,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"he-tasks-me-he-heaps-me-i-will-wreak","title":"He tasks me; he heaps me.... I will wreak that MOQ upon him.","authors":"johnnyreilly","tags":["automated testing"],"hide_table_of_contents":false,"description":"Use Moq to simplify async testing, with ReturnAsync method. For testing a class that consumes async API, mock it using Task.Delay with Moqs Returns."},"unlisted":false,"prevItem":{"title":"Caching and Cache-Busting in AngularJS with HTTP interceptors","permalink":"/caching-and-cache-busting-in-angularjs-with-http-interceptors"},"nextItem":{"title":"Journalling the Migration of Jasmine Tests to TypeScript","permalink":"/migrating-jasmine-tests-to-typescript"}}')}}]);