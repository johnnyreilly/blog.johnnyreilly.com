"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[50266],{22236:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/screenshot-largest-contentful-paint-image-fetchpriority-31cedb4594bb5ec65e5610145d329853.webp"},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var n=i(96540);const o={},s=n.createContext(o);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(s.Provider,{value:t},e.children)}},42528:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>h});var n=i(56511),o=i(74848),s=i(28453);const r={slug:"docusaurus-improve-core-web-vitals-fetchpriority",title:"Docusaurus: improving Core Web Vitals with fetchpriority",authors:"johnnyreilly",tags:["docusaurus"],image:"./title-image.png",description:"By using `fetchpriority` on your Largest Contentful Paint you can improve your Core Web Vitals. This post implements that with Docusaurus.",hide_table_of_contents:!1},a=void 0,l={image:i(50802).A,authorsImageUrls:[void 0]},h=[{value:"Avoiding lazy loading on the Largest Contentful Paint",id:"avoiding-lazy-loading-on-the-largest-contentful-paint",level:2},{value:"<code>fetchpriority</code>",id:"fetchpriority",level:2},{value:"Swizzling the image component",id:"swizzling-the-image-component",level:2},{value:"Adding <code>fetchpriority=&quot;high&quot;</code> to the LCP with a custom plugin",id:"adding-fetchpriorityhigh-to-the-lcp-with-a-custom-plugin",level:2},{value:"What does it look like when applied?",id:"what-does-it-look-like-when-applied",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["By using ",(0,o.jsx)(t.code,{children:"fetchpriority"})," on your Largest Contentful Paint you can improve your Core Web Vitals. This post implements that with Docusaurus v2. There is a follow on post that details ",(0,o.jsx)(t.a,{href:"/docusaurus-3-how-to-migrate-rehype-plugins",children:"migrating this plugin to Docusaurus v3"}),"."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"title image reading &quot;Docusaurus: improving Core Web Vitals with fetchpriority&quot;",src:i(71905).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,o.jsx)(t.h2,{id:"avoiding-lazy-loading-on-the-largest-contentful-paint",children:"Avoiding lazy loading on the Largest Contentful Paint"}),"\n",(0,o.jsxs)(t.p,{children:["At the weekend ",(0,o.jsx)(t.a,{href:"/how-i-ruined-my-seo",children:"I wrote a post documenting how I believe I ruined the SEO on my blog"}),". That post ended up ",(0,o.jsx)(t.a,{href:"https://news.ycombinator.com/item?id=34389421",children:"trending on Hacker News"}),". People made suggestions around things I could do that could improve things. One post in particular caught my eye from ",(0,o.jsx)(t.a,{href:"https://growtika.com",children:"Growtika"})," saying:"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Page speed: It's one of the most important ranking factor. You don't have to get 100 score, but passing the core web vitals score and having higher score on mobile is recommended."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://pagespeed.web.dev/report?url=https%3A%2F%2Fjohnnyreilly.com%2F&form_factor=mobile",children:"https://pagespeed.web.dev/report?url=https%3A%2F%2Fjohnnyreilly.com%2F&form_factor=mobile"})}),"\n",(0,o.jsx)(t.p,{children:"A cool trick to improve the result fast is by removing the lazy load effect from the LCP:"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"screenshot of web test results that reads largest contentful paint image was lazily loaded ",src:i(82516).A+"",width:"2220",height:"1014",loading:"lazy"})}),"\n",(0,o.jsx)(t.p,{children:"Another person chimed in with:"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["Indeed. Even better, making it high priority instead of normal: ",(0,o.jsx)(t.a,{href:"https://addyosmani.com/blog/fetch-priority/",children:"https://addyosmani.com/blog/fetch-priority/"})]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"fetchpriority",children:(0,o.jsx)(t.code,{children:"fetchpriority"})}),"\n",(0,o.jsxs)(t.p,{children:["I hadn't heard of ",(0,o.jsx)(t.code,{children:"fetchpriority"})," before this, but the linked article by ",(0,o.jsx)(t.a,{href:"https://addyosmani.com",children:"Addy Osmani"})," carried this tip:"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["Add ",(0,o.jsx)(t.code,{children:'fetchpriority="high"'})," to your Largest Contentful Paint (LCP) image to get it to load sooner. Priority Hints sped up Etsy\u2019s LCP by 4% with some sites seeing an improvement of up to 20-30% in their lab tests. In many cases, fetchpriority should lead to a nice boost for LCP."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["I was keen to try this out. Somewhat interestingly, I was the person responsible for ",(0,o.jsx)(t.a,{href:"https://github.com/facebook/docusaurus/pull/6598",children:"originally contributing lazy loading to Docusaurus"}),". For what it's worth, lazy loading is a ",(0,o.jsx)(t.em,{children:"good thing"})," to do. It's just that in this case, it was causing the LCP to be lazy loaded. I wanted to change that."]}),"\n",(0,o.jsx)(t.h2,{id:"swizzling-the-image-component",children:"Swizzling the image component"}),"\n",(0,o.jsxs)(t.p,{children:["Since my initial contribution, the ",(0,o.jsx)(t.a,{href:"https://github.com/facebook/docusaurus/pull/6990",children:"implementation had been tweaked to allow user control via Swizzling"}),". By the way, ",(0,o.jsx)(t.a,{href:"https://docusaurus.io/docs/swizzling",children:"swizzling is a great feature of Docusaurus"}),". It allows you to override the default implementation of a component. In this case, I wanted to override the ",(0,o.jsx)(t.code,{children:"Img"})," component and opt out of lazy loading. I did this by running the following command:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"yarn swizzle @docusaurus/theme-classic MDXComponents/Img -- --eject\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This created a file at ",(0,o.jsx)(t.code,{children:"src/theme/MDXComponents/Img.js"}),". I then made the following change:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-diff",children:"import React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.module.css';\nfunction transformImgClassName(className) {\n  return clsx(className, styles.img);\n}\nexport default function MDXImg(props) {\n  return (\n    // eslint-disable-next-line jsx-a11y/alt-text\n    <img\n-      loading=\"lazy\"\n      {...props}\n      className={transformImgClassName(props.className)}\n    />\n  );\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Getting rid of the ",(0,o.jsx)(t.code,{children:'loading="lazy"'})," attribute was all I needed to do. This gets us to the point where none of our images are lazy loaded anymore. Stage 1 complete!"]}),"\n",(0,o.jsxs)(t.h2,{id:"adding-fetchpriorityhigh-to-the-lcp-with-a-custom-plugin",children:["Adding ",(0,o.jsx)(t.code,{children:'fetchpriority="high"'})," to the LCP with a custom plugin"]}),"\n",(0,o.jsxs)(t.p,{children:["The next thing to do was to write a small Rehype plugin to add ",(0,o.jsx)(t.code,{children:'fetchpriority="high"'})," to the LCP. I did this by creating a new JavaScript file called ",(0,o.jsx)(t.code,{children:"image-fetchpriority-rehype-plugin.js"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"// @ts-check\nconst visit = require('unist-util-visit');\n\n/**\n * Create a rehype plugin that will make the first image eager loaded with fetchpriority=\"high\" and lazy load all other images\n * @returns rehype plugin that will make the first image eager loaded with fetchpriority=\"high\" and lazy load all other images\n */\nfunction imageFetchPriorityRehypePluginFactory() {\n  /** @type {Map<string, string>} */ const files = new Map();\n\n  /** @type {import('unified').Transformer} */\n  return (tree, vfile) => {\n    visit(tree, ['element', 'jsx'], (node) => {\n      if (node.type === 'element' && node['tagName'] === 'img') {\n        // handles nodes like this:\n        // {\n        //   type: 'element',\n        //   tagName: 'img',\n        //   properties: {\n        //     src: 'https://some.website.com/cat.gif',\n        //     alt: null\n        //   },\n        //   ...\n        // }\n\n        const key = `img|${vfile.history[0]}`;\n        const imageAlreadyProcessed = files.get(key);\n        const fetchpriorityThisImage =\n          !imageAlreadyProcessed ||\n          imageAlreadyProcessed === node['properties']['src'];\n\n        if (!imageAlreadyProcessed) {\n          files.set(key, node['properties']['src']);\n        }\n\n        if (fetchpriorityThisImage) {\n          node['properties'].fetchpriority = 'high';\n          node['properties'].loading = 'eager';\n        } else {\n          node['properties'].loading = 'lazy';\n        }\n      } else if (node.type === 'jsx' && node['value']?.includes('<img ')) {\n        // handles nodes like this:\n\n        // {\n        //   type: 'jsx',\n        //   value: '<img src={require(\"!/workspaces/blog.johnnyreilly.com/blog-website/node_modules/url-loader/dist/cjs.js?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=/workspaces/blog.johnnyreilly.com/blog-website/node_modules/file-loader/dist/cjs.js!./bower-with-the-long-paths.png\").default} width=\"640\" height=\"497\" />'\n        // }\n\n        // if (!vfile.history[0].includes('blog/2023-01-15')) return;\n\n        const key = `jsx|${vfile.history[0]}`;\n        const imageAlreadyProcessed = files.get(key);\n        const fetchpriorityThisImage =\n          !imageAlreadyProcessed || imageAlreadyProcessed === node['value'];\n\n        if (!imageAlreadyProcessed) {\n          files.set(key, node['value']);\n        }\n\n        if (fetchpriorityThisImage) {\n          node['value'] = node['value'].replace(\n            /<img /g,\n            '<img loading=\"eager\" fetchpriority=\"high\" ',\n          );\n        } else {\n          node['value'] = node['value'].replace(\n            /<img /g,\n            '<img loading=\"lazy\" ',\n          );\n        }\n      }\n    });\n  };\n}\n\nmodule.exports = imageFetchPriorityRehypePluginFactory;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The above plugin runs over the AST of the MDX file and adds ",(0,o.jsx)(t.code,{children:'fetchpriority="high"'})," to the first image. It also adds ",(0,o.jsx)(t.code,{children:'loading="eager"'})," to the first image and ",(0,o.jsx)(t.code,{children:'loading="lazy"'})," to all other images."]}),"\n",(0,o.jsxs)(t.p,{children:["Interestingly, when I was writing it I discovered that the visitor is invoked multiple times for the same elements. I'm not quite sure why, but the logic in the plugin uses a ",(0,o.jsx)(t.code,{children:"Map"})," to keep track of which images have already been processed. TL;DR it works!"]}),"\n",(0,o.jsxs)(t.p,{children:["I then added the plugin to the ",(0,o.jsx)(t.code,{children:"docusaurus.config.js"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"//@ts-check\nconst imageFetchPriorityRehypePlugin = require('./image-fetchpriority-rehype-plugin');\n\n/** @type {import('@docusaurus/types').Config} */\nconst config = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      /** @type {import('@docusaurus/preset-classic').Options} */\n      ({\n        // ...\n        blog: {\n          // ...\n          rehypePlugins: [imageFetchPriorityRehypePlugin],\n          // ...\n        },\n        // ...\n      }),\n    ],\n  ],\n  // ...\n};\n\nmodule.exports = config;\n"})}),"\n",(0,o.jsx)(t.h2,{id:"what-does-it-look-like-when-applied",children:"What does it look like when applied?"}),"\n",(0,o.jsxs)(t.p,{children:["Now we have this in place, if we run the same test with ",(0,o.jsx)(t.a,{href:"https://pagespeed.web.dev/",children:"pagespeed"})," we have different results:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"screenshot showing fetchpriority=&quot;high&quot; has been applied to LCP image",src:i(22236).A+"",width:"2016",height:"1087",loading:"lazy"})}),"\n",(0,o.jsxs)(t.p,{children:["We're now ",(0,o.jsx)(t.em,{children:"not"})," lazy loading the image and we're also making it a high priority fetch. Great news!"]}),"\n",(0,o.jsxs)(t.p,{children:["I'd like for this to be the default behaviour for Docusaurus. I'm not sure if it's possible to do this in a way that's straightforward. ",(0,o.jsx)(t.a,{href:"https://github.com/facebook/docusaurus/issues/8552",children:"I've raised an issue on the Docusaurus repo to see if it's possible"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},50802:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/title-image-f8a29b4095d1ca4087fd83550d8b1b1c.png"},56511:e=>{e.exports=JSON.parse('{"permalink":"/docusaurus-improve-core-web-vitals-fetchpriority","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-01-18-docusaurus-improve-core-web-vitals-fetchpriority/index.md","source":"@site/blog/2023-01-18-docusaurus-improve-core-web-vitals-fetchpriority/index.md","title":"Docusaurus: improving Core Web Vitals with fetchpriority","description":"By using `fetchpriority` on your Largest Contentful Paint you can improve your Core Web Vitals. This post implements that with Docusaurus.","date":"2023-01-18T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/tags/docusaurus","description":"The Docusaurus static site generator."}],"readingTime":5.24,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"docusaurus-improve-core-web-vitals-fetchpriority","title":"Docusaurus: improving Core Web Vitals with fetchpriority","authors":"johnnyreilly","tags":["docusaurus"],"image":"./title-image.png","description":"By using `fetchpriority` on your Largest Contentful Paint you can improve your Core Web Vitals. This post implements that with Docusaurus.","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Image Optimisation with the TinyPNG API","permalink":"/image-optimisation-tinypng-api"},"nextItem":{"title":"How I ruined my SEO","permalink":"/how-i-ruined-my-seo"}}')},71905:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/title-image-f8a29b4095d1ca4087fd83550d8b1b1c.png"},82516:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/screenshot-largest-contentful-paint-image-lazy-loaded-d35874ba942d893ab14c16b5048c8567.webp"}}]);