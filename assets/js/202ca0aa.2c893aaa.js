"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[63157],{12890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var s=t(94869),r=t(74848),i=t(28453);const o={slug:"typescript-eslint-no-unused-vars",title:"ESLint no-unused-vars: _ ignore prefix",authors:"johnnyreilly",tags:["typescript","javascript","eslint"],image:"./title-image.png",description:"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _",hide_table_of_contents:!1},a=void 0,d={image:t(92344).A,authorsImageUrls:[void 0]},l=[{value:"When would you want to ignore unused variables?",id:"when-would-you-want-to-ignore-unused-variables",level:2},{value:"The TypeScript settings",id:"the-typescript-settings",level:2},{value:"The ESLint settings",id:"the-eslint-settings",level:2},{value:"The <code>ignoreRestSiblings</code> setting",id:"the-ignorerestsiblings-setting",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["I'm a longtime user of TypeScripts ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#noUnusedLocals",children:(0,r.jsx)(n.code,{children:"noUnusedLocals"})})," and ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#noUnusedParameters",children:(0,r.jsx)(n.code,{children:"noUnusedParameters"})})," settings. I like to avoid leaving unused variables in my code; these compiler options help me do that."]}),"\n",(0,r.jsxs)(n.p,{children:["I use ESLint alongside TypeScript. The ",(0,r.jsx)(n.a,{href:"https://eslint.org/docs/latest/rules/no-unused-vars",children:(0,r.jsx)(n.code,{children:"no-unused-vars"})})," rule provides similar functionality to TypeScripts ",(0,r.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,r.jsx)(n.code,{children:"noUnusedParameters"})," settings, but has more power and more flexibility. For instance, ",(0,r.jsx)(n.code,{children:"no-unused-vars"})," can catch unused error variables; TypeScript's ",(0,r.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,r.jsx)(n.code,{children:"noUnusedParameters"})," cannot."]}),"\n",(0,r.jsxs)(n.p,{children:["One thing that I missed when switching to the ESLint option is that, with ",(0,r.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,r.jsx)(n.code,{children:"noUnusedParameters"}),", you can simply ignore unused variables by prefixing a variable with the ",(0,r.jsx)(n.code,{children:"_"})," character. That's right, sometimes I want to declare a variable that I know I'm not going to use, and I want to do that without getting shouted at by the linter."]}),"\n",(0,r.jsxs)(n.p,{children:["It turns out you can get ESLint to respect the TypeScript default of ignoring variables prefixed with ",(0,r.jsx)(n.code,{children:"_"}),"; ",(0,r.jsxs)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint/issues/8464#issuecomment-1943325441",children:["it's just not the default configuration for ",(0,r.jsx)(n.code,{children:"no-unused-vars"})]}),". But with a little configuration we can have it. This post is a quick guide to how to implement that configuration."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"title image reading &quot;From TypeScript noUnusedLocals and noUnusedParameters to ESLint no-unused-vars (with _ prefix)&quot; with the ESLint and TypeScript logo",src:t(72871).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,r.jsx)(n.h2,{id:"when-would-you-want-to-ignore-unused-variables",children:"When would you want to ignore unused variables?"}),"\n",(0,r.jsx)(n.p,{children:"There are various scenarios when I want to ignore unused variables. Here are a few:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"I'm writing a function but I'm not using all of the parameters yet. I plan to use them later, but I want to declare them now so I don't forget about them."}),"\n",(0,r.jsx)(n.li,{children:'An ignored variable can be a form of documentation. It can be a way to say "I know this is here, but I\'m not using it intentionally".'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Not everyone will agree with these reasons, but they work for me in certain situations."}),"\n",(0,r.jsxs)(n.p,{children:["Just to offer the counterpoint, let me quote ",(0,r.jsx)(n.a,{href:"https://github.com/bradzacher",children:"Brad Zacher"})," who works on TypeScript ESLint:"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"On the one hand it is nice to have a short-hand to ignore things."}),"\n",(0,r.jsx)(n.p,{children:"On the other hand it is terrible having a short-hand to ignore things - it's a single character that's easy to miss in code review - so it's easy to sneak into a commit."}),"\n",(0,r.jsx)(n.p,{children:"For example I recently reviewed a PR where someone innocently did something like"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { promisify } from 'node:util';\nimport { exec as _exec } from 'node:child_process';\n\nconst exec = promisify(_exec);\n"})}),"\n",(0,r.jsx)(n.p,{children:"And they didn't realise that doing this would define a variable that would never get flagged if it's unused! Really bad!"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Brad has a valid point, but let's say you've decided to ",(0,r.jsx)(n.code,{children:"--ignore-pattern 'brad'"}),", and want to make use of the ",(0,r.jsx)(n.code,{children:"_"})," prefix anyway. (Sorry Brad!) Here's how you can do it."]}),"\n",(0,r.jsx)(n.h2,{id:"the-typescript-settings",children:"The TypeScript settings"}),"\n",(0,r.jsxs)(n.p,{children:["I mentioned that I like to use the TypeScript ",(0,r.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,r.jsx)(n.code,{children:"noUnusedParameters"})," settings. Here's how they would be configured in a ",(0,r.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "noUnusedLocals": true,\n    "noUnusedParameters": true\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Given we're moving to ESLint so we'll explicitly turn these off in our ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," so we can use ESLint to do the same job:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "noUnusedLocals": false,\n    "noUnusedParameters": false\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"the-eslint-settings",children:"The ESLint settings"}),"\n",(0,r.jsxs)(n.p,{children:["With those off in TypeScript, we can now configure ESLint to respect the ",(0,r.jsx)(n.code,{children:"_"})," prefix. Here's how you can do that in your ",(0,r.jsx)(n.code,{children:".eslintrc.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "@typescript-eslint/no-unused-vars": [\n      "error",\n      {\n        "args": "all",\n        "argsIgnorePattern": "^_",\n        "caughtErrors": "all",\n        "caughtErrorsIgnorePattern": "^_",\n        "destructuredArrayIgnorePattern": "^_",\n        "varsIgnorePattern": "^_",\n        "ignoreRestSiblings": true\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"argsIgnorePattern"}),", ",(0,r.jsx)(n.code,{children:"caughtErrorsIgnorePattern"}),", ",(0,r.jsx)(n.code,{children:"destructuredArrayIgnorePattern"}),", and ",(0,r.jsx)(n.code,{children:"varsIgnorePattern"})," settings are the ones that respect the ",(0,r.jsx)(n.code,{children:"_"})," prefix. You have to set them all to ",(0,r.jsx)(n.code,{children:"^_"})," to make it work. ",(0,r.jsx)(n.code,{children:"^_"})," is a regular expression that matches any string that starts with an underscore. So if you actually had a different convention for ignoring variables, you could change this to match your convention."]}),"\n",(0,r.jsxs)(n.p,{children:["Incidentally, you have to explicitly set ",(0,r.jsx)(n.code,{children:"args"})," to ",(0,r.jsx)(n.code,{children:'"all"'})," and ",(0,r.jsx)(n.code,{children:"caughtErrors"})," to ",(0,r.jsx)(n.code,{children:'"all"'})," to make the ",(0,r.jsx)(n.code,{children:"argsIgnorePattern"}),"/",(0,r.jsx)(n.code,{children:"caughtErrorsIgnorePattern"})," settings work. If you don't, the settings are ignored."]}),"\n",(0,r.jsxs)(n.p,{children:["There's an ",(0,r.jsx)(n.code,{children:"ignoreRestSiblings"})," setting specified above that we'll get to in a minute. First of all, let's see how the linting we've activated works in practice. Here's some code that demonstrates the settings in action:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export function demoTheProblems(\n  unusedAndReportedArg: boolean,\n  _unusedButIgnoredArg: boolean, // argsIgnorePattern\n  someArray: string[],\n) {\n  try {\n    const unusedAndReportedVar = true;\n    const _unusedAndButIgnoredVar = false; // varsIgnorePattern\n\n    const [\n      unusedAndReportedDestructuredArray,\n      _unusedButIgnoredDestructuredArray, // destructuredArrayIgnorePattern\n    ] = someArray;\n    // caughtErrors\n  } catch (unusedAndReportedErr) {\n    // ...\n  }\n  try {\n    // caughtErrorsIgnorePattern\n  } catch (_unusedButIgnoredErr) {\n    // ...\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this code, the ",(0,r.jsx)(n.code,{children:"unusedAndReportedArg"}),", ",(0,r.jsx)(n.code,{children:"unusedAndReportedVar"}),", ",(0,r.jsx)(n.code,{children:"unusedAndReportedDestructuredArray"}),", and ",(0,r.jsx)(n.code,{children:"unusedAndReportedErr"})," variables are all reported as unused. ESLint considers them errors and shouts about them."]}),"\n",(0,r.jsxs)(n.p,{children:["By contrast, the ",(0,r.jsx)(n.code,{children:"_unusedButIgnoredArg"}),", ",(0,r.jsx)(n.code,{children:"_unusedAndButIgnoredVar"}),", ",(0,r.jsx)(n.code,{children:"_unusedButIgnoredDestructuredArray"}),", and ",(0,r.jsx)(n.code,{children:"_unusedButIgnoredErr"})," variables are all ignored, because they are prefixed with an underscore. ESLint notices them but lets them past."]}),"\n",(0,r.jsx)(n.p,{children:"If we run ESLint on this code, we get the following output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"   2:3   error  'unusedAndReportedArg' is defined but never used. Allowed unused args must match /^_/u                                                             @typescript-eslint/no-unused-vars\n   7:11  error  'unusedAndReportedVar' is assigned a value but never used. Allowed unused vars must match /^_/u                                                    @typescript-eslint/no-unused-vars\n  11:7   error  'unusedAndReportedDestructuredArray' is assigned a value but never used. Allowed unused elements of array destructuring patterns must match /^_/u  @typescript-eslint/no-unused-vars\n  15:12  error  'unusedAndReportedErr' is defined but never used. Allowed unused args must match /^_/u                                                             @typescript-eslint/no-unused-vars\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Perfect! This is exactly what we wanted. You can see this in action in the ",(0,r.jsx)(n.a,{href:"https://typescript-eslint.io/play/#ts=5.3.3&fileType=.tsx&code=KYDwDg9gTgLgBAMwK4DsDGMCWEVwCbAC2EAKgBbAAKUEARgDZEDOAFALABQccqSTweAIIo8AJWCRYAwVADmALji0IERgEMUAGk7cA%2Br354AQkhgBJWSmjS5i5auAbNcAPQu4auUwtWoVNTAwwFAoOnBMEITAMlBqAJ6KTDBQmCiyANoAupwAlHAA3mHJcQVh3Gg4STwofNIi4pJBeABqnnAAvHDJSMAA3GVwFShV%2BjWGwsamPtYtbZ0IavT8va7uAG6e3pbWlAFBIZwDQ1XpA9wGdWIS0E0AIsBJUEgYSH5CULFx2lzcv6O1k3M2ze90ezxgrxsn1W%2BAe3Rebxi8Wmfl2gWCoR%2B3EyHXCkWiH3i-Q4YQAvoMAmgyHAWBchPVrlI8ABRD55fIwtBqJCyMgwVk0KBMAZuOAAOglZKKUBKhR%2B5K5MCpNP%2BhhMQN8AgF7M53N5-I%2B0C2mrR%2B0xvxhErFUo4pM4QA&eslintrc=N4KABGBEBOCuA2BTAzpAXGUEKQAIBcBPABxQGNoBLY-AWhXkoDt8B6Jge1tidmUQAmtAG4BDaKgwBtcNhyJo0DtEgAaWXKxzskcQHNJUUfHhqN23dAMBJPZ2iIACqPz4FTdFAB6AfTPadMlFYPQALfABRRWVDXRN-AKggkPCopQlbeycXN2gPDEhfBIDIARR8ODJ8WAcBAEFFUUJM5WzXd09Cv3VEqDEMu1bndrzOop7EyEpBhwAlcoBlSgAjRiYDTwrYRHMIAF9zAF1ZA72gA&tsconfig=N4KABGBEDGD2C2AHAlgGwKYCcDyiAuysAdgM6QBcYoEEkRsAqkQK4noAmAMrNAIaplKAM35sANOBp1GLNuwAKvTL3jo8WQWBED0kgL4g9QA&tokens=false",children:"playground"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"the-ignorerestsiblings-setting",children:["The ",(0,r.jsx)(n.code,{children:"ignoreRestSiblings"})," setting"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://eslint.org/docs/latest/rules/no-unused-vars#ignorerestsiblings",children:(0,r.jsx)(n.code,{children:"ignoreRestSiblings"})})," setting is also useful. You may find the need to use the rest operator in a destructuring assignment to omit properties from an object and hold onto the rest. Here's an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const { formattedDate, date, ...totals } = payload;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this case I don't want to use ",(0,r.jsx)(n.code,{children:"formattedDate"})," or ",(0,r.jsx)(n.code,{children:"date"})," but I do want to use ",(0,r.jsx)(n.code,{children:"totals"}),". I can use the ",(0,r.jsx)(n.code,{children:"ignoreRestSiblings"})," setting to ignore the unused variables without even needing a ",(0,r.jsx)(n.code,{children:"_"})," prefix or similar. So I do."]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["I hope this post has been helpful. I've shown you how to configure ESLint to respect the TypeScript default of ignoring variables prefixed with ",(0,r.jsx)(n.code,{children:"_"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Many thanks to Brad Zacher for his input on this post. You can read our discussion on the TypeScript ESLint GitHub repo ",(0,r.jsx)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint/issues/8464",children:"here"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},72871:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/title-image-84e07ec452e3456b556977d64d3c682e.png"},92344:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/title-image-84e07ec452e3456b556977d64d3c682e.png"},94869:e=>{e.exports=JSON.parse('{"permalink":"/typescript-eslint-no-unused-vars","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-02-18-typescript-eslint-no-unused-vars/index.md","source":"@site/blog/2024-02-18-typescript-eslint-no-unused-vars/index.md","title":"ESLint no-unused-vars: _ ignore prefix","description":"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _","date":"2024-02-18T00:00:00.000Z","tags":[{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."},{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."},{"inline":false,"label":"ESLint","permalink":"/tags/eslint","description":"The ESLint linter."}],"readingTime":5.33,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"typescript-eslint-no-unused-vars","title":"ESLint no-unused-vars: _ ignore prefix","authors":"johnnyreilly","tags":["typescript","javascript","eslint"],"image":"./title-image.png","description":"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Multiline strings in .env files","permalink":"/multiline-strings-dot-env-files"},"nextItem":{"title":"Using Bun in Azure Pipelines","permalink":"/using-bun-in-azure-pipelines"}}')}}]);