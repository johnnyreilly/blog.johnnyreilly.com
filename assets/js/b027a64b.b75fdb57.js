"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["72567"],{30439:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var i=t(32009),s=t(85893),r=t(50065);let o={slug:"typescript-eslint-no-unused-vars",title:"ESLint no-unused-vars: _ ignore prefix",authors:"johnnyreilly",tags:["typescript","javascript","eslint"],image:"./title-image.png",description:"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _",hide_table_of_contents:!1},a=void 0,l={image:t(9612).Z,authorsImageUrls:[void 0]},c=[];function u(e){let n={a:"a",code:"code",img:"img",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["I'm a longtime user of TypeScripts ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#noUnusedLocals",children:(0,s.jsx)(n.code,{children:"noUnusedLocals"})})," and ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#noUnusedParameters",children:(0,s.jsx)(n.code,{children:"noUnusedParameters"})})," settings. I like to avoid leaving unused variables in my code; these compiler options help me do that."]}),"\n",(0,s.jsxs)(n.p,{children:["I use ESLint alongside TypeScript. The ",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/rules/no-unused-vars",children:(0,s.jsx)(n.code,{children:"no-unused-vars"})})," rule provides similar functionality to TypeScripts ",(0,s.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,s.jsx)(n.code,{children:"noUnusedParameters"})," settings, but has more power and more flexibility. For instance, ",(0,s.jsx)(n.code,{children:"no-unused-vars"})," can catch unused error variables; TypeScript's ",(0,s.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,s.jsx)(n.code,{children:"noUnusedParameters"})," cannot."]}),"\n",(0,s.jsxs)(n.p,{children:["One thing that I missed when switching to the ESLint option is that, with ",(0,s.jsx)(n.code,{children:"noUnusedLocals"})," and ",(0,s.jsx)(n.code,{children:"noUnusedParameters"}),", you can simply ignore unused variables by prefixing a variable with the ",(0,s.jsx)(n.code,{children:"_"})," character. That's right, sometimes I want to declare a variable that I know I'm not going to use, and I want to do that without getting shouted at by the linter."]}),"\n",(0,s.jsxs)(n.p,{children:["It turns out you can get ESLint to respect the TypeScript default of ignoring variables prefixed with ",(0,s.jsx)(n.code,{children:"_"}),"; ",(0,s.jsxs)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint/issues/8464#issuecomment-1943325441",children:["it's just not the default configuration for ",(0,s.jsx)(n.code,{children:"no-unused-vars"})]}),". But with a little configuration we can have it. This post is a quick guide to how to implement that configuration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"title image reading &quot;From TypeScript noUnusedLocals and noUnusedParameters to ESLint no-unused-vars (with _ prefix)&quot; with the ESLint and TypeScript logo",src:t(18128).Z+"",width:"800",height:"450",loading:"eager",fetchpriority:"high"})})]})}function d(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9612:function(e,n,t){t.d(n,{Z:function(){return i}});let i=t.p+"assets/images/title-image-84e07ec452e3456b556977d64d3c682e.png"},18128:function(e,n,t){t.d(n,{Z:function(){return i}});let i=t.p+"assets/images/title-image-84e07ec452e3456b556977d64d3c682e.png"},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return o}});var i=t(67294);let s={},r=i.createContext(s);function o(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},32009:function(e){e.exports=JSON.parse('{"permalink":"/typescript-eslint-no-unused-vars","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2024-02-18-typescript-eslint-no-unused-vars/index.md","source":"@site/blog/2024-02-18-typescript-eslint-no-unused-vars/index.md","title":"ESLint no-unused-vars: _ ignore prefix","description":"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _","date":"2024-02-18T00:00:00.000Z","tags":[{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."},{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."},{"inline":false,"label":"ESLint","permalink":"/tags/eslint","description":"The ESLint linter."}],"readingTime":5.225,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"typescript-eslint-no-unused-vars","title":"ESLint no-unused-vars: _ ignore prefix","authors":"johnnyreilly","tags":["typescript","javascript","eslint"],"image":"./title-image.png","description":"ESLints no-unused-vars is more flexible than TypeScript noUnusedLocals and noUnusedParameters. Here is how to make respect the TypeScript default of ignoring variables prefixed with _","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Multiline strings in .env files","permalink":"/multiline-strings-dot-env-files"},"nextItem":{"title":"Using Bun in Azure Pipelines","permalink":"/using-bun-in-azure-pipelines"}}')}}]);