"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[87391],{17874:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var s=t(41313),n=t(74848),r=t(28453);const i={slug:"bicep-user-defined-types-and-bash-single-item-arrays",title:"Bicep user defined types and Bash single item arrays",authors:"johnnyreilly",tags:["bicep"],image:"./title-image.png",description:"The error \"Expected a value of type 'Array', but received a value of type 'String'\", presents when wrestling with the AZ CLI, Bash single item arrays and Bicep.",hide_table_of_contents:!1},l=void 0,o={image:t(27344).A,authorsImageUrls:[void 0]},d=[{value:"Expected a value of type &#39;Array&#39;, but received a value of type &#39;String&#39;",id:"expected-a-value-of-type-array-but-received-a-value-of-type-string",level:2},{value:"Workaround: JSON and Bicep user defined types",id:"workaround-json-and-bicep-user-defined-types",level:2},{value:"Conclusion",id:"conclusion",level:2}];function p(e){const a={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.p,{children:"When sending a single item array to a Bicep template you may get an error like this:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"ERROR: InvalidTemplate - Deployment template validation failed: 'Template parameter 'allowedIPAddresses' was provided an invalid value. Expected a value of type 'Array', but received a value of type 'String'.\n"})}),"\n",(0,n.jsx)(a.p,{children:"This is down to the fact that Bash arrays when used with the Azure CLI can be a little surprising. If we initialise a single item array then it's not an array. It's a string. This is a bit of a pain when you're trying to pass a single item array to a Bicep template. It's possible to work around this with JSON and Bicep user defined types. Let's see how."}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"title image reading &quot;Bicep user defined types and Bash single item arrays&quot; with a Bicep logo",src:t(37515).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,n.jsx)(a.h2,{id:"expected-a-value-of-type-array-but-received-a-value-of-type-string",children:"Expected a value of type 'Array', but received a value of type 'String'"}),"\n",(0,n.jsxs)(a.p,{children:["I had a Bicep template that took a parameter of type ",(0,n.jsx)(a.code,{children:"array"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bicep",children:"param allowedIPAddresses array\n"})}),"\n",(0,n.jsx)(a.p,{children:"I was invoking this template using the Azure CLI, in a Bash script. (Technically using GitHub Actions; but that's somewhat by the by.) I wanted to pass a single item array to the template. I did this:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"az deployment group create \\\n  --resource-group testgroup \\\n  --template-file <path-to-template> \\\n  --parameters allowedIPAddresses='(\"8.8.8.8\")'\n"})}),"\n",(0,n.jsx)(a.p,{children:"Surprisingly, this resulted in the error:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"ERROR: InvalidTemplate - Deployment template validation failed: 'Template parameter 'allowedIPAddresses' was provided an invalid value. Expected a value of type 'Array', but received a value of type 'String'.\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Despite following the ",(0,n.jsx)(a.a,{href:"https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-cli#inline-parameters",children:"documentation for passing arrays"}),", passing a single item array to the template did not work."]}),"\n",(0,n.jsxs)(a.p,{children:["I'm not the only person who has wrestled with this. There's a ",(0,n.jsx)(a.a,{href:"https://github.com/Azure/bicep/issues/5936",children:"GitHub issue"})," on the Bicep repo that discusses this. The issue is that Bash arrays when used with the Azure CLI can be a little surprising. If I initialise a single item array then it's not an array. It's a string. This is a bit of a pain when you're trying to pass a single item array to a Bicep template."]}),"\n",(0,n.jsx)(a.h2,{id:"workaround-json-and-bicep-user-defined-types",children:"Workaround: JSON and Bicep user defined types"}),"\n",(0,n.jsx)(a.p,{children:"There are ways to make the array syntax work, but they're not very intuitive. I wanted to avoid this; I put a premium on understanding my code and make choices to optimise for that. The solution I came up with was to use JSON and Bicep user defined types."}),"\n",(0,n.jsx)(a.p,{children:"Passing JSON to the Azure CLI is pretty easy. You just need to wrap the JSON in single quotes. I could do this:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'anArrayInJSON=\'{"allowedIPAddresses":["8.8.8.8"]}\'\naz deployment group create \\\n    --name showJSON  \\\n    --resource-group myResourceGroup \\\n    --template-file $templateFile \\\n    --parameters anArrayInJSON="$anArrayInJSON"\n'})}),"\n",(0,n.jsx)(a.p,{children:"The syntax is very simple and, as we can see, it's possible to have properties which are arrays. This is great. I can pass a JSON object to the Azure CLI and it'll be parsed correctly. So I can do this:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bicep",children:"param anArrayInJSON object\n\n//...\n\nvar allowedIPAddresses = anArrayInJSON.allowedIPAddresses\n"})}),"\n",(0,n.jsxs)(a.p,{children:["This works, but I miss the type safety of Bicep. I want to be able to say that ",(0,n.jsx)(a.code,{children:"allowedIPAddresses"})," is an array. And if I can go further, I'd like to say it's a ",(0,n.jsx)(a.code,{children:"string"})," array also. I can do this with a ",(0,n.jsx)(a.a,{href:"https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/user-defined-data-types",children:"Bicep user defined type"}),". It's worth noting that user defined types are a new feature in Bicep and you'll need to use the latest version of Bicep to use them and opt in by putting this option in your ",(0,n.jsx)(a.code,{children:"bicepconfig.json"})," file:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json",children:'{\n  "experimentalFeaturesEnabled": {\n    "userDefinedTypes": true\n  }\n}\n'})}),"\n",(0,n.jsxs)(a.p,{children:["With that in place we can redefine ",(0,n.jsx)(a.code,{children:"anArrayInJSON"})," as a user defined type:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bicep",children:"param anArrayInJSON {\n  allowedIPAddresses: string[]\n}\n"})}),"\n",(0,n.jsxs)(a.p,{children:["This is a little more verbose, but it's a lot more explicit. We're saying that ",(0,n.jsx)(a.code,{children:"anArrayInJSON"})," is an object with a property called ",(0,n.jsx)(a.code,{children:"allowedIPAddresses"})," which is an array of strings. This is great. We can now use ",(0,n.jsx)(a.code,{children:"anArrayInJSON.allowedIPAddresses"})," in our template and we'll get type safety. We'll also get helpful error messages if we pass the wrong type of data to the template:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"ERROR: InvalidTemplate - Deployment template validation failed: 'Template parameter 'anArrayInJSON.allowedIPAddresses' was provided an invalid value. Expected a value of type 'Array', but received a value of type 'Null'. Please see https://aka.ms/arm-create-parameter-file for usage details.'.\n"})}),"\n",(0,n.jsx)(a.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsxs)(a.p,{children:["Interestingly, I'd say that I'm unlikely to ever use a Bicep parameter of type ",(0,n.jsx)(a.code,{children:"array"})," again, precisely for the reason that I've outlined here. So none of this:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bicep",children:"param anArray array\n"})}),"\n",(0,n.jsx)(a.p,{children:"And none of its user defined type equivalent:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bicep",children:"param anArray string[]\n"})}),"\n",(0,n.jsx)(a.p,{children:"I'll probably use the approach I've outlined here instead. I'll pass a JSON object to the template and then use a user defined type to define the properties of that object. This is a little more verbose, but it's a lot more explicit. I think that's a good trade-off."})]})}function c(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},27344:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/title-image-ad052f8c8859dde8b4c7d099dcd82943.png"},28453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>l});var s=t(96540);const n={},r=s.createContext(n);function i(e){const a=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:a},e.children)}},37515:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/title-image-ad052f8c8859dde8b4c7d099dcd82943.png"},41313:e=>{e.exports=JSON.parse('{"permalink":"/bicep-user-defined-types-and-bash-single-item-arrays","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-04-05-bicep-user-defined-types-and-bash-single-item-arrays/index.md","source":"@site/blog/2023-04-05-bicep-user-defined-types-and-bash-single-item-arrays/index.md","title":"Bicep user defined types and Bash single item arrays","description":"The error \\"Expected a value of type \\\\\'Array\\\\\', but received a value of type \\\\\'String\\\\\'\\", presents when wrestling with the AZ CLI, Bash single item arrays and Bicep.","date":"2023-04-05T00:00:00.000Z","tags":[{"inline":false,"label":"Bicep","permalink":"/tags/bicep","description":"The Bicep language for Azure Resource Manager templates."}],"readingTime":4.12,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"bicep-user-defined-types-and-bash-single-item-arrays","title":"Bicep user defined types and Bash single item arrays","authors":"johnnyreilly","tags":["bicep"],"image":"./title-image.png","description":"The error \\"Expected a value of type \\\\\'Array\\\\\', but received a value of type \\\\\'String\\\\\'\\", presents when wrestling with the AZ CLI, Bash single item arrays and Bicep.","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Docusaurus: Structured Data FAQs with MDX","permalink":"/docusaurus-structured-data-faqs-mdx"},"nextItem":{"title":"Playwright, GitHub Actions and Azure Static Web Apps staging environments","permalink":"/playwright-github-actions-and-azure-static-web-apps-staging-environments"}}')}}]);