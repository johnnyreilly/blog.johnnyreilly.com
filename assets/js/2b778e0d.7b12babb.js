"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[35072],{1541:e=>{e.exports=JSON.parse('{"permalink":"/debugging-aspnet-core-in-vs-or-code","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2017-03-28-debugging-aspnet-core-in-vs-or-code/index.md","source":"@site/blog/2017-03-28-debugging-aspnet-core-in-vs-or-code/index.md","title":"Debugging ASP.Net Core in VS or Code","description":"Learn how John became a fan of VS Code for TypeScript and how they managed to debug ASP.Net Core using the extension for C#.","date":"2017-03-28T00:00:00.000Z","tags":[{"inline":false,"label":"VS Code","permalink":"/tags/vs-code","description":"The Visual Studio Code editor."},{"inline":false,"label":"Visual Studio","permalink":"/tags/visual-studio","description":"The Visual Studio IDE."},{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":4.01,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"debugging-aspnet-core-in-vs-or-code","title":"Debugging ASP.Net Core in VS or Code","authors":"johnnyreilly","tags":["vs code","visual studio","asp.net"],"hide_table_of_contents":false,"description":"Learn how John became a fan of VS Code for TypeScript and how they managed to debug ASP.Net Core using the extension for C#."},"unlisted":false,"prevItem":{"title":"I\'m looking for work!","permalink":"/im-looking-for-work"},"nextItem":{"title":"Under the Duck: An Afternoon in Open Source","permalink":"/under-duck-afternoon-in-open-source"}}')},4457:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/firstgo-6ca57e5f2c4f6099896ab9461625e4f7.webp"},28365:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/secondgo-f682959513f67dc34adb0a717122c5a5.webp"},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var t=o(96540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},52939:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});var t=o(1541),i=o(74848),a=o(28453);const s={slug:"debugging-aspnet-core-in-vs-or-code",title:"Debugging ASP.Net Core in VS or Code",authors:"johnnyreilly",tags:["vs code","visual studio","asp.net"],hide_table_of_contents:!1,description:"Learn how John became a fan of VS Code for TypeScript and how they managed to debug ASP.Net Core using the extension for C#."},r=void 0,l={authorsImageUrls:[void 0]},d=[];function c(e){const n={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["I've been using Visual Studio for a long time. Very good it is too. However, it is heavyweight; it does far more than I need. What I really want when I'm working is a fast snappy editor, with intellisense and debugging. What I've basically described is ",(0,i.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"VS Code"}),". It rocks and has long become my go-to editor for TypeScript."]}),"\n",(0,i.jsx)(n.p,{children:"Since I'm a big C# fan as well I was delighted that editing C# was also possible in Code. What I want now is to be able to debug ASP.Net Core in Visual Studio OR VS Code. Can it be done? Let's see...."}),"\n",(0,i.jsxs)(n.p,{children:["I fire up Visual Studio and ",(0,i.jsx)(n.code,{children:"File -&gt; New Project"})," (yes it's a verb now). Select .NET Core and then ASP.Net Core Web Application. OK. We'll go for a Web Application. Let's not bother with authentication. OK. Wait a couple of seconds and Visual Studio serves up a new project. Hit F5 and we're debugging in Visual Studio."]}),"\n",(0,i.jsx)(n.p,{children:"So far, so straightforward. What will VS Code make of this?"}),"\n",(0,i.jsxs)(n.p,{children:['I cd my way to the root of my new ASP.Net Core Web Application and type the magical phrase "code .". Up it fires. I feel lucky, let\'s hit "F5". Huh, a dropdown shows up saying ',(0,i.jsx)(n.code,{children:'"Select Environment"'})," and offering me the options of Chrome and Node. Neither do I want. It's about this time I remember this is a clean install of VS Code and doesn't yet have the C# extension installed. In fact, if I open a C# file it up it tells me and recommends that I install. Well that's nice. I take it up on the kind offer; install and reload."]}),"\n",(0,i.jsx)(n.p,{children:'When it comes back up I see the following entries in the "output" tab:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"Updating C# dependencies...\nPlatform: win32, x86_64 (win7-x64)\n\nDownloading package 'OmniSharp (.NET 4.6 / x64)' (20447 KB) .................... Done!\nDownloading package '.NET Core Debugger (Windows / x64)' (39685 KB) .................... Done!\n\nInstalling package 'OmniSharp (.NET 4.6 / x64)'\nInstalling package '.NET Core Debugger (Windows / x64)'\n\nFinished\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Note that mention of "debugger" there? Sounds super-promising. There\'s also some prompts: ',(0,i.jsx)(n.code,{children:"\"There are unresolved dependencies from 'WebApplication1/WebApplication1.csproj'. Please execute the restore command to continue\""})]}),"\n",(0,i.jsxs)(n.p,{children:["So it wants me to ",(0,i.jsx)(n.code,{children:"dotnet restore"}),". It's even offering to do that for me! Have at you; I let it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"Welcome to .NET Core!\n---------------------\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\n\nTelemetry\n--------------\nThe .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include command-line arguments. The data is collected by Microsoft and shared with the community.\nYou can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.\nYou can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.\n\nConfiguring...\n-------------------\nA command is running to initially populate your local package cache, to improve restore speed and enable offline access. This command will take up to a minute to complete and will only happen once.\nDecompressing Decompressing 100% 4026 ms\nExpanding 100% 34814 ms\n  Restoring packages for c:\\Source\\Debugging\\WebApplication1\\WebApplication1\\WebApplication1.csproj...\n  Restoring packages for c:\\Source\\Debugging\\WebApplication1\\WebApplication1\\WebApplication1.csproj...\n  Restore completed in 734.05 ms for c:\\Source\\Debugging\\WebApplication1\\WebApplication1\\WebApplication1.csproj.\n  Generating MSBuild file c:\\Source\\Debugging\\WebApplication1\\WebApplication1\\obj\\WebApplication1.csproj.nuget.g.props.\n  Writing lock file to disk. Path: c:\\Source\\Debugging\\WebApplication1\\WebApplication1\\obj\\project.assets.json\n  Restore completed in 1.26 sec for c:\\Source\\Debugging\\WebApplication1\\WebApplication1\\WebApplication1.csproj.\n\n  NuGet Config files used:\n      C:\\Users\\johnr\\AppData\\Roaming\\NuGet\\NuGet.Config\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\n\n  Feeds used:\n      https://api.nuget.org/v3/index.json\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\nDone: 0.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The other prompt says ",(0,i.jsx)(n.code,{children:"\"Required assets to build and debug are missing from 'WebApplication1'. Add them?\""}),". This also sounds very promising and I give it the nod. This creates a ",(0,i.jsx)(n.code,{children:".vscode"})," directory and 2 enclosed files; ",(0,i.jsx)(n.code,{children:"launch.json"})," and ",(0,i.jsx)(n.code,{children:"tasks.json"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["So lets try that F5 thing again... ",(0,i.jsx)(n.a,{href:"http://localhost:5000/",children:"http://localhost:5000/"})," is now serving the same app. That looks pretty good. So lets add a breakpoint to the ",(0,i.jsx)(n.code,{children:"HomeController"})," and see if we can hit it:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:o(4457).A+"",width:"640",height:"347",loading:"lazy"})}),"\n",(0,i.jsxs)(n.p,{children:["Well I can certainly add a breakpoint but all those red squigglies are unnerving me. Let's clean the slate. If you want to simply do that in VS Code hold down ",(0,i.jsx)(n.code,{children:"CTRL+SHIFT+P"}),' and then type "reload". Pick "Reload window". A couple of seconds later we\'re back in and Code is looking much happier. Can we hit our breakpoint?']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:o(28365).A+"",width:"640",height:"347",loading:"lazy"})}),"\n",(0,i.jsx)(n.p,{children:"Yes we can! So you're free to develop in either Code or VS; the choice is yours. I think that's pretty awesome - and well done to all the peeople behind Code who've made this a pretty seamless experience!"})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);