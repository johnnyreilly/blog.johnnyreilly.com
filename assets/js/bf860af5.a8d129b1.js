"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[27371],{1052:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/title-image-6d961844b168cc54d38548ca0fff8a93.png"},17249:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/screenshot-devto-apikey-cacee8316051553f62a90adaca79a6f6.png"},20236:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/screenshot-devto-publishing-rss-ad0658517234e6610941cdda10a43489.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(96540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}},33201:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var o=n(66370),i=n(74848),s=n(28453);const r={slug:"publishing-docusaurus-to-devto-with-devto-api",title:"Publishing Docusaurus to dev.to with the dev.to API",authors:"johnnyreilly",tags:["docusaurus","github actions"],image:"./title-image.png",description:"The dev.to API provides a way to cross post your Docusaurus blogs to dev.to. This post describes how to do that with TypeScript, Node.js and the dev.to API.",hide_table_of_contents:!1},a=void 0,l={image:n(39917).A,authorsImageUrls:[void 0]},c=[{value:"Why not use &quot;Publishing to DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb from RSS&quot;?",id:"why-not-use-publishing-to-dev-community--from-rss",level:2},{value:"The dev.to API",id:"the-devto-api",level:2},{value:"TypeScript console app",id:"typescript-console-app",level:2},{value:"TypeScript dev.to API client",id:"typescript-devto-api-client",level:2},{value:"From blog post markdown to published blog posts",id:"from-blog-post-markdown-to-published-blog-posts",level:2},{value:"Running the script from GitHub Actions",id:"running-the-script-from-github-actions",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The dev.to API provides a way to cross post your Docusaurus blogs to dev.to. This post describes how to do that with TypeScript, Node.js and the dev.to API."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"title image reading &quot;Deep linking with Azure Static Web Apps and Easy Auth&quot; with Azure AD and Static Web App logos",src:n(1052).A+"",width:"800",height:"450",loading:"lazy"})}),"\n",(0,i.jsx)(t.h2,{id:"why-not-use-publishing-to-dev-community--from-rss",children:'Why not use "Publishing to DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb from RSS"?'}),"\n",(0,i.jsxs)(t.p,{children:["If you take a look at the ",(0,i.jsx)(t.a,{href:"https://dev.to/settings/extensions",children:"dev.to settings (under extensions)"})," you'll see that you can post to dev.to using an RSS feed:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Screenshot of the &quot;Publishing to DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb from RSS&quot; section of dev.to",src:n(20236).A+"",width:"1347",height:"1350",loading:"lazy"})}),"\n",(0,i.jsx)(t.p,{children:"This is great, but it has a number of downsides:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"every post published to your blog will be published to dev.to - there's no fine grained control"}),"\n",(0,i.jsx)(t.li,{children:'every post published arrives as "draft" - you have to manually push it "live".'}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"most significantly"})," - it handles code snippets poorly. Everything ends up as a single line of text. This is a real shame because code snippets are a key part of a blog post."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"So after initially setting this up, I decided to look for a better way."}),"\n",(0,i.jsx)(t.h2,{id:"the-devto-api",children:"The dev.to API"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://developers.forem.com/api",children:"It turns out that dev.to have an API."}),". The API is pretty well documented and it's pretty easy to use. The docs mention version 0 and version 1 of the API. Version 0 is officially deprecated, but version 1 appears to be incomplete - certainly the docs are. I ended up using version 0 for this post despite attempting to use version 1; I'll update this post when v1 gets there."]}),"\n",(0,i.jsxs)(t.p,{children:["The only thing you need to do to use the API is ",(0,i.jsx)(t.a,{href:"https://dev.to/settings/extensions",children:"generate an API key"}),":"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Screenshot of the &quot;DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb API Keys&quot; screen",src:n(17249).A+"",width:"1347",height:"835",loading:"lazy"})}),"\n",(0,i.jsx)(t.h2,{id:"typescript-console-app",children:"TypeScript console app"}),"\n",(0,i.jsx)(t.p,{children:"I'm going to use a TypeScript console app to do the work. Let's scaffold up an example project alongside our Docusaurus site:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"mkdir from-docusaurus-to-devto\ncd from-docusaurus-to-devto\nnpx typescript --init\nyarn init\nyarn add @types/node ts-node typescript @docusaurus/utils\n"})}),"\n",(0,i.jsxs)(t.p,{children:["And in the ",(0,i.jsx)(t.code,{children:"package.json"})," file add a ",(0,i.jsx)(t.code,{children:"start"})," script:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "scripts": {\n    "start": "ts-node index.ts"\n  }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Finally, create an empty ",(0,i.jsx)(t.code,{children:"index.ts"})," file. We'll fill this in shortly."]}),"\n",(0,i.jsx)(t.h2,{id:"typescript-devto-api-client",children:"TypeScript dev.to API client"}),"\n",(0,i.jsxs)(t.p,{children:["Before we do that, we're going to need a dev.to API client. Let's create a ",(0,i.jsx)(t.code,{children:"devtoApiClient.ts"})," file and add the following:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export interface User {\n  name: string;\n  username: string;\n  twitter_username: string;\n  github_username: string;\n  user_id: number;\n  website_url: string;\n  profile_image: string;\n  profile_image_90: string;\n}\n\nexport interface ArticleToPublish {\n  title: string;\n  body_markdown: string;\n  published: boolean;\n  main_image: string | undefined;\n  canonical_url: string;\n  description?: string;\n  tags: string[];\n}\n\nexport interface Article {\n  type_of: string;\n  id: number;\n  title: string;\n  description: string;\n  published: boolean;\n  published_at: string;\n  slug: string;\n  path: string;\n  url: string;\n  comments_count: number;\n  public_reactions_count: number;\n  page_views_count: number;\n  positive_reactions_count: number;\n  cover_image: string | null;\n  canonical_url: string;\n  published_timestamp: string;\n  tag_list: string[];\n  user: User;\n  body_markdown: string;\n  body_html: string;\n  reading_time_minutes: number;\n}\n\nexport interface DevToApiClient {\n  getArticles: () => Promise<Article[]>;\n  createArticle: (article: ArticleToPublish) => Promise<void>;\n  updateArticle: (id: number, article: ArticleToPublish) => Promise<void>;\n}\n\nexport function devtoApiClientFactory(apiKey: string): DevToApiClient {\n  const baseUrl = 'https://dev.to/api';\n\n  return {\n    getArticles: async () => {\n      try {\n        const articles: Article[] = [];\n        let page = 1;\n        const pageSize = 100;\n        while (true) {\n          const url = `${baseUrl}/articles/me/published?page=${page}&page_size=${pageSize}`;\n          const res = await fetch(url, {\n            headers: {\n              'api-key': apiKey,\n              accept: 'application/vnd.forem.api-v1+json',\n            },\n          });\n          if (!res.ok) {\n            console.error(res);\n            throw new Error(`Failed to get articles ${url}`);\n          }\n          const data = (await res.json()) as Article[];\n          if (data.length === 0) break;\n\n          page += 1;\n          articles.push(...data);\n        }\n        return articles;\n      } catch (e) {\n        console.error('Failed to get articles', e);\n        throw new Error('Failed to get articles');\n      }\n    },\n\n    createArticle: async (article: ArticleToPublish) => {\n      try {\n        const url = `${baseUrl}/articles`;\n        const res = await fetch(url, {\n          headers: {\n            'api-key': apiKey,\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify({\n            article,\n          }),\n        });\n        if (!res.ok) {\n          console.error(res);\n          console.error(await res.json());\n          throw new Error(`Failed to create article ${article.canonical_url}`);\n        }\n        const data = (await res.json()) as Article;\n        const { body_html, body_markdown, ...rest } = data;\n        console.log(`Created article ${article.canonical_url}`, rest);\n      } catch (e) {\n        console.error('Failed to create article', e);\n        throw new Error('Failed to create article');\n      }\n    },\n\n    updateArticle: async (id: number, article: ArticleToPublish) => {\n      try {\n        const url = `${baseUrl}/articles/${id}`;\n        const res = await fetch(url, {\n          headers: {\n            'api-key': apiKey,\n            'Content-Type': 'application/json',\n          },\n          method: 'PUT',\n          body: JSON.stringify({\n            article,\n          }),\n        });\n        if (!res.ok) {\n          console.error(res);\n          console.error(await res.json());\n          throw new Error(`Failed to update article ${article.canonical_url}`);\n        }\n        const data = (await res.json()) as Article;\n        const { body_html, body_markdown, ...rest } = data;\n        console.log(`Updated article ${article.canonical_url}`, rest);\n      } catch (e) {\n        console.error('Failed to update article', e);\n        throw new Error('Failed to update article');\n      }\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This is a simple API client that uses the ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"Fetch API"})," to make requests to the dev.to API. It's not a complete implementation of the API, but we only need a few article related endpoints to do the following:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Get all the articles that have been published to dev.to"}),"\n",(0,i.jsx)(t.li,{children:"Create a new article"}),"\n",(0,i.jsx)(t.li,{children:"Update an existing article"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"from-blog-post-markdown-to-published-blog-posts",children:"From blog post markdown to published blog posts"}),"\n",(0,i.jsxs)(t.p,{children:["Now we can use the API client in our ",(0,i.jsx)(t.code,{children:"index.ts"})," file:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import fs from 'fs';\nimport path from 'path';\nimport { parseFrontMatter } from '@docusaurus/utils';\nimport {\n  Article,\n  DevToApiClient,\n  devtoApiClientFactory,\n} from './devtoApiClient';\n\nconst rootUrl = 'https://johnnyreilly.com';\nconst rootGitHubUrl =\n  'https://raw.githubusercontent.com/johnnyreilly/blog.johnnyreilly.com/main/blog-website/blog/';\nconst docusaurusBlogDirectory = '../blog-website/blog';\n\nconst markdownImageRexEx = /!\\[.*\\]\\((.*)\\)/g;\nconst markdownRelativeBlogUrlRegex = /\\[.*\\]\\(\\.\\.\\/(.*)\\/index.md\\)/g;\n\nasync function getLastXBlogPostsToPublish({\n  numberOfPosts,\n}: {\n  numberOfPosts: number;\n}) {\n  const blogPosts = await fs.promises.readdir(docusaurusBlogDirectory, {\n    withFileTypes: true,\n  });\n  const blogPostDirectoryNames = blogPosts\n    .slice(0)\n    .reverse()\n    .filter((post) => post.isDirectory())\n    .map((post) => post.name)\n    .slice(0, numberOfPosts);\n\n  return blogPostDirectoryNames;\n}\n\nasync function publishBlogPostToDevTo({\n  blogFilePathRelative,\n  articlesByCanonicalUrl,\n  devtoApiClient,\n}: {\n  blogFilePathRelative: string;\n  articlesByCanonicalUrl: Map<string, Article>;\n  devtoApiClient: DevToApiClient;\n}) {\n  const blogFilePath = path.join(\n    docusaurusBlogDirectory,\n    blogFilePathRelative,\n    'index.md',\n  );\n  console.log(`Processing ${blogFilePath}`);\n\n  const blogFileContent = await fs.promises.readFile(blogFilePath, 'utf8');\n  const { frontMatter, content } = parseFrontMatter(blogFileContent);\n\n  const canonicalUrl = makeCanonicalUrl(\n    blogFilePathRelative,\n    frontMatter['slug'] as string | undefined,\n  );\n  const contentWithCanonicalUrls = enrichMarkdownWithCanonicalUrls(content);\n  const contentWithGitHubImages = enrichMarkdownWithImagesFromGitHub(\n    contentWithCanonicalUrls,\n    blogFilePathRelative,\n  );\n  const tags = frontMatter['tags'] as string[];\n  const title = frontMatter['title'] as string;\n  const published = true;\n  const main_image = makeMainImage(frontMatter, blogFilePathRelative);\n  const trimmedTags = tags.slice(0, 4).map((tag) => tag.replace(/\\W/g, ''));\n\n  const body_markdown = `---\ntitle: ${title}\npublished: ${published}\ntags: ${trimmedTags.join(',')}\ncanonical_url: ${canonicalUrl}\n---\n${contentWithGitHubImages}`;\n\n  const article = {\n    title,\n    body_markdown,\n    published,\n    main_image,\n    canonical_url: canonicalUrl,\n    tags: trimmedTags,\n  };\n\n  console.log(`\\n---------------------------------------------------\\n\\n`);\n  const existingArticle = articlesByCanonicalUrl.get(canonicalUrl);\n\n  if (existingArticle) {\n    console.log(`Updating article ${canonicalUrl}`);\n    await devtoApiClient.updateArticle(existingArticle.id, article);\n  } else {\n    console.log(`Creating article ${canonicalUrl}`);\n    await devtoApiClient.createArticle(article);\n  }\n}\n\nfunction makeMainImage(\n  frontMatter: { [key: string]: unknown },\n  blogFilePathRelative: string,\n) {\n  const image =\n    typeof frontMatter['image'] === 'string'\n      ? (frontMatter['image'] as string)\n      : '';\n  const main_image = image\n    ? rootGitHubUrl +\n      blogFilePathRelative +\n      '/' +\n      image.substring(image.indexOf('/') + 1)\n    : undefined;\n  return main_image;\n}\n\nfunction makeCanonicalUrl(\n  blogFilePathRelative: string,\n  frontMatterSlug?: string,\n) {\n  const parsedBlogFileName = `${rootUrl}/${blogFilePathRelative\n    .substring(0, 10)\n    .split('-')\n    .join('/')}/${blogFilePathRelative.substring(11)}`;\n\n  const canonicalUrl = frontMatterSlug\n    ? `${rootUrl}/${frontMatterSlug}`\n    : parsedBlogFileName;\n  return canonicalUrl;\n}\n\nfunction enrichMarkdownWithImagesFromGitHub(\n  content: string,\n  blogFilePathRelative: string,\n) {\n  return Array.from(content.matchAll(markdownImageRexEx))\n    .map((matches) => {\n      const [completeMatch, url] = matches;\n      const withGitHubUrl = completeMatch.replace(\n        url,\n        rootGitHubUrl + blogFilePathRelative + '/' + url,\n      );\n      console.log(`Replacing ${completeMatch} with ${withGitHubUrl}`);\n      return { oldImage: completeMatch, newImage: withGitHubUrl };\n    })\n    .reduce(\n      (contentInProgress, { oldImage, newImage }) =>\n        contentInProgress.replace(oldImage, newImage),\n      content,\n    );\n}\n\nfunction enrichMarkdownWithCanonicalUrls(content: string) {\n  return Array.from(content.matchAll(markdownRelativeBlogUrlRegex))\n    .map((matches) => {\n      const [\n        /* eg [I wanted to add the last modified date to my blog posts.](../2022-11-25-adding-lastmod-to-sitemap-git-commit-date/index.md) */\n        completeMatch,\n        /* eg 2022-11-25-adding-lastmod-to-sitemap-git-commit-date */\n        relativeBlogPath,\n      ] = matches;\n\n      const withCanonicalUrl = completeMatch.replace(\n        `../${relativeBlogPath}/index.md`,\n        makeCanonicalUrl(relativeBlogPath),\n      );\n      console.log(`Replacing ${completeMatch} with ${withCanonicalUrl}`);\n      return { oldImage: completeMatch, newImage: withCanonicalUrl };\n    })\n    .reduce(\n      (contentInProgress, { oldImage, newImage }) =>\n        contentInProgress.replace(oldImage, newImage),\n      content,\n    );\n}\n\nfunction makeDevtoApiClient() {\n  const devToApiKey = process.env.DEVTO_APIKEY;\n\n  if (!devToApiKey) {\n    console.log('No dev.to API key specified!');\n    process.exit(1);\n  }\n\n  return devtoApiClientFactory(devToApiKey);\n}\n\nconst sleep = async ({ seconds }: { seconds: number }) =>\n  new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n\nasync function run() {\n  const devtoApiClient = makeDevtoApiClient();\n  const articles = await devtoApiClient.getArticles();\n  const articlesByCanonicalUrl = new Map<string, Article>(\n    Array.from(articles).map((article) => [article.canonical_url, article]),\n  );\n  const blogPostsToPublish = await getLastXBlogPostsToPublish({\n    numberOfPosts: 5,\n  });\n\n  for (const blogFilePathRelative of blogPostsToPublish) {\n    await publishBlogPostToDevTo({\n      blogFilePathRelative,\n      articlesByCanonicalUrl,\n      devtoApiClient,\n    });\n\n    console.log('Sleeping for 5 seconds because rate limiting...');\n    await sleep({ seconds: 5 });\n  }\n}\n\n// do it!\nrun();\n"})}),"\n",(0,i.jsx)(t.p,{children:"There's a lot happening here, let me summarise it:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Grab the last 5 blog posts from the Docusaurus blog directory; this is the number of posts I want to publish to dev.to on each run"}),"\n",(0,i.jsx)(t.li,{children:"For each blog post, parse the front matter and the content"}),"\n",(0,i.jsxs)(t.li,{children:["Build up the article object to send to dev.to. We do a few tricks here to make the article look nice:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["To make the URL we'll use the ",(0,i.jsx)(t.code,{children:"slug"})," front matter if it exists, otherwise use the date and title"]}),"\n",(0,i.jsx)(t.li,{children:"Enrich the images in the content with the GitHub URLs so we can use images from the blog post"}),"\n",(0,i.jsx)(t.li,{children:"Use the first 4 tags from the front matter - dev.to only allows 4 tags. Also we'll strip those tags of any non-word characters"}),"\n",(0,i.jsxs)(t.li,{children:["Default to ",(0,i.jsx)(t.code,{children:"published"})," immediately"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"If the article already exists on dev.to, update it, otherwise create it"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Because dev.to practise rate limiting on their API, I've added a 5 second sleep between each article to ensure we don't get blocked. It's a little arbitrary, but it works well enough."}),"\n",(0,i.jsx)(t.p,{children:"Does it work? Let's find out!"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Screenshot of dev.to dashboard showing published posts",src:n(36534).A+"",width:"1822",height:"1008",loading:"lazy"})}),"\n",(0,i.jsxs)(t.p,{children:["It works! I've published 5 posts to dev.to from my blog. ",(0,i.jsx)(t.a,{href:"https://dev.to/johnnyreilly",children:"I can now go to dev.to and see them."})]}),"\n",(0,i.jsx)(t.h2,{id:"running-the-script-from-github-actions",children:"Running the script from GitHub Actions"}),"\n",(0,i.jsx)(t.p,{children:"Now that we have the script, we need to run it. I'm going to use GitHub Actions to do this, but you could use any CI/CD tool you like."}),"\n",(0,i.jsxs)(t.p,{children:["I add a new ",(0,i.jsx)(t.code,{children:"deploy_to_devto_job"})," to my existing workflow and I set it to run on every push to the ",(0,i.jsx)(t.code,{children:"main"})," branch. I don't want to publish to dev.to on every pull request; I want to publish once a blog post is published. So I add an ",(0,i.jsx)(t.code,{children:"if"})," condition to the job to check that the event is not a pull request."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"deploy_to_devto_job:\n  name: Publish to dev.to \ud83d\uddde\ufe0f\n  needs: build_and_deploy_swa_job\n  if: github.event_name != 'pull_request'\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js \ud83d\udd27\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'yarn'\n\n    - name: Publish to dev.to \ud83d\uddde\ufe0f\n      run: |\n        cd from-docusaurus-to-devto\n        yarn install --frozen-lockfile\n        DEVTO_APIKEY=${{ secrets.DEVTO_APIKEY }} yarn start\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If you'd like to use this you'll need to add a ",(0,i.jsx)(t.code,{children:"DEVTO_APIKEY"})," secret to your repository secrets. You can get this from your dev.to account settings. Remember to keep it secret!"]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"This is all a bit of an experiment to see what happens if I start to cross publish my blog posts to dev.to. I'm not sure if I'll keep doing it, but I'm going to trial it and see how it goes."}),"\n",(0,i.jsx)(t.p,{children:"You can use this approach with your own blog site - you'll need to do a little path and URL fiddling, but everything else should be just as you need."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},36534:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/screenshot-devto-published-posts-275f85e2536b3c9e2ac8fc85e3ae9f67.png"},39917:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/title-image-6d961844b168cc54d38548ca0fff8a93.png"},66370:e=>{e.exports=JSON.parse('{"permalink":"/publishing-docusaurus-to-devto-with-devto-api","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2022-12-11-publishing-docusaurus-to-devto-with-devto-api/index.md","source":"@site/blog/2022-12-11-publishing-docusaurus-to-devto-with-devto-api/index.md","title":"Publishing Docusaurus to dev.to with the dev.to API","description":"The dev.to API provides a way to cross post your Docusaurus blogs to dev.to. This post describes how to do that with TypeScript, Node.js and the dev.to API.","date":"2022-12-11T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/tags/docusaurus","description":"The Docusaurus static site generator."},{"inline":false,"label":"GitHub Actions","permalink":"/tags/github-actions","description":"The GitHub Actions CI / CD service."}],"readingTime":8.77,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"publishing-docusaurus-to-devto-with-devto-api","title":"Publishing Docusaurus to dev.to with the dev.to API","authors":"johnnyreilly","tags":["docusaurus","github actions"],"image":"./title-image.png","description":"The dev.to API provides a way to cross post your Docusaurus blogs to dev.to. This post describes how to do that with TypeScript, Node.js and the dev.to API.","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Azure Static Web Apps: build app externally","permalink":"/azure-static-web-apps-build-app-externally"},"nextItem":{"title":"Deep linking with Azure Static Web Apps and Easy Auth","permalink":"/azure-static-web-apps-easyauth-deeplink"}}')}}]);