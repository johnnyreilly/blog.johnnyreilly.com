"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["83987"],{43372:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return d}});var i=n(94095),a=n(85893),o=n(50065);let r={slug:"tonight-ill-start-open-source-project",title:"Tonight I'll Start an Open Source Project...",authors:"johnnyreilly",tags:["angularjs","asp.net"],hide_table_of_contents:!1,description:"A new AngularJS validation mechanism aims to propagate data annotations on ASP.NET MVC server models into ng-* directive attributes in HTML."},l=void 0,s={authorsImageUrls:[void 0]},d=[{value:"Further posts on this topic",id:"further-posts-on-this-topic",level:3},{value:"The Idea",id:"the-idea",level:2},{value:"The Aim",id:"the-aim",level:2},{value:"The Approach",id:"the-approach",level:2}];function h(e){let t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h3,{id:"further-posts-on-this-topic",children:"Further posts on this topic"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"/ngvalidationfor-baby-steps",children:"NgValidationFor Baby Steps"})}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"I'm excited. Are you? I'm babysitting for a friend, I've my laptop, time to kill and (crucially) an idea..."}),"\n",(0,a.jsx)(t.h2,{id:"the-idea",children:"The Idea"}),"\n",(0,a.jsxs)(t.p,{children:["You're likely aware of the various form element directives that AngularJS offers. For instance the ",(0,a.jsx)(t.a,{href:"https://docs.angularjs.org/api/ng/directive/input",children:"input directive"}),":"]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["HTML input element control. When used together with ngModel, it provides data-binding, input state control, and ",(0,a.jsx)(t.em,{children:"validation"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"You'll notice that I emphasised the word \"validation\" there. That's important - that's my idea. I'm using AngularJS to build SPA's and for the server side I'm using ASP.Net MVC / Web API. Crucially, my templates are actually ASP.Net MVC Partial Views. That's key."}),"\n",(0,a.jsx)(t.p,{children:"When I send data back from my SPA back to the server it gets unmarshalled / deserialized into a C# class (view model) of some kind. When data goes the other way it's flowing back from a JSON'd view model and being used by my Angular code."}),"\n",(0,a.jsxs)(t.p,{children:["Now historically if I was building a fairly vanilla MVC app then I'd be making use of all the ",(0,a.jsx)(t.code,{children:"TextboxFor"})," extension methods etc to generate my input elements. For example, with a view model like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"using System.ComponentModel.DataAnnotations;\n\nnamespace App.ViewModels\n{\n public class RequiredModel\n {\n  [Required]\n  public string RequiredField{ get; set; }\n }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"I'd have a view like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'@model App.ViewModels.RequiredModel @using (Html.BeginForm()) {\n<div class="row">\n  @Html.LabelFor(x => x.TextBox, "Something must be entered:")\n  @Html.TextBoxFor(x => x.TextBox, true)\n</div>\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"And that would generate HTML like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<form action="/Demo/Required" method="post">\n  <div class="row">\n    <label for="TextBox">Something must be entered:</label>\n    <input\n      data-msg-required="The TextBox field is required."\n      data-rule-required="true"\n      id="TextBox"\n      name="TextBox"\n      type="text"\n      value=""\n    />\n  </div>\n</form>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["If you look at the HTML you'll see that the ",(0,a.jsx)(t.code,{children:"Required"})," data annotations have been propogated into the HTML in the HTML in the form of ",(0,a.jsx)(t.code,{children:"data-rule-*"})," and ",(0,a.jsx)(t.code,{children:"data-msg-*"})," attributes. The code above is built using my ",(0,a.jsx)(t.a,{href:"http://johnnyreilly.github.io/jQuery.Validation.Unobtrusive.Native/",children:"jQuery.Validation.Unobtrusive.Native project"})," which in turn was inspired by / based upon the ",(0,a.jsx)(t.a,{href:"http://bradwilson.typepad.com/blog/2010/10/mvc3-unobtrusive-validation.html",children:"Unobtrusive Client Validation in ASP.NET MVC"}),". That's right - I've done this before - or at least something quite like it."]}),"\n",(0,a.jsxs)(t.p,{children:["There's clearly a strong crossover between AngularJS's input directive parameters and unobtrusive client validation. I'm planning to take the principles (and maybe some of the code) that I used on that project and see if I can't make something useful with it here. ",(0,a.jsx)(t.a,{href:"/angularjs-meet-aspnet-server-validation",children:"Server side validation is jolly important"})," but I can probably save a few compute cycles on the server by making use of client side validation as well. If I'm right then I should able to come up with a mechanism that saves me from manually duplicating my server validation on the client."]}),"\n",(0,a.jsx)(t.h2,{id:"the-aim",children:"The Aim"}),"\n",(0,a.jsx)(t.p,{children:"I want to be able to use HTML Helpers to propogate validation metadata from the server view models into angular form validation directive attributes. Quite a mouthful I know. What does that actually mean? Well I've got 2 ideas. Possibly I want to be able to code something like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'@model App.ViewModels.RequiredModel @using (Html.BeginForm()) {\n<div class="row">\n  @Html.LabelFor(x => x.TextBox, "Something must be entered:")\n  @Html.NgTextBoxFor(x => x.TextBox)\n</div>\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"And have HTML like this generated:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<form action="/Demo/Required" method="post">\n  <div class="row">\n    <label for="TextBox">Something must be entered:</label>\n    <input\n      ng-required="true"\n      id="TextBox"\n      name="TextBox"\n      type="text"\n      value=""\n    />\n  </div>\n</form>\n'})}),"\n",(0,a.jsx)(t.p,{children:"The reservation I have about this approach is that it rather takes you away from the HTML. Yes it works (and to your seasoned MVC-er it will feel quite natural in some ways) but it feels rather heavy handed. But I'd like what I'm building to be easy for users to plug into existing code without a ton of rework. So, the other idea I'm toying with is having HTML helpers that just return a string of attributes. So if I had an angular form that looked like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<div ng-controller="ExampleController">\n  <form>\n    <div class="row">\n      <label\n        >Something must be entered:\n        <input name="RequiredField" type="text" value="" />\n      </label>\n    </div>\n  </form>\n</div>\n'})}),"\n",(0,a.jsx)(t.p,{children:"I could tweak it to push in the validation directive attributes like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'@model App.ViewModels.RequiredModel\n<div ng-controller="ExampleController">\n  <form>\n    <div class="row">\n      <label\n        >Something must be entered:\n        <input\n          name="RequiredField"\n          type="text"\n          value=""\n          @Html.NgValidationFor(x=""\n        />\n        x.RequiredField) />\n      </label>\n    </div>\n  </form>\n</div>\n'})}),"\n",(0,a.jsx)(t.p,{children:"And end up with HTML like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<div ng-controller="ExampleController">\n  <form>\n    <div class="row">\n      <label\n        >Something must be entered:\n        <input name="RequiredField" type="text" value="" ng-required="true" />\n      </label>\n    </div>\n  </form>\n</div>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This is a simplified example of course - it's likely that any number of validation directive attributes might be returned from ",(0,a.jsx)(t.code,{children:"NgValidationFor"}),". And crucially if these attributes were changed on the server view model then the validation changes would automatically end up in the client HTML with this approach."]}),"\n",(0,a.jsx)(t.h2,{id:"the-approach",children:"The Approach"}),"\n",(0,a.jsx)(t.p,{children:"At least to start off with I'm going to aim at creating the second of my approaches. I may come back and implement the first at some point but I think the second is a better place to start."}),"\n",(0,a.jsxs)(t.p,{children:["I'm kind of surprised no-one else has built this already actually - but I'm not aware of anything. I've had a little duckduckgo around and found no takers. The closest I've come is the excellent ",(0,a.jsx)(t.a,{href:"http://www.breezejs.com/sites/all/apidocs/classes/Validator.html",children:"BreezeJS"}),". BreezeJS does way more than I want it to - I'm planning to restrict the scope of this project to simply turning data annotations on my ASP.Net MVC server models into ",(0,a.jsx)(t.code,{children:"ng-*"})," directive attributes in HTML. That's it."]}),"\n",(0,a.jsxs)(t.p,{children:["So, general housekeeping.... I'm going to host this project on ",(0,a.jsx)(t.a,{href:"http://www.github.com",children:"GitHub"}),", I'm going to have Continuous Integration with ",(0,a.jsx)(t.a,{href:"http://www.appveyor.com/",children:"AppVeyor"})," and I'm planning to publish this via ",(0,a.jsx)(t.a,{href:"http://www.nuget.org/",children:"NuGet"})," (when and if I've created something useful)."]}),"\n",(0,a.jsx)(t.p,{children:"I just need a name and I'll begin. What shall I call it? Some options:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Angular ASP.Net MVC Extensions"}),"\n",(0,a.jsx)(t.li,{children:"angular-aspnet-mvc-extensions"}),"\n",(0,a.jsx)(t.li,{children:"Angular MVC Element Extensions"}),"\n",(0,a.jsx)(t.li,{children:"Angular Validation Html Helpers"}),"\n",(0,a.jsx)(t.li,{children:"NgValidationFor (the name of the HTML helper I made up)"}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Hmmmm.... None of them is particularly lighting my fire. The first four are all a bit ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Ronseal",children:"RonSeal"})," - which is fine.... Ug. The last one... It's a bit more pithy. Okay - I'll go with \"NgValidationFor\" at least for now. If something better occurs I can always change my mind."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/johnnyreilly/NgValidationFor",children:"And we're off!"})})]})}function c(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return r}});var i=n(67294);let a={},o=i.createContext(a);function r(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},94095:function(e){e.exports=JSON.parse('{"permalink":"/tonight-ill-start-open-source-project","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2015-04-24-tonight-ill-start-open-source-project/index.md","source":"@site/blog/2015-04-24-tonight-ill-start-open-source-project/index.md","title":"Tonight I\'ll Start an Open Source Project...","description":"A new AngularJS validation mechanism aims to propagate data annotations on ASP.NET MVC server models into ng-* directive attributes in HTML.","date":"2015-04-24T00:00:00.000Z","tags":[{"inline":false,"label":"Angular JS","permalink":"/tags/angularjs","description":"The original Angular JS framework."},{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":5.075,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"tonight-ill-start-open-source-project","title":"Tonight I\'ll Start an Open Source Project...","authors":"johnnyreilly","tags":["angularjs","asp.net"],"hide_table_of_contents":false,"description":"A new AngularJS validation mechanism aims to propagate data annotations on ASP.NET MVC server models into ng-* directive attributes in HTML."},"unlisted":false,"prevItem":{"title":"A tale of Angular, html5mode, ASP.Net MVC and ASP.Net Web API","permalink":"/a-tale-of-angular-html5mode-aspnet-mvc"},"nextItem":{"title":"How to activate your emoji keyboard on Android 5.0 (Lollipop)","permalink":"/how-to-activate-your-emoji-keyboard-on-android"}}')}}]);