"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["40456"],{1834:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return a},toc:function(){return d}});var a=n(20458),o=n(85893),i=n(50065);let r={slug:"dates-DataAnnotations-and-data-impedance-mismatch",title:"A folk story wherein we shall find dates, DataAnnotations & data impedance mismatch",authors:"johnnyreilly",tags:[],hide_table_of_contents:!1,description:"This article offers developers an attribute-based solution to prevent datetime errors, ensuring that DateTime properties only include dates."},s=void 0,l={authorsImageUrls:[void 0]},d=[];function c(e){let t={code:"code",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,o.jsxs)(t.p,{children:["If you ever take a step back from what you're doing it can sometimes seem pretty abstract. Here's an example. I was looking at an issue in an app that I was supporting. The problem concerned a field which was to store a date value. Let's call it, for the sake of argument, ",(0,o.jsx)(t.code,{children:"valuation_date"}),". (Clearly in reality the field name was entirely different... Probably.) This field was supposed to represent a specific date, like June 15th 2012 or 19th August 2014. To be clear, a date and *",(0,o.jsx)(t.strong,{children:"not"}),"* in any way, a time."]})}function u(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return r}});var a=n(67294);let o={},i=a.createContext(o);function r(e){let t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},20458:function(e){e.exports=JSON.parse('{"permalink":"/dates-DataAnnotations-and-data-impedance-mismatch","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-06-20-dates-DataAnnotations-and-data-impedance-mismatch/index.md","source":"@site/blog/2014-06-20-dates-DataAnnotations-and-data-impedance-mismatch/index.md","title":"A folk story wherein we shall find dates, DataAnnotations & data impedance mismatch","description":"This article offers developers an attribute-based solution to prevent datetime errors, ensuring that DateTime properties only include dates.","date":"2014-06-20T00:00:00.000Z","tags":[],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"dates-DataAnnotations-and-data-impedance-mismatch","title":"A folk story wherein we shall find dates, DataAnnotations & data impedance mismatch","authors":"johnnyreilly","tags":[],"hide_table_of_contents":false,"description":"This article offers developers an attribute-based solution to prevent datetime errors, ensuring that DateTime properties only include dates."},"unlisted":false,"prevItem":{"title":"HotTowel-Angular meet TypeScript","permalink":"/hottowel-angular-meet-typescript"},"nextItem":{"title":"Migrating from AngularJS to AngularTS - a walkthrough","permalink":"/migrating-from-angularjs-to-angularts"}}')}}]);