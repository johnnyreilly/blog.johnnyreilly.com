"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[8287],{19968:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var a=t(73407),i=t(74848),r=t(28453);const l={slug:"inlining-angular-templates-with-webpack",title:"Inlining Angular Templates with WebPack and TypeScript",authors:"johnnyreilly",tags:["angularjs","webpack"],hide_table_of_contents:!1,description:"`raw-loader` package in webpack configuration for Angular 1.x projects preloads templates and enables compile-time error checking."},o=void 0,s={authorsImageUrls:[void 0]},c=[];function p(e){const n={a:"a",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(n.p,{children:["This technique actually applies to pretty much any web stack where you have to supply templates; it just so happens that I'm using Angular 1.x in this case. Also I have an extra technique which is useful to handle the ",(0,i.jsx)(n.a,{href:"https://docs.angularjs.org/api/ng/directive/ngInclude",children:"ng-include"})," scenario."]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:n},e.children)}},73407:e=>{e.exports=JSON.parse('{"permalink":"/inlining-angular-templates-with-webpack","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-05-13-inlining-angular-templates-with-webpack/index.md","source":"@site/blog/2016-05-13-inlining-angular-templates-with-webpack/index.md","title":"Inlining Angular Templates with WebPack and TypeScript","description":"`raw-loader` package in webpack configuration for Angular 1.x projects preloads templates and enables compile-time error checking.","date":"2016-05-13T00:00:00.000Z","tags":[{"inline":false,"label":"Angular JS","permalink":"/tags/angularjs","description":"The original Angular JS framework."},{"inline":false,"label":"webpack","permalink":"/tags/webpack","description":"The webpack module bundler."}],"readingTime":3.13,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"inlining-angular-templates-with-webpack","title":"Inlining Angular Templates with WebPack and TypeScript","authors":"johnnyreilly","tags":["angularjs","webpack"],"hide_table_of_contents":false,"description":"`raw-loader` package in webpack configuration for Angular 1.x projects preloads templates and enables compile-time error checking."},"unlisted":false,"prevItem":{"title":"The Mysterious Case of webpack, AngularJS and jQuery","permalink":"/the-mysterious-case-of-webpack-angular-and-jquery"},"nextItem":{"title":"Instant Stubs with JSON.Net (just add hot water)","permalink":"/instant-stubs-with-jsonnet"}}')}}]);