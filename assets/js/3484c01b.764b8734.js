"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["44344"],{34711:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return c}});var i=n(72095),o=n(85893),s=n(50065);let r={slug:"bulletproof-uniq-with-typescript",title:"Bulletproof uniq with TypeScript generics (yay code reviews!)",authors:"johnnyreilly",tags:["typescript"],hide_table_of_contents:!1,description:"Code reviews provide opportunities for improvement. A developer shares how their colleagues comment led to the creation of a better \u201Cuniq\u201D function."},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"&quot;What&#39;s this?&quot;",id:"whats-this",level:2},{value:"<code>uniq</code> v1",id:"uniq-v1",level:2},{value:"<code>uniq</code> v2",id:"uniq-v2",level:2}];function h(e){let t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Never neglect the possibilities of a code review. There are times when you raise a PR and all you want is for everyone to hit approve so you can merge, merge and ship, ship! This can be a missed opportunity. For as much as I'd like to imagine my code is perfect, it's patently not. There's always scope for improvement."}),"\n",(0,o.jsx)(t.h2,{id:"whats-this",children:'"What\'s this?"'}),"\n",(0,o.jsx)(t.p,{children:"This week afforded me that opportunity. I was walking through a somewhat complicated PR on a call and someone said \"what's this?\". They'd spotted an expression much like this in my code:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const myValues = [...new Set(allTheValuesSupplied)];\n"})}),"\n",(0,o.jsx)(t.p,{children:"What is that? Well, it's a number of things:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Remove_duplicate_elements_from_the_array",children:"It's a way to get the unique values in a collection."})}),"\n",(0,o.jsx)(t.li,{children:"It's a pro-tip and a coding BMX trick."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"What do I mean? Well, this is indeed a technique for getting the unique values in a collection. But it relies upon you knowing a bunch of things:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",children:(0,o.jsx)(t.code,{children:"Set"})})," contains unique values. If you add multiple identical values, only a single value will be stored."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsxs)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set",children:[(0,o.jsx)(t.code,{children:"Set"})," constructor"]})," takes ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol",children:"iterable objects"}),". This means we can ",(0,o.jsx)(t.code,{children:"new"})," up a ",(0,o.jsx)(t.code,{children:"Set"}),' with an array that we want to "unique-ify" and we will have a ',(0,o.jsx)(t.code,{children:"Set"})," that contains those unique values."]}),"\n",(0,o.jsxs)(t.li,{children:["If you want to go on to do filtering / mapping etc on your unique values, you'll need to get them out of the ",(0,o.jsx)(t.code,{children:"Set"}),". This is because (regrettably) ECMAScript iterables don't implicitly support these operations and neither are methods such as these part of the ",(0,o.jsx)(t.code,{children:"Set"})," API. The easiest way to do that is to ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",children:"spread"})," into a new array which you can then operate upon."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"I have this knowledge. Lots of people have this knowledge. But whilst this may be the case, using this technique goes against what I would generally consider to be a good tenet of programming: comprehensibility. When you read this code above, it doesn't immediately tell you what it's doing. This is a strike against it."}),"\n",(0,o.jsxs)(t.p,{children:['Further to that, it\'s "noisy". Even if the reader does have this knowledge, as they digest the code, they have to mentally unravel it. "Oh it\'s a ',(0,o.jsx)(t.code,{children:"Set"}),", we're passing in values, then spreading it out, it's probably intended to get the unique values.... Right, cool, cool.... Continue!\""]}),"\n",(0,o.jsx)("iframe",{src:"https://giphy.com/embed/4NnSe87mg3h25JYIDh",width:"100%",height:"100%",frameBorder:"0",allowFullScreen:""}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://twitter.com/margaridagp",children:"Margarida Pereira"})," explicitly called this out and I found myself agreeing. Let's make a ",(0,o.jsx)(t.code,{children:"uniq"})," function!"]}),"\n",(0,o.jsxs)(t.h2,{id:"uniq-v1",children:[(0,o.jsx)(t.code,{children:"uniq"})," v1"]}),"\n",(0,o.jsxs)(t.p,{children:["I wrote a very simple ",(0,o.jsx)(t.code,{children:"uniq"})," function which looked like this:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"/**\n * Return the unique values found in the passed iterable\n */\nfunction uniq<TElement>(iterableToGetUniqueValuesOf: Iterable<TElement>) {\n  return [...new Set(iterableToGetUniqueValuesOf)];\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"Usage of this was simple:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"uniq([1, 1, 1, 3, 1, 1, 2]); // produces [1, 3, 2]\nuniq(['John', 'Guida', 'Ollie', 'Divya', 'John']); // produces [\"John\", \"Guida\", \"Ollie\", \"Divya\"]\n"})}),"\n",(0,o.jsx)(t.p,{children:"And I thought this was tremendous. I committed and pushed. I assumed there was no more to be done. Guida (Margarida) then made this very helpful comment:"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["BTW, I found a big bold warning that ",(0,o.jsx)(t.code,{children:"new Set()"})," compares objects by reference (unless they're primitives) so it might be worth adding a comment to warn people that uniq/distinct compares objects by reference: ",(0,o.jsx)(t.a,{href:"https://codeburst.io/javascript-array-distinct-5edc93501dc4",children:"https://codeburst.io/javascript-array-distinct-5edc93501dc4"})]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["She was right! If a caller was to, say, pass a collection of objects to ",(0,o.jsx)(t.code,{children:"uniq"})," then they'd end up highly disappointed. Consider:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"uniq([{ name: 'John' }, { name: 'John' }]); // produces [{ name: \"John\" }, { name: \"John\" }]\n"})}),"\n",(0,o.jsx)(t.p,{children:"We can do better!"}),"\n",(0,o.jsxs)(t.h2,{id:"uniq-v2",children:[(0,o.jsx)(t.code,{children:"uniq"})," v2"]}),"\n",(0,o.jsxs)(t.p,{children:["I like compilers shouting at me. Or more accurately, I like compilers telling me when something isn't valid / supported / correct. I wanted ",(0,o.jsx)(t.code,{children:"uniq"})," to mirror the behaviour of ",(0,o.jsx)(t.code,{children:"Set"})," - to only support primitives such as ",(0,o.jsx)(t.code,{children:"string"}),", ",(0,o.jsx)(t.code,{children:"number"})," etc. So I made a new version of ",(0,o.jsx)(t.code,{children:"uniq"})," that hardened up the generic contraints:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"/**\n * Return the unique values found in the passed iterable\n */\nfunction uniq<TElement extends string | number | bigint | boolean | symbol>(\n  iterableToGetUniqueValuesOf: Iterable<TElement>,\n) {\n  return [...new Set(iterableToGetUniqueValuesOf)];\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["With this in place, the compiler started shouting in the most helpful way. When I re-attemped ",(0,o.jsx)(t.code,{children:'[{ name: "John" }, { name: "John" }]'})," the compiler hit me with:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"Argument of type '{ name: string; }[]' is not assignable to parameter of type 'Iterable&lt;string | number | bigint | boolean | symbol&gt;'."})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://www.typescriptlang.org/play?#code/FAYw9gdgzmA2CmA6WYDmAKArhAlgR3QG0BvAAggEMBbeALlICIApMACwgdIF8AaUsyjXrM2HbgF0AlJNCQYCZGiy4ChEewZ91HKTOAB6AFSHgpQ6QBK8AC6YAThFLXW8UtnyZXANwqxPUUgAzMGwAE1IcR2dXAAcKKCh4cJxreDsKACMEU0N9YEDsEGscSDcVAB4AFQBRBBoIa1J4AA9UiFCAqGs7SNRSAB9yTCoMtIHSDJxUSMbBjLA4eApHQagATxG4AD50U1J9lLTMhEqwAHEbAFUVTwA1X38AeUD6AElU9Kz4Ktr4eustsBJPw9vs7DZ7I5CIgYRB4AB3UgAZRs6EOnxO5yuN3g9z88Cgz0k4gA3MAuMAgA",children:"Take a look."})}),"\n",(0,o.jsx)(t.p,{children:"This is good. This is descriptive code that only allows legitimate inputs. It should lead to less confusion and a reduced likelihood of issues in Production. It's also a nice example of how code review can result in demonstrably better code. Thanks Guida!"})]})}function d(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return r}});var i=n(67294);let o={},s=i.createContext(o);function r(e){let t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},72095:function(e){e.exports=JSON.parse('{"permalink":"/bulletproof-uniq-with-typescript","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-11-14-bulletproof-uniq-with-typescript/index.md","source":"@site/blog/2020-11-14-bulletproof-uniq-with-typescript/index.md","title":"Bulletproof uniq with TypeScript generics (yay code reviews!)","description":"Code reviews provide opportunities for improvement. A developer shares how their colleagues comment led to the creation of a better \u201Cuniq\u201D function.","date":"2020-11-14T00:00:00.000Z","tags":[{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."}],"readingTime":3.86,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"bulletproof-uniq-with-typescript","title":"Bulletproof uniq with TypeScript generics (yay code reviews!)","authors":"johnnyreilly","tags":["typescript"],"hide_table_of_contents":false,"description":"Code reviews provide opportunities for improvement. A developer shares how their colleagues comment led to the creation of a better \u201Cuniq\u201D function."},"unlisted":false,"prevItem":{"title":"Visual Studio Marketplace: images in Markdown!","permalink":"/images-in-markdown-for-azure-devops-marketplace"},"nextItem":{"title":"Throttling data requests with React Hooks","permalink":"/throttle-data-requests-with-react-hooks"}}')}}]);