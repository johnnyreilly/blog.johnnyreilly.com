"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[17622],{52901:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>n,metadata:()=>p,toc:()=>c});var s=i(85893),o=i(11151);const n={slug:"typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports",title:"TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports",authors:"johnnyreilly",tags:["typescript","javascript","ESLint"],image:"./title-image.png",description:'TypeScript deprecated tsconfig.json option "importsNotUsedAsValues": "error" in 5. You can make type imports explicit with CommonJS if you use ESLint consistent-type-imports.',hide_table_of_contents:!1},r=void 0,p={permalink:"/typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-05-09-typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports/index.md",source:"@site/blog/2023-05-09-typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports/index.md",title:"TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports",description:'TypeScript deprecated tsconfig.json option "importsNotUsedAsValues": "error" in 5. You can make type imports explicit with CommonJS if you use ESLint consistent-type-imports.',date:"2023-05-09T00:00:00.000Z",formattedDate:"May 9, 2023",tags:[{label:"typescript",permalink:"/tags/typescript"},{label:"javascript",permalink:"/tags/javascript"},{label:"ESLint",permalink:"/tags/es-lint"}],readingTime:6.14,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports",title:"TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports",authors:"johnnyreilly",tags:["typescript","javascript","ESLint"],image:"./title-image.png",description:'TypeScript deprecated tsconfig.json option "importsNotUsedAsValues": "error" in 5. You can make type imports explicit with CommonJS if you use ESLint consistent-type-imports.',hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Static Web Apps CLI and Node.js 18: could not connect to API",permalink:"/static-web-apps-cli-node-18-could-not-connect-to-api"},nextItem:{title:"Migrating Azure Functions from JSDoc JavaScript to TypeScript",permalink:"/migrating-azure-functions-from-jsdoc-javascript-to-typescript"}},a={image:i(84320).Z,authorsImageUrls:[void 0]},c=[];function l(t){const e={code:"code",img:"img",p:"p",...(0,o.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["I really like type imports that are unambiguous. For this reason, I've made use of the ",(0,s.jsx)(e.code,{children:'"importsNotUsedAsValues": "error"'})," option in ",(0,s.jsx)(e.code,{children:"tsconfig.json"})," for a while now. This option has been deprecated in TypeScript 5.0.0, and will be removed in TypeScript 5.5.0. This post will look at what you can do instead."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"title image reading &quot;TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports&quot; with the ESLint and TypeScript logo",src:i(41239).Z+"",width:"800",height:"450",loading:"eager",fetchpriority:"high"})})]})}function m(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}},84320:(t,e,i)=>{i.d(e,{Z:()=>s});const s=i.p+"assets/images/title-image-be1079a13c4ed4213afb6c3bc59929f8.png"},41239:(t,e,i)=>{i.d(e,{Z:()=>s});const s=i.p+"assets/images/title-image-be1079a13c4ed4213afb6c3bc59929f8.png"},11151:(t,e,i)=>{i.d(e,{Z:()=>p,a:()=>r});var s=i(67294);const o={},n=s.createContext(o);function r(t){const e=s.useContext(n);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function p(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),s.createElement(n.Provider,{value:e},t.children)}}}]);