"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["15610"],{42929:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l}});var i=t(34835),o=t(85893),r=t(50065);let s={slug:"using-reflection-to-identify-unwanted-dependencies",title:"Using Reflection to Identify Unwanted Dependencies",authors:"johnnyreilly",tags:["asp.net"],hide_table_of_contents:!1,description:"Learn how to identify unwelcome dependencies in complex web apps by walking a dependency tree using reflection-based tests."},a=void 0,d={authorsImageUrls:[void 0]},l=[];function c(e){let n={p:"p",...(0,r.a)(),...e.components};return(0,o.jsx)(n.p,{children:"I having a web app which is fairly complex. It's made up of services, controllers and all sorts of things. So far, so unremarkable. However, I needed to ensure that the controllers did not attempt to access the database via any of their dependencies. Or their dependencies, dependencies. Or their dependencies. You get my point."})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return s}});var i=t(67294);let o={},r=i.createContext(o);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},34835:function(e){e.exports=JSON.parse('{"permalink":"/using-reflection-to-identify-unwanted-dependencies","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-04-28-using-reflection-to-identify-unwanted-dependencies/index.md","source":"@site/blog/2018-04-28-using-reflection-to-identify-unwanted-dependencies/index.md","title":"Using Reflection to Identify Unwanted Dependencies","description":"Learn how to identify unwelcome dependencies in complex web apps by walking a dependency tree using reflection-based tests.","date":"2018-04-28T00:00:00.000Z","tags":[{"inline":false,"label":"ASP.NET","permalink":"/tags/asp-net","description":"The web framework built by Microsoft."}],"readingTime":2.545,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"using-reflection-to-identify-unwanted-dependencies","title":"Using Reflection to Identify Unwanted Dependencies","authors":"johnnyreilly","tags":["asp.net"],"hide_table_of_contents":false,"description":"Learn how to identify unwelcome dependencies in complex web apps by walking a dependency tree using reflection-based tests."},"unlisted":false,"prevItem":{"title":"Compromising: A Guide for Developers","permalink":"/compromising-guide-for-developers"},"nextItem":{"title":"It\'s Not Dead 2: mobx-react-devtools and the undead","permalink":"/its-not-dead-2-mobx-react-devtools-and-the-undead"}}')}}]);