"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["91096"],{24066:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return h}});var i=t(20319),a=t(85893),r=t(50065);let s={slug:"caching-and-cache-busting-in-angularjs-with-http-interceptors",title:"Caching and Cache-Busting in AngularJS with HTTP interceptors",authors:"johnnyreilly",tags:["angularjs","typescript"],hide_table_of_contents:!1,description:"Learn how to modify GET request URLs for static resources and AngularJS views with HTTP interceptors using version numbers and unique querystrings."},o=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Loading On-Demand and Caching",id:"loading-on-demand-and-caching",level:2},{value:"Loading Views in AngularJS Using this Approach",id:"loading-views-in-angularjs-using-this-approach",level:2},{value:"Interesting technique.... How do I apply it?",id:"interesting-technique-how-do-i-apply-it",level:2}];function c(e){let n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"loading-on-demand-and-caching",children:"Loading On-Demand and Caching"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/caching-and-cache-busting-with-requirejs",children:"I've written before about my own needs for caching and cache-busting when using RequireJS."})," Long story short, when I'm loading ",(0,a.jsx)(n.em,{children:"static"})," resources (scripts / views etc) on demand from the server I want to do a little URL fiddling along the way. I want to do that to cater for these 2 scenarios:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:"In Development"}),' - I want my URLs for static resources to have a unique querystring with each request to ensure that resources are loaded afresh each time. (eg so a GET request URL might look like this: "/app/layout/sidebar.html?v=IAmRandomYesRandomRandomIsWhatIAm58965782")']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:"In Production"}),' - I want my URLs for static resources to have a querystring with that is driven by the application version number. This means that static resources can potentially be cached with a given querystring - subsequent requests should result in a 304 status code (indicating \u201CNot Modified\u201D) and local cache should be used. But when a new version of the app is rolled out and the app version is incremented then the querystring will change and resources will be loaded anew. (eg a GET request URL might look like this: "/app/layout/sidebar.html?v=1.0.5389.16180")']}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"loading-views-in-angularjs-using-this-approach",children:"Loading Views in AngularJS Using this Approach"}),"\n",(0,a.jsx)(n.p,{children:"I have exactly the same use cases when I'm using AngularJS for views. Out of the box with AngularJS 1.x views are loaded lazily (unlike controllers, services etc). For that reason I want to use the same approach I've outlined above to load my views. Also, I want to prepend my URLs with the root of my application - this allows me to cater for my app being deployed in a virtual folder."}),"\n",(0,a.jsxs)(n.p,{children:["It turns out that's pretty easy thanks to ",(0,a.jsx)(n.a,{href:"https://docs.angularjs.org/api/ng/service/$http#interceptors",children:"HTTP interceptors"}),". They allow you to step into the pipeline and access and modify requests and responses made by your application. When AngularJS loads a view it's the HTTP service doing the heavy lifting. So to deal with my own use case, I just need to add in an HTTP interceptor that amends the get request. This is handled in the example that follows in the ",(0,a.jsx)(n.code,{children:"configureHttpProvider"})," function: (The example that follows is TypeScript - though if you just chopped out the interface and the type declarations you'd find this is pretty much idiomatic JavaScript)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"interface config {\n  appRoot: string; // eg \"/\"\n  inDebug: boolean; // eg true or false\n  urlCacheBusterSuffix: string; // if in debug this might look like this: \"v=1412608547047\",\n  // if not in debug this might look like this: \"v=1.0.5389.16180\"\n}\n\nfunction configureHttpProvider() {\n  // This is the name of our HTTP interceptor\n  var serviceId = 'urlInterceptor';\n\n  // We're going to create a service factory which will be our HTTP interceptor\n  // It will be injected with a config object which is represented by the config interface above\n  app.factory(serviceId, [\n    '$templateCache',\n    'config',\n    function ($templateCache: ng.ITemplateCacheService, config: config) {\n      // We're returning an object literal with a single function; the \"request\" function\n      var service = {\n        request: request,\n      };\n\n      return service;\n\n      // Request will be called with a request config object which includes the URL which we will amend\n      function request(requestConfig: ng.IRequestConfig) {\n        // For the loading of HTML templates we want the appRoot to be prefixed to the path\n        // and we want a suffix to either allow caching or prevent caching\n        // (depending on whether in debug mode or not)\n        if (\n          requestConfig.method === 'GET' &&\n          endsWith(requestConfig.url, '.html')\n        ) {\n          // If this has already been placed into a primed template cache then we should leave the URL as is\n          // so that the version in templateCache is served.  If we tweak the URL then it will not be found\n          var cachedAlready = $templateCache.get(requestConfig.url);\n          if (!cachedAlready) {\n            // THIS IS THE MAGIC!!!!!!!!!!!!!!!\n\n            requestConfig.url =\n              config.appRoot + requestConfig.url + config.urlCacheBusterSuffix;\n\n            // WE NOW HAVE A URL WHICH IS CACHE-FRIENDLY FOR OUR PURPOSES - REJOICE!!!!!!!!!!!\n          }\n        }\n\n        return requestConfig;\n      }\n\n      // <a href=\"http://stackoverflow.com/a/2548133/761388\">a simple JavaScript string \"endswith\" implementation</a>\n      function endsWith(str: string, suffix: string) {\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\n      }\n    },\n  ]);\n\n  // This adds our service factory interceptor into the pipeline\n  app.config([\n    '$httpProvider',\n    function ($httpProvider: ng.IHttpProvider) {\n      $httpProvider.interceptors.push(serviceId);\n    },\n  ]);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"This interceptor steps in and amends each ajax request when all the following conditions hold true:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"It's a GET request."}),"\n",(0,a.jsx)(n.li,{children:'It\'s requesting a file that ends ".html" - a template basically.'}),"\n",(0,a.jsx)(n.li,{children:"The template cache does not already contain the template. I left this out at first and got bitten when I found that the contents of the template cache were being ignored for pre-primed templates. Ugly."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"interesting-technique-how-do-i-apply-it",children:"Interesting technique.... How do I apply it?"}),"\n",(0,a.jsxs)(n.p,{children:["Isn't it always much more helpful when you can see an example of code in the context of which it is actually used? Course it is! If you want that then take a look at ",(0,a.jsx)(n.a,{href:"https://github.com/johnnyreilly/Proverb/blob/master/Proverb.Web/app/app.ts",children:(0,a.jsx)(n.code,{children:"app.ts"})})," on GitHub. And if you'd like the naked JavaScript well ",(0,a.jsx)(n.a,{href:"https://github.com/johnnyreilly/Proverb/blob/master/Proverb.Web/app/app.js",children:"that's there too"}),"."]})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return s}});var i=t(67294);let a={},r=i.createContext(a);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},20319:function(e){e.exports=JSON.parse('{"permalink":"/caching-and-cache-busting-in-angularjs-with-http-interceptors","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-10-06-caching-and-cache-busting-in-angularjs-with-http-interceptors/index.md","source":"@site/blog/2014-10-06-caching-and-cache-busting-in-angularjs-with-http-interceptors/index.md","title":"Caching and Cache-Busting in AngularJS with HTTP interceptors","description":"Learn how to modify GET request URLs for static resources and AngularJS views with HTTP interceptors using version numbers and unique querystrings.","date":"2014-10-06T00:00:00.000Z","tags":[{"inline":false,"label":"Angular JS","permalink":"/tags/angularjs","description":"The original Angular JS framework."},{"inline":false,"label":"TypeScript","permalink":"/tags/typescript","description":"The TypeScript programming language."}],"readingTime":4.075,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"caching-and-cache-busting-in-angularjs-with-http-interceptors","title":"Caching and Cache-Busting in AngularJS with HTTP interceptors","authors":"johnnyreilly","tags":["angularjs","typescript"],"hide_table_of_contents":false,"description":"Learn how to modify GET request URLs for static resources and AngularJS views with HTTP interceptors using version numbers and unique querystrings."},"unlisted":false,"prevItem":{"title":"Using Gulp in Visual Studio instead of Web Optimization","permalink":"/using-gulp-in-visual-studio-instead-of-web-optimization"},"nextItem":{"title":"He tasks me; he heaps me.... I will wreak that MOQ upon him.","permalink":"/he-tasks-me-he-heaps-me-i-will-wreak"}}')}}]);