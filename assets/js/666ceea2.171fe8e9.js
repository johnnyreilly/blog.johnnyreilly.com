"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[13692],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,y=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(y,s(s({ref:t},c),{},{components:r})):n.createElement(y,s({ref:t},c))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[m]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},12679:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>m});r(67294);var n=r(3905);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const a={slug:"typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports",title:"TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports",authors:"johnnyreilly",tags:["typescript","eslint"],image:"./title-image.png",description:'TypeScript deprecated tsconfig.json option "importsNotUsedAsValues": "error" in 5. You can make type imports explicit with CommonJS if you use ESLint consistent-type-imports.',hide_table_of_contents:!1},p=void 0,l={permalink:"/typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2023-05-09-typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports/index.md",source:"@site/blog/2023-05-09-typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports/index.md",title:"TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports",description:'TypeScript deprecated tsconfig.json option "importsNotUsedAsValues": "error" in 5. You can make type imports explicit with CommonJS if you use ESLint consistent-type-imports.',date:"2023-05-09T00:00:00.000Z",formattedDate:"May 9, 2023",tags:[{label:"typescript",permalink:"/tags/typescript"},{label:"eslint",permalink:"/tags/eslint"}],readingTime:3.665,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"typescript-5-importsnotusedasvalues-error-eslint-consistent-type-imports",title:"TypeScript 5: importsNotUsedAsValues replaced by ESLint consistent-type-imports",authors:"johnnyreilly",tags:["typescript","eslint"],image:"./title-image.png",description:'TypeScript deprecated tsconfig.json option "importsNotUsedAsValues": "error" in 5. You can make type imports explicit with CommonJS if you use ESLint consistent-type-imports.',hide_table_of_contents:!1},nextItem:{title:"Migrating Azure Functions from JSDoc JavaScript to TypeScript",permalink:"/migrating-azure-functions-from-jsdoc-javascript-to-typescript"}},c={image:r(41239).Z,authorsImageUrls:[void 0]},m=[{value:"What <code>&quot;importsNotUsedAsValues&quot;: &quot;error&quot;</code> provided",id:"what-importsnotusedasvalues-error-provided",level:2},{value:"TypeScript 5 deprecates <code>importsNotUsedAsValues</code>",id:"typescript-5-deprecates-importsnotusedasvalues",level:2},{value:"ESLint and <code>@typescript-eslint/consistent-type-imports</code> to the rescue",id:"eslint-and-typescript-eslintconsistent-type-imports-to-the-rescue",level:2}],u={toc:m};function d(e){var{components:t}=e,a=s(e,["components"]);return(0,n.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){o(e,t,r[t])}))}return e}({},u,a),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"I really like type imports that are unambiguous. For this reason, I've made use of the ",(0,n.kt)("inlineCode",{parentName:"p"},'"importsNotUsedAsValues": "error"')," option in ",(0,n.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," for a while now. This option has been deprecated in TypeScript 5.0.0, and will be removed in TypeScript 5.5.0. This post will look at what you can do instead."),(0,n.kt)("p",null,(0,n.kt)("img",{loading:"eager",fetchpriority:"high",alt:"title image reading &quot;TypeScript 5: `importsNotUsedAsValues` replaced by ESLint `consistent-type-imports`&quot; with the ESLint and TypeScript logo",src:r(41239).Z,width:"800",height:"450"})),(0,n.kt)("h2",{id:"what-importsnotusedasvalues-error-provided"},"What ",(0,n.kt)("inlineCode",{parentName:"h2"},'"importsNotUsedAsValues": "error"')," provided"),(0,n.kt)("p",null,"Prior to TypeScript 5.0, if you wanted to make your type imports explicit, you could use the ",(0,n.kt)("inlineCode",{parentName:"p"},'"importsNotUsedAsValues": "error"')," option in ",(0,n.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),". This would mean that you would need to use ",(0,n.kt)("inlineCode",{parentName:"p"},"import type")," for type imports, and ",(0,n.kt)("inlineCode",{parentName:"p"},"import")," for value imports. Consider the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { ResourceGraphClient } from '@azure/arm-resourcegraph';\n")),(0,n.kt)("p",null,"In my code I was only using ",(0,n.kt)("inlineCode",{parentName:"p"},"ResourceGraphClient")," as a type, so I would need to change it to:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import type { ResourceGraphClient } from '@azure/arm-resourcegraph';\n")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"or")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { type ResourceGraphClient } from '@azure/arm-resourcegraph';\n")),(0,n.kt)("p",null,"And if I rebelled, the TypeScript compiler would complain:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"This import is never used as a value and must use 'import type' because 'importsNotUsedAsValues' is set to 'error'.ts(1371)"))),(0,n.kt)("p",null,(0,n.kt)("img",{loading:"lazy",alt:"screenshot of VS Code displaying the error message",src:r(60096).Z,width:"1634",height:"136"})),(0,n.kt)("h2",{id:"typescript-5-deprecates-importsnotusedasvalues"},"TypeScript 5 deprecates ",(0,n.kt)("inlineCode",{parentName:"h2"},"importsNotUsedAsValues")),(0,n.kt)("p",null,"However, when I upgraded to TypeScript 5, I started seeing the following error:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"Option 'importsNotUsedAsValues' is deprecated and will stop functioning in TypeScript 5.5. Specify compilerOption '\"ignoreDeprecations\": \"5.0\"' to silence this error. Use 'verbatimModuleSyntax' instead."))),(0,n.kt)("p",null,(0,n.kt)("img",{loading:"lazy",alt:"screenshot of VS Code displaying the error message",src:r(16124).Z,width:"1996",height:"288"})),(0,n.kt)("p",null,"The error was the result of ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/pull/52203"},"this pull request"),". The message made me think I just needed to migrate to ",(0,n.kt)("inlineCode",{parentName:"p"},"verbatimModuleSyntax"),", like so:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'-    "importsNotUsedAsValues": "error",\n+    "verbatimModuleSyntax": true,\n')),(0,n.kt)("p",null,"However, when I did so, my terminal became a sea of errors:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"src/telemetry.ts:7:13 - error TS1286: ESM syntax is not allowed in a CommonJS module when 'verbatimModuleSyntax' is enabled.\n\nimport * as task from './task.json';\n            ~~~~\n\nsrc/telemetry.ts:9:1 - error TS1287: A top-level 'export' modifier cannot be used on value declarations in a CommonJS module when 'verbatimModuleSyntax' is enabled.\n\nexport async function sendTelemetry({\n")),(0,n.kt)("p",null,"It turns out that ",(0,n.kt)("inlineCode",{parentName:"p"},"verbatimModuleSyntax")," doesn't work with CommonJS - and my codebase is CommonJS."),(0,n.kt)("p",null,"It further turns out that ",(0,n.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues")," was never intended to be used in in the way that I did; effectively as a linting mechanism. ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/andrewbranch"},"Andrew Branch"),", who is part of the TypeScript team, ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/pull/52203#issuecomment-1476574601"},"said this"),":"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues")," was made to serve the opposite purpose you (and basically everyone) were using it for. By default, TypeScript elides unneeded import statements from JS emit even without marking them as ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," imports. ",(0,n.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues")," was created as a way to escape that behavior, not (primarily) to make it more explicit. ",(0,n.kt)("inlineCode",{parentName:"p"},"verbatimModuleSyntax")," allows you to escape the elision behavior, and takes the explicitness of what your imports mean a step further by making you write CJS-style imports when emitting to CJS. So in my book, all the important cases that ",(0,n.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues")," (and ",(0,n.kt)("inlineCode",{parentName:"p"},"preserveValueImports"),") covered, plus more, are covered by ",(0,n.kt)("inlineCode",{parentName:"p"},"verbatimModuleSyntax"),", which is way more explainable. It\u2019s mostly a matter of reducing complexity for the sake of explanation.")),(0,n.kt)("p",null,"Until the world has finished migrating to ES Modules (which will be a while), I'm going to need to stick with CommonJS as my emit target, whilst still planning to write ES Module imports in my code. But I really like being explicit about my imports. So what can I do?"),(0,n.kt)("h2",{id:"eslint-and-typescript-eslintconsistent-type-imports-to-the-rescue"},"ESLint and ",(0,n.kt)("inlineCode",{parentName:"h2"},"@typescript-eslint/consistent-type-imports")," to the rescue"),(0,n.kt)("p",null,"I mentioned that I was using ",(0,n.kt)("inlineCode",{parentName:"p"},"importsNotUsedAsValues")," essentially as a linting mechanism. And it transpires that the answer to my need lives in ESLint itself. There's a rule named ",(0,n.kt)("a",{parentName:"p",href:"https://typescript-eslint.io/rules/consistent-type-imports/"},(0,n.kt)("inlineCode",{parentName:"a"},"@typescript-eslint/consistent-type-imports"))," which tackles exactly this. If you're using ",(0,n.kt)("a",{parentName:"p",href:"https://eslint.org/"},"ESLint")," and ",(0,n.kt)("a",{parentName:"p",href:"https://typescript-eslint.io/"},"typescript-eslint"),", you can add this rule to your ",(0,n.kt)("inlineCode",{parentName:"p"},".eslintrc.js"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="eslintrc.js"',title:'"eslintrc.js"'},"module.exports = {\n  // ...\n  rules: {\n    // ...\n    '@typescript-eslint/consistent-type-imports': 'error', // the replacement of \"importsNotUsedAsValues\": \"error\"\n  },\n};\n")),(0,n.kt)("p",null,"Or if you prefer to have the type imports inline, you can use:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="eslintrc.js"',title:'"eslintrc.js"'},"module.exports = {\n  // ...\n  rules: {\n    // ...\n    '@typescript-eslint/consistent-type-imports': [\n      'error',\n      {\n        fixStyle: 'inline-type-imports',\n      },\n    ], // the replacement of \"importsNotUsedAsValues\": \"error\"\n  },\n};\n")),(0,n.kt)("p",null,"With this in place, we're back to where we were before; just with a different engine:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"All imports in the declaration are only used as types. Use ",(0,n.kt)("inlineCode",{parentName:"p"},"import type"),".eslint@typescript-eslint/consistent-type-imports")),(0,n.kt)("p",null,(0,n.kt)("img",{loading:"lazy",alt:"screenshot of VS Code displaying the error message",src:r(57819).Z,width:"1662",height:"142"})),(0,n.kt)("p",null,"And we even have the ability to auto-fix the errors as well now. Thanks ",(0,n.kt)("inlineCode",{parentName:"p"},"typescript-eslint"),"!"))}d.isMDXComponent=!0},57819:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/screenshot-consistent-type-imports-error-59b29a8f0f9abd25698909d03e1804a1.png"},16124:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/screenshot-importsnotusedasvalues-deprecated-e487158e065f86b9861edd1b79f934a1.png"},60096:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/screenshot-importsnotusedasvalues-error-fcc2dbd3e13f8b925176a36b1775e0ec.png"},41239:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/title-image-be1079a13c4ed4213afb6c3bc59929f8.png"}}]);