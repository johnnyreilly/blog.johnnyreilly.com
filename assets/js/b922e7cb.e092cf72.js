"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["72179"],{98092:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return h},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return d}});var i=t(79845),o=t(85893),s=t(50065);let r={slug:"its-not-dead-webpack-and-dead-code",title:"It's Not Dead: webpack and dead code elimination limitations",authors:"johnnyreilly",tags:["webpack"],hide_table_of_contents:!1,description:"webpack eliminates dead code through DefinePlugin. Directly use `process.env.NODE_ENV !== production` for smarter code elimination by UglifyJSPlugin."},a=void 0,c={authorsImageUrls:[void 0]},d=[{value:"Limitations",id:"limitations",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["webpack has long supported the notion of dead code elimination. webpack facilitates this through use of the ",(0,o.jsx)(n.code,{children:"DefinePlugin"}),". The compile time value of ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV"})," is set either to ",(0,o.jsx)(n.code,{children:"'production'"})," or something else. If it's set to ",(0,o.jsx)(n.code,{children:"'production'"})," then some dead code hackery can happen. ",(0,o.jsx)(n.a,{href:"https://reactjs.org/docs/optimizing-performance.html#webpack",children:"Libraries like React make use of this to serve up different, and crucially smaller, production builds."})]}),"\n",(0,o.jsx)(n.p,{children:"Every now and then you can be surprised. Your assumptions turn out to be wrong."}),"\n",(0,o.jsx)(n.p,{children:"A (pre-webpack 4) production config file will typically contain this code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"new webpack.DefinePlugin({\n    'process.env.NODE_ENV': JSON.stringify('production')\n}),\nnew UglifyJSPlugin(),\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The result of the above config is that webpack will inject the value 'production' everywhere in the codebase where a ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV"})," can be found. (In fact, as of webpack 4 setting this magic value is out-of-the-box behaviour for Production mode; yay the #0CJS!)"]}),"\n",(0,o.jsx)(n.p,{children:"What this means is, if you've written:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"if (process.env.NODE_ENV !== 'production') {\n  // Do a development mode only thing\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"webpack can and will turn this into"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"if ('production' !== 'production') {\n  // Do a development mode only thing\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",children:"UglifyJSPlugin"})," is there to minify the JavaScript in your bundles. As an added benefit, this plugin is smart enough to know that ",(0,o.jsx)(n.code,{children:"'production' !== 'production'"})," is always ",(0,o.jsx)(n.code,{children:"false"}),". And because it's smart, it chops the code. Dead code elimated."]}),"\n",(0,o.jsxs)(n.p,{children:["You can read more about this ",(0,o.jsx)(n.a,{href:"https://webpack.js.org/guides/production/#specify-the-environment",children:"in the webpack docs"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,o.jsx)(n.p,{children:"Given what I've said, consider the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"export class Config {\n  // Other properties\n\n  get isDevelopment() {\n    return process.env.NODE_ENV !== 'production';\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This is a config class that exposes the expression ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV !== 'production'"})," with the friendly name ",(0,o.jsx)(n.code,{children:"isDevelopment"}),". You'd think that dead code elimination would be your friend here. It's not."]}),"\n",(0,o.jsxs)(n.p,{children:["My personal expection was that dead code elimination would treat ",(0,o.jsx)(n.code,{children:"Config.isDevelopment"})," and the expression ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV !== 'production'"})," identically. Because they're identical."]}),"\n",(0,o.jsxs)(n.p,{children:["However, this turns out not to be the case. Dead code elimination works just as you would hope when using the expression ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV !== 'production'"})," directly in code. However webpack ",(0,o.jsx)(n.strong,{children:"only"})," performs dead code elimination for the ",(0,o.jsx)(n.strong,{children:"direct"})," usage of the ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV !== 'production'"})," expression. I'll say that again: if you want dead code elimination then use the injected values; not an encapsulated version of them. It turns out you cannot rely on webpack flowing values through and performing dead code elimination on that basis."]}),"\n",(0,o.jsxs)(n.p,{children:["The TL;DR: if you want to elimate dead code then *always* use ",(0,o.jsx)(n.code,{children:"process.env.NODE_ENV !== 'production'"}),"; don't abstract it. It doesn't work."]}),"\n",(0,o.jsx)(n.p,{children:"UglifyJS is smart. But not that smart."})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var i=t(67294);let o={},s=i.createContext(o);function r(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},79845:function(e){e.exports=JSON.parse('{"permalink":"/its-not-dead-webpack-and-dead-code","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-03-07-its-not-dead-webpack-and-dead-code/index.md","source":"@site/blog/2018-03-07-its-not-dead-webpack-and-dead-code/index.md","title":"It\'s Not Dead: webpack and dead code elimination limitations","description":"webpack eliminates dead code through DefinePlugin. Directly use `process.env.NODE_ENV !== production` for smarter code elimination by UglifyJSPlugin.","date":"2018-03-07T00:00:00.000Z","tags":[{"inline":false,"label":"webpack","permalink":"/tags/webpack","description":"The webpack module bundler."}],"readingTime":2.125,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"its-not-dead-webpack-and-dead-code","title":"It\'s Not Dead: webpack and dead code elimination limitations","authors":"johnnyreilly","tags":["webpack"],"hide_table_of_contents":false,"description":"webpack eliminates dead code through DefinePlugin. Directly use `process.env.NODE_ENV !== production` for smarter code elimination by UglifyJSPlugin."},"unlisted":false,"prevItem":{"title":"Uploading Images to Cloudinary with the Fetch API","permalink":"/uploading-images-to-cloudinary-with-fetch"},"nextItem":{"title":"ts-loader 4 / fork-ts-checker-webpack-plugin 0.4","permalink":"/ts-loader-400-fork-ts-checker-webpack"}}')}}]);