"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[34081],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},45865:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/dev-container-start-3af06d7f824b78f55827d683962fe5be.gif"},50317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var o=t(84684),a=t(74848),i=t(28453);const r={slug:"azurite-and-table-storage-dev-container",title:"Azurite and Table Storage in a dev container",authors:"johnnyreilly",tags:["vs code"],image:"./dev-container-start.gif",hide_table_of_contents:!1,description:"Learn to use Azurite v3 in a dev container to access the Table Storage API in preview for local development without a real database."},s=void 0,c={image:t(73636).A,authorsImageUrls:[void 0]},l=[{value:"Azurite in VS Code",id:"azurite-in-vs-code",level:2},{value:"Make a function app",id:"make-a-function-app",level:2},{value:"Can we swap out Azurite for The Real Thing\u2122\ufe0f?",id:"can-we-swap-out-azurite-for-the-real-thing\ufe0f",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:['It\'s great to be able to develop locally without needing a "real" database to connect to. ',(0,a.jsx)(n.a,{href:"https://github.com/Azure/Azurite",children:"Azurite"})," is an Azure Storage emulator which exists to support just that. This post demonstrates how to run Azurite v3 in a ",(0,a.jsx)(n.a,{href:"https://code.visualstudio.com/docs/remote/containers",children:"dev container"}),", such that you can access the Table Storage API, which is currently in preview."]}),"\n",(0,a.jsx)(n.h2,{id:"azurite-in-vs-code",children:"Azurite in VS Code"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/Azure/Azurite/releases/tag/v3.12.0",children:"Azurite v3.12.0"})," recently shipped, and with it came:"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Preview of Table Service in npm package and docker image. (Visual Studio Code extension doesn't support Table Service in this release)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You'll note that whilst there's a VS Code extension for Azurite, it doesn't have support for the Table Service yet. However, we do have it available in the form of a Docker image. So whilst we may not be able to directly use the Table APIs of Azurite in VS Code, what we could do instead is use a dev container."}),"\n",(0,a.jsx)(n.p,{children:"We'll start by making ourselves a new directory and open VS Code in that location:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir azurite-devcontainer\ncode azurite-devcontainer\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We're going to initialise a dev container there for function apps based upon ",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/vscode-dev-containers/tree/master/containers/azure-functions-dotnetcore-3.1",children:"the example Azure Functions & C# - .NET Core 3.1 container"}),". We'll use it later to test our Azurite connectivity. To do that let's create ourselves a ",(0,a.jsx)(n.code,{children:".devcontainer"})," directory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir .devcontainer\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And inside there we'll add a ",(0,a.jsx)(n.code,{children:"devcontainer.json"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:\n// https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/azure-functions-dotnetcore-3.1\n{\n  "name": "Azurite and Azure Functions & C# - .NET Core 3.1",\n  "dockerComposeFile": "docker-compose.yml",\n  "service": "app",\n  "workspaceFolder": "/workspace",\n  "forwardPorts": [7071],\n\n  // Set *default* container specific settings.json values on container create.\n  "settings": {\n    "terminal.integrated.defaultProfile.linux": "/bin/bash"\n  },\n\n  // Add the IDs of extensions you want installed when the container is created.\n  "extensions": [\n    "ms-azuretools.vscode-azurefunctions",\n    "ms-dotnettools.csharp"\n  ],\n\n  // Use \'postCreateCommand\' to run commands after the container is created.\n  // "postCreateCommand": "dotnet restore",\n\n  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.\n  "remoteUser": "vscode"\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["As we can see, we're referencing a ",(0,a.jsx)(n.code,{children:"docker-compose.yml"})," file; let's add that:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"version: '3'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        # On Linux, you may need to update USER_UID and USER_GID below if not your local UID is not 1000.\n        USER_UID: 10000\n        USER_GID: 10000\n\n    init: true\n    volumes:\n      - ..:/workspace:cached\n\n    # Overrides default command so things don't shut down after the process ends.\n    command: sleep infinity\n\n    # Uncomment the next line to use a non-root user for all processes.\n    user: vscode\n\n  # run azurite and expose the relevant ports\n  azurite:\n    image: ./'mcr.microsoft.com/azure-storage/azurite'\n    ports:\n      - '10000:10000'\n      - '10001:10001'\n      - '10002:10002'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It consists of two services; ",(0,a.jsx)(n.code,{children:"app"})," and ",(0,a.jsx)(n.code,{children:"azurite"}),". ",(0,a.jsx)(n.code,{children:"azurite"})," is the Docker image of Azurite, which exposes the Azurite ports so ",(0,a.jsx)(n.code,{children:"app"})," can access it. Note the name of ",(0,a.jsx)(n.code,{children:"azurite"}),"; that will turn out to be significant later. We're actually only going to use the Table Storage port of ",(0,a.jsx)(n.code,{children:"10002"}),", but this would allow us to use Blobs and Queues also. The ",(0,a.jsx)(n.code,{children:"azurite"})," service is effectively going to be executing this command for us when it runs:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker run -p 10000:10000 -p 10001:10001 -p 10002:10002 mcr.microsoft.com/azure-storage/azurite\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now let's look at ",(0,a.jsx)(n.code,{children:"app"}),". This is our Azure Functions container. It references a ",(0,a.jsx)(n.code,{children:"Dockerfile"})," which we need to add:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:"# Find the Dockerfile for mcr.microsoft.com/azure-functions/dotnet:3.0-dotnet3-core-tools at this URL\n# https://github.com/Azure/azure-functions-docker/blob/master/host/3.0/buster/amd64/dotnet/dotnet-core-tools.Dockerfile\nFROM mcr.microsoft.com/azure-functions/dotnet:3.0-dotnet3-core-tools\n"})}),"\n",(0,a.jsx)(n.p,{children:"We now have ourselves a dev container! VS Code should prompt us to reopen inside the container:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"The dev container starting",src:t(45865).A+"",width:"2282",height:"1342",loading:"lazy"})}),"\n",(0,a.jsx)(n.h2,{id:"make-a-function-app",children:"Make a function app"}),"\n",(0,a.jsx)(n.p,{children:"Now we're inside our container, we're going to make ourselves a function app that will use Azurite. Let's fire up the terminal in VS Code and create a function app containing a simple HTTP function:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir src\ncd src\nfunc init TableStorage --dotnet\ncd TableStorage\n"})}),"\n",(0,a.jsx)(n.p,{children:"We need to add a package for the APIs which interact with Table Storage:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dotnet restore\ndotnet add package Microsoft.Azure.Cosmos.Table --version 1.0.8\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The name is somewhat misleading, as it's both for Cosmos ",(0,a.jsx)(n.em,{children:"and"})," for Table Storage. Famously, naming things is hard \ud83d\ude09."]}),"\n",(0,a.jsxs)(n.p,{children:["Our mission is to be able to write and read from Azurite Table Storage. We need something to read and write that we care about. I like to visit ",(0,a.jsx)(n.a,{href:"https://www.kew.org/kew-gardens",children:"Kew Gardens"})," and so let's imagine ourselves a system which tracks visitors to Kew."]}),"\n",(0,a.jsxs)(n.p,{children:["We're going to add a class called ",(0,a.jsx)(n.code,{children:"KewGardensVisit"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'using System;\nusing Microsoft.Azure.Cosmos.Table;\n\nnamespace TableStorage\n{\n    public class KewGardenVisit : TableEntity\n    {\n        public KewGardenVisit() {}\n        public KewGardenVisit(DateTime arrivedAt, string memberId)\n        {\n            PartitionKey = arrivedAt.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);\n            RowKey = memberId;\n\n            ArrivedAt = arrivedAt;\n        }\n\n        public DateTime ArrivedAt { get; set; }\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now we have our entity, let's add a class called ",(0,a.jsx)(n.code,{children:"HelloAzuriteTableStorage"})," which will contain functions which interact with the storage:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Azure.Cosmos.Table;\n\nnamespace TableStorage\n{\n    public static class HelloAzuriteTableStorage\n    {\n        // Note how we\'re addressing our azurite service\n        const string AZURITE_TABLESTORAGE_CONNECTIONSTRING =\n            "DefaultEndpointsProtocol=http;" +\n            "AccountName=devstoreaccount1;" +\n            "AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;" +\n            "BlobEndpoint=http://azurite:10000/devstoreaccount1;" +\n            "QueueEndpoint=http://azurite:10001/devstoreaccount1;" +\n            "TableEndpoint=http://azurite:10002/devstoreaccount1;";\n        const string TABLE_NAME = "KewGardenVisits";\n\n        [FunctionName("SaveVisit")]\n        public static async Task<IActionResult> RunSaveVisit(\n            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "post", Route = null)] HttpRequest req,\n            ILogger log)\n        {\n            try\n            {\n                var table = await GetTable(log);\n\n                // Create the InsertOrReplace table operation\n                var insertOrMergeOperation = TableOperation.InsertOrMerge(new KewGardenVisit(\n                    arrivedAt: DateTime.UtcNow,\n                    memberId: "JR123456743921"\n                ));\n\n                // Execute the operation.\n                TableResult result = await table.ExecuteAsync(insertOrMergeOperation);\n                KewGardenVisit savedTelemetry = result.Result as KewGardenVisit;\n\n                if (result.RequestCharge.HasValue)\n                    log.LogInformation("Request Charge of InsertOrMerge Operation: " + result.RequestCharge);\n\n                return new OkObjectResult(savedTelemetry);\n\n            }\n            catch (Exception e)\n            {\n                log.LogError(e, "Problem saving");\n            }\n\n            return new BadRequestObjectResult("There was an issue");\n        }\n\n        [FunctionName("GetTodaysVisits")]\n        public static async Task<IActionResult> RunGetTodaysVisits(\n            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = null)] HttpRequest req,\n            ILogger log)\n        {\n            try\n            {\n                var table = await GetTable(log);\n\n                var snowOnTheAdoTelemetries = table.CreateQuery<KewGardenVisit>()\n                    .Where(x => x.PartitionKey == DateTime.UtcNow.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))\n                    .ToArray();\n\n                return new OkObjectResult(snowOnTheAdoTelemetries);\n\n            }\n            catch (Exception e)\n            {\n                log.LogError(e, "Problem loading");\n                return new BadRequestObjectResult("There was an issue");\n            }\n        }\n\n        private static async Task<CloudTable> GetTable(ILogger log)\n        {\n            // Construct a new TableClient using a TableSharedKeyCredential.\n            var storageAccount = CloudStorageAccount.Parse(AZURITE_TABLESTORAGE_CONNECTIONSTRING); ;\n\n            // Create a table client for interacting with the table service\n            CloudTableClient tableClient = storageAccount.CreateCloudTableClient(new TableClientConfiguration());\n\n            // Create a table client for interacting with the table service\n            CloudTable table = tableClient.GetTableReference(TABLE_NAME);\n            if (await table.CreateIfNotExistsAsync())\n                log.LogInformation("Created Table named: {0}", TABLE_NAME);\n            else\n                log.LogInformation("Table {0} already exists", TABLE_NAME);\n\n            return table;\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"There's a couple of things to draw attention to here:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"AZURITE_TABLESTORAGE_CONNECTIONSTRING"})," - this mega string is based upon the ",(0,a.jsx)(n.a,{href:"https://github.com/Azure/Azurite#connection-strings",children:"Azurite connection string docs"}),". The account name and key are the ",(0,a.jsx)(n.a,{href:"https://github.com/Azure/Azurite#default-storage-account",children:"Azurite default storage accounts"}),". You'll note we target ",(0,a.jsx)(n.code,{children:"TableEndpoint=http://azurite:10002/devstoreaccount1"}),". The ",(0,a.jsx)(n.code,{children:"azurite"})," here is replacing the standard ",(0,a.jsx)(n.code,{children:"127.0.0.1"})," where Azurite typically listens. This ",(0,a.jsx)(n.code,{children:"azurite"})," name comes from the name of our service in the ",(0,a.jsx)(n.code,{children:"docker-compose.yml"})," file."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["We're creating two functions ",(0,a.jsx)(n.code,{children:"SaveVisit"})," and ",(0,a.jsx)(n.code,{children:"GetTodaysVisits"}),". ",(0,a.jsx)(n.code,{children:"SaveVisit"})," creates an entry in our storage to represent someone's visit. It's a hardcoded value representing me, and we're exposing a write operation at a ",(0,a.jsx)(n.code,{children:"GET"})," endpoint which is not very RESTful. But this is a demo and Roy Fielding would forgive us. ",(0,a.jsx)(n.code,{children:"GetTodaysVisits"})," allows us to read back the visits that have happened today."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Let's see if it works by entering ",(0,a.jsx)(n.code,{children:"func start"})," and browsing to ",(0,a.jsx)(n.code,{children:"http://localhost:7071/api/savevisit"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"a screenshot of the response from the savevisits endpoint",src:t(96163).A+"",width:"1110",height:"472",loading:"lazy"})}),"\n",(0,a.jsxs)(n.p,{children:["Looking good. Now let's see if we can query them at ",(0,a.jsx)(n.code,{children:"http://localhost:7071/api/gettodaysvisits"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"a screenshot of the response from the gettodaysvisits endpoint",src:t(64056).A+"",width:"1110",height:"472",loading:"lazy"})}),"\n",(0,a.jsx)(n.p,{children:"Disco."}),"\n",(0,a.jsx)(n.h2,{id:"can-we-swap-out-azurite-for-the-real-thing\ufe0f",children:"Can we swap out Azurite for The Real Thing\u2122\ufe0f?"}),"\n",(0,a.jsxs)(n.p,{children:["You may be thinking ",(0,a.jsx)(n.em,{children:'"This is great! But in the end I need to write to Azure Table Storage itself; not Azurite."'})]}),"\n",(0,a.jsx)(n.p,{children:"That's a fair point. Fortunately, it's only the connection string that determines where you read and write to. It would be fairly easy to dependency inject the appropriate connection string, or indeed a service that is connected to the storage you wish to target. If you want to make that happen, you can."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},64056:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/gettodaysvisits-dcbd78683a30f8294b718d3af86d62f1.png"},73636:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/dev-container-start-3af06d7f824b78f55827d683962fe5be.gif"},84684:e=>{e.exports=JSON.parse('{"permalink":"/azurite-and-table-storage-dev-container","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2021-05-15-azurite-and-table-storage-dev-container/index.md","source":"@site/blog/2021-05-15-azurite-and-table-storage-dev-container/index.md","title":"Azurite and Table Storage in a dev container","description":"Learn to use Azurite v3 in a dev container to access the Table Storage API in preview for local development without a real database.","date":"2021-05-15T00:00:00.000Z","tags":[{"inline":false,"label":"VS Code","permalink":"/tags/vs-code","description":"The Visual Studio Code editor."}],"readingTime":6.9,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"azurite-and-table-storage-dev-container","title":"Azurite and Table Storage in a dev container","authors":"johnnyreilly","tags":["vs code"],"image":"./dev-container-start.gif","hide_table_of_contents":false,"description":"Learn to use Azurite v3 in a dev container to access the Table Storage API in preview for local development without a real database."},"unlisted":false,"prevItem":{"title":"Azure Functions and .NET 5: Query params, Dependency Injection, Bicep & Build","permalink":"/azure-functions-dotnet-5-query-params-di-bicep"},"nextItem":{"title":"Create a Pipeline with the Azure DevOps API","permalink":"/create-pipeline-with-azure-devops-api"}}')},96163:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/savevisits-a8d90f0716f36cad91c8b791242352b7.png"}}]);