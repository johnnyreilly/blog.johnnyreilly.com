"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["81429"],{13045:function(e,t,i){i.r(t),i.d(t,{assets:function(){return a},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return l},metadata:function(){return r},toc:function(){return u}});var r=i(6802),n=i(85893),s=i(50065);let l={slug:"tfs-2012-meet-powershell-karma-and-buildnumber",title:"TFS 2012 meet PowerShell, Karma and BuildNumber",authors:"johnnyreilly",tags:["azure devops"],hide_table_of_contents:!1,description:"This guide explains how to run PowerShell scripts for TFS 2012 build processes and how to publish Karma test results in the platform."},o=void 0,a={authorsImageUrls:[void 0]},u=[{value:"PowerShell via <code>csproj</code>",id:"powershell-via-csproj",level:2},{value:"Where&#39;s my <code>BuildNumber</code> and <code>BuildDefinitionName</code>?",id:"wheres-my-buildnumber-and-builddefinitionname",level:2},{value:"<code>AfterBuild.ps1</code>",id:"afterbuildps1",level:2},{value:"Bonus Karma: <code>test-results.trx</code>",id:"bonus-karma-test-resultstrx",level:2}];function d(e){let t={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"To my lasting regret, TFS 2012 has no direct support for PowerShell. Such a shame as PowerShell scripts can do a lot of heavy lifting in a build process. Well, here we're going to brute force TFS 2012 into running PowerShell scripts. And along the way we'll also get Karma test results publishing into TFS 2012 as an example usage. Nice huh? Let's go!"}),"\n",(0,n.jsxs)(t.h2,{id:"powershell-via-csproj",children:["PowerShell via ",(0,n.jsx)(t.code,{children:"csproj"})]}),"\n",(0,n.jsxs)(t.p,{children:["It's time to hack the ",(0,n.jsx)(t.code,{children:"csproj"})," (or whatever project file you have) again. We're going to add an ",(0,n.jsx)(t.code,{children:"AfterBuild"})," target to the end of the file. This target will be triggered after the build completes (as the name suggests):"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:"<Target Name=\"AfterBuild\">\n    <Message Importance=\"High\" Text=\"AfterBuild: PublishUrl = $(PublishUrl), BuildUri = $(BuildUri), Configuration = $(Configuration), ProjectDir = $(ProjectDir), TargetDir = $(TargetDir), TargetFileName = $(TargetFileName), BuildNumber = $(BuildNumber), BuildDefinitionName = $(BuildDefinitionName)\" />\n    <Exec Command=\"powershell.exe -NonInteractive -ExecutionPolicy RemoteSigned \"& '$(ProjectDir)AfterBuild.ps1' '$(Configuration)' '$(ProjectDir)' '$(TargetDir)' '$(PublishUrl)' '$(BuildNumber)' '$(BuildDefinitionName)'\"\" />\n  </Target>\n"})}),"\n",(0,n.jsx)(t.p,{children:"There's 2 things happening in this target:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["A message is printed out during compilation which contains details of the various compile time variables. This is nothing more than a ",(0,n.jsx)(t.code,{children:"console.log"})," statement really; it's useful for debugging and so I keep it around. You'll notice one of them is called ",(0,n.jsx)(t.code,{children:"$(BuildNumber)"}),"; more on that later."]}),"\n",(0,n.jsxs)(t.li,{children:["A command is executed; PowerShell! This invokes PowerShell with the ",(0,n.jsx)(t.code,{children:"-NonInteractive"})," and ",(0,n.jsx)(t.code,{children:"-ExecutionPolicy RemoteSigned"})," flags. It passes a script to be executed called ",(0,n.jsx)(t.code,{children:"AfterBuild.ps1"})," that lives in the root of the project directory. To that script a number of parameters are supplied; compile time variables that we may use in the script."]}),"\n"]}),"\n",(0,n.jsxs)(t.h2,{id:"wheres-my-buildnumber-and-builddefinitionname",children:["Where's my ",(0,n.jsx)(t.code,{children:"BuildNumber"})," and ",(0,n.jsx)(t.code,{children:"BuildDefinitionName"}),"?"]}),"\n",(0,n.jsxs)(t.p,{children:["So you've checked in your changes and kicked off a build on the server. You're picking over the log messages and you're thinking: \"Where's my ",(0,n.jsx)(t.code,{children:"BuildNumber"}),"?\". Well, TFS 2012 does not have that set as a variable at compile time by default. This stumped me for a while but thankfully I wasn't the only person wondering... As ever, ",(0,n.jsx)(t.a,{href:"http://stackoverflow.com/a/7330453/761388",children:"Stack Overflow had the answer"}),". So, deep breath, it's time to hack the TFS build template file."]}),"\n",(0,n.jsxs)(t.p,{children:["Checkout the ",(0,n.jsx)(t.code,{children:"DefaultTemplate.11.1.xaml"})," file from TFS and open it in your text editor of choice. It's ",(0,n.jsx)(t.em,{children:"find and replace"})," time! (There are probably 2 instances that need replacement.) Perform a ",(0,n.jsx)(t.em,{children:"find"})," for the below"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"[String.Format(&quot;/p:SkipInvalidConfigurations=true {0}&quot;, MSBuildArguments)]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["And ",(0,n.jsx)(t.em,{children:"replace"})," it with this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"[\n  String.Format(\n    '/p:SkipInvalidConfigurations=true /p:BuildNumber={1} /p:BuildDefinitionName={2} {0}',\n    MSBuildArguments,\n    BuildDetail.BuildNumber,\n    BuildDetail.BuildDefinition.Name,\n  ),\n];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Pretty long line eh? Let's try breaking that up to make it more readable: (but remember in the XAML it needs to be a one liner)"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:'[String.Format("/p:SkipInvalidConfigurations=true\n    /p:BuildNumber={1}\n    /p:BuildDefinitionName={2} {0}", MSBuildArguments, BuildDetail.BuildNumber, BuildDetail.BuildDefinition.Name)]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["We're just adding 2 extra parameters of ",(0,n.jsx)(t.code,{children:"BuildNumber"})," and ",(0,n.jsx)(t.code,{children:"BuildDefinitionName"})," to the invocation of MSBuild. Once we've checked this back in, ",(0,n.jsx)(t.code,{children:"BuildNumber"})," and ",(0,n.jsx)(t.code,{children:"BuildDefinitionName"})," will be available on future builds. Yay! ",(0,n.jsx)(t.em,{children:"Important! You must have a build name that does not feature spaces; probably there's a way to pass spaces here but I'm not sure what it is."})]}),"\n",(0,n.jsx)(t.h2,{id:"afterbuildps1",children:(0,n.jsx)(t.code,{children:"AfterBuild.ps1"})}),"\n",(0,n.jsxs)(t.p,{children:["You can use your ",(0,n.jsx)(t.code,{children:"AfterBuild.ps1"})," script to do any number of things. In my case I'm going to use MSTest to publish some test results which have been generated by Karma into TFS:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ps",children:'param ([string]$configuration, [string]$projectDir, [string]$targetDir, [string]$publishUrl, [string]$buildNumber, [string] $buildDefinitionName)\n\n$ErrorActionPreference = \'Stop\'\nClear\n\nfunction PublishTestResults([string]$resultsFile) {\n Write-Host \'PublishTests\'\n $mstest = \'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\MSTest.exe\'\n\n Write-Host "Using $mstest at $pwd"\n Write-Host "Publishing: $resultsFile"\n\n & $mstest /publishresultsfile:$resultsFile /publish:http://my-tfs-server:8080/tfs /teamproject:MyProject /publishbuild:$buildNumber /platform:\'Any CPU\' /flavor:Release\n}\n\nfunction FailBuildIfThereAreTestFailures([string]$resultsFile) {\n $results = [xml](GC $resultsFile)\n $outcome = $results.TestRun.ResultSummary.outcome\n $fgColor = if($outcome -eq "Failed") { "Red" } else { "Green" }\n $total = $results.TestRun.ResultSummary.Counters.total\n $passed = $results.TestRun.ResultSummary.Counters.passed\n $failed = $results.TestRun.ResultSummary.Counters.failed\n\n $failedTests = $results.TestRun.Results.UnitTestResult | Where-Object { $_.outcome -eq "Failed" }\n\n Write-Host Test Results: $outcome -ForegroundColor $fgColor -BackgroundColor "Black"\n Write-Host Total tests: $total\n Write-Host Passed: $passed\n Write-Host Failed: $failed\n Write-Host\n\n $failedTests | % { Write-Host Failed test: $_.testName\n  Write-Host $_.Output.ErrorInfo.Message\n  Write-Host $_.Output.ErrorInfo.StackTrace }\n\n Write-Host\n\n if($outcome -eq "Failed") {\n  Write-Host "Failing build as there are broken tests"\n  $host.SetShouldExit(1)\n }\n}\n\nfunction Run() {\n  Write-Host "Running AfterBuild.ps1 using Configuration: $configuration, projectDir: $projectDir, targetDir: $targetDir, publishUrl: $publishUrl, buildNumber: $buildNumber, buildDefinitionName: $buildDefinitionName"\n\n if($buildNumber) {\n  $resultsFile = "$projectDir\\test-results.trx"\n  PublishTestResults $resultsFile\n  FailBuildIfThereAreTestFailures $resultsFile\n }\n}\n\n# Off we go...\nRun\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Assuming we have a build number this script kicks off the ",(0,n.jsx)(t.code,{children:"PublishTestResults"})," function above. So we won't attempt to publish test results when compiling in Visual Studio on our dev machine. The script looks for ",(0,n.jsx)(t.code,{children:"MSTest.exe"})," in a certain location on disk (the default VS 2015 installation location in fact; it may be installed elsewhere on your build machine). MSTest is then invoked and passed a file called ",(0,n.jsx)(t.code,{children:"test-results.trx"})," which is is expected to live in the root of the project. All being well, the test results will be registered with the running build and will be visible when you look at test results in TFS."]}),"\n",(0,n.jsxs)(t.p,{children:["Finally in ",(0,n.jsx)(t.code,{children:"FailBuildIfThereAreTestFailures"})," we parse the ",(0,n.jsx)(t.code,{children:"test-results.trx"})," file (and for this I'm totally in the debt of ",(0,n.jsx)(t.a,{href:"https://gist.github.com/davidroberts63/5655441",children:"David Robert's helpful Gist"}),"). We write out the results to the host so it'll show up in the MSBuild logs. Also, and this is crucial, if there are any failures we fail the build by exiting PowerShell with a code of 1. We are deliberately swallowing any error that Karma raises earlier when it detects failed tests. We do this because we want to publish the failed test results to TFS ",(0,n.jsx)(t.em,{children:"before"})," we kill the build."]}),"\n",(0,n.jsxs)(t.h2,{id:"bonus-karma-test-resultstrx",children:["Bonus Karma: ",(0,n.jsx)(t.code,{children:"test-results.trx"})]}),"\n",(0,n.jsxs)(t.p,{children:["If you've read a ",(0,n.jsx)(t.a,{href:"/visual-studio-tsconfigjson-and-external",children:"previous post of mine"})," you'll be aware that it's possible to get MSBuild to kick off npm build tasks. Specifically I have MSBuild kicking off an ",(0,n.jsx)(t.code,{children:"npm run build"}),". My ",(0,n.jsx)(t.code,{children:"package.json"})," looks like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'"scripts": {\n    "test": "karma start --reporters mocha,trx --single-run --browsers PhantomJS",\n    "clean": "gulp delete-dist-contents",\n    "watch": "gulp watch",\n    "build": "gulp build",\n    "postbuild": "npm run test"\n  },\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can see that the ",(0,n.jsx)(t.code,{children:"postbuild"})," hook kicks off the ",(0,n.jsx)(t.code,{children:"test"})," script in turn. And that ",(0,n.jsx)(t.code,{children:"test"})," script kicks off a single run of karma. I'm not going to go over setting up Karma at all here; there are other posts out there that cover that admirably. But I wanted to share news of the ",(0,n.jsx)(t.a,{href:"https://www.npmjs.com/package/karma-trx-reporter",children:"karma trx reporter"}),". This reporter is the thing that produces our ",(0,n.jsx)(t.code,{children:"test-results.trx"})," file; trx being the format that TFS likes to deal with."]}),"\n",(0,n.jsx)(t.p,{children:"So now we've got a PowerShell hook into our build process (something very useful in itself) which we are using to publish Karma test results into TFS 2012. They said it couldn't be done. They were wrong. Huzzah!!!!!!!"})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},50065:function(e,t,i){i.d(t,{Z:function(){return o},a:function(){return l}});var r=i(67294);let n={},s=r.createContext(n);function l(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(s.Provider,{value:t},e.children)}},6802:function(e){e.exports=JSON.parse('{"permalink":"/tfs-2012-meet-powershell-karma-and-buildnumber","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2016-03-04-tfs-2012-meet-powershell-karma-and-buildnumber/index.md","source":"@site/blog/2016-03-04-tfs-2012-meet-powershell-karma-and-buildnumber/index.md","title":"TFS 2012 meet PowerShell, Karma and BuildNumber","description":"This guide explains how to run PowerShell scripts for TFS 2012 build processes and how to publish Karma test results in the platform.","date":"2016-03-04T00:00:00.000Z","tags":[{"inline":false,"label":"Azure DevOps","permalink":"/tags/azure-devops","description":"The Azure DevOps suite of tools."}],"readingTime":5.405,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"tfs-2012-meet-powershell-karma-and-buildnumber","title":"TFS 2012 meet PowerShell, Karma and BuildNumber","authors":"johnnyreilly","tags":["azure devops"],"hide_table_of_contents":false,"description":"This guide explains how to run PowerShell scripts for TFS 2012 build processes and how to publish Karma test results in the platform."},"unlisted":false,"prevItem":{"title":"Atom - Recovering from Corrupted Packages","permalink":"/atom-recovering-from-corrupted-packages"},"nextItem":{"title":"Creating Angular UI Routes in the Controller","permalink":"/creating-angular-ui-routes-in-controller"}}')}}]);