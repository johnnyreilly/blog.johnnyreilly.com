"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[60967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=o,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},19083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});n(67294);var a=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={slug:"you-might-not-need-thread-loader",title:"You Might Not Need thread-loader",authors:"johnnyreilly",tags:["fork-ts-checker-webpack-plugin","ts-loader","webpack"],hide_table_of_contents:!1,description:"Jan Nicklas, the creator of webpack-config-plugins, suggests limiting the use of thread-loader for costly operations via `poolTimeout: Infinity`."},p=void 0,s={permalink:"/you-might-not-need-thread-loader",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2018-12-22-you-might-not-need-thread-loader/index.md",source:"@site/blog/2018-12-22-you-might-not-need-thread-loader/index.md",title:"You Might Not Need thread-loader",description:"Jan Nicklas, the creator of webpack-config-plugins, suggests limiting the use of thread-loader for costly operations via `poolTimeout: Infinity`.",date:"2018-12-22T00:00:00.000Z",formattedDate:"December 22, 2018",tags:[{label:"fork-ts-checker-webpack-plugin",permalink:"/tags/fork-ts-checker-webpack-plugin"},{label:"ts-loader",permalink:"/tags/ts-loader"},{label:"webpack",permalink:"/tags/webpack"}],readingTime:3.68,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"you-might-not-need-thread-loader",title:"You Might Not Need thread-loader",authors:"johnnyreilly",tags:["fork-ts-checker-webpack-plugin","ts-loader","webpack"],hide_table_of_contents:!1,description:"Jan Nicklas, the creator of webpack-config-plugins, suggests limiting the use of thread-loader for costly operations via `poolTimeout: Infinity`."},prevItem:{title:"GitHub Actions and Yarn",permalink:"/github-actions-and-yarn"},nextItem:{title:"IMemoryCache and GetOrCreateForTimeSpanAsync",permalink:"/dotnet-imemorycache-getorcreatefortimespanasync"}},c={authorsImageUrls:[void 0]},u=[{value:"All I Want For Christmas is Faster Builds",id:"all-i-want-for-christmas-is-faster-builds",level:2},{value:"<code>thread-loader</code>: Infinity War",id:"thread-loader-infinity-war",level:2},{value:"&quot;Maybe You&#39;ve Thread Enough&quot;",id:"maybe-youve-thread-enough",level:2}],d={toc:u},h="wrapper";function m(e){var{components:t}=e,l=i(e,["components"]);return(0,a.kt)(h,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},d,l),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It all started with a GitHub issue. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/namics/webpack-config-plugins/issues/24"},"Ernst Ammann reported"),":"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Without the thread-loader, compilation takes three to four times less time on changes. We could remove it.")),(0,a.kt)("p",null,"If you're not aware of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/namics/webpack-config-plugins"},(0,a.kt)("inlineCode",{parentName:"a"},"webpack-config-plugins"))," project then I commend it to you. Famously, webpack configuration can prove tricky. ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack-config-plugins")," borrows the idea of presets from Babel. It provides a number of pluggable webpack configurations which give a best practice setup for different webpack use cases. So if you're no expert with webpack and you want a good setup for building your TypeScript / Sass / JavaScript then ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack-config-plugins")," has got your back."),(0,a.kt)("p",null,"One of the people behind the project is the very excellent ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jantimon"},"Jan Nicklas")," who is well known for his work on the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jantimon/html-webpack-plugin"},(0,a.kt)("inlineCode",{parentName:"a"},"html-webpack-plugin")),"."),(0,a.kt)("p",null,"It was Jan who responded to Ernst's issue and decided to look into it."),(0,a.kt)("h2",{id:"all-i-want-for-christmas-is-faster-builds"},"All I Want For Christmas is Faster Builds"),(0,a.kt)("p",null,"Everyone wants fast builds. I do. You do. We all do. ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack-config-plugins")," is about giving these to the user in a precooked package."),(0,a.kt)("p",null,"There's a webpack loader called ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/webpack-contrib/thread-loader"},(0,a.kt)("inlineCode",{parentName:"a"},"thread-loader"))," which spawns multiple processes and splits up work between them. It was originally inspired by the work in the happypack project which does a similar thing."),(0,a.kt)("p",null,"I wrote ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/p/83cc568dea79"},"a blog post")," some time ago which gave details about ways to speed up your TypeScript builds by combining the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/TypeStrong/ts-loader"},(0,a.kt)("inlineCode",{parentName:"a"},"ts-loader"))," project (which I manage) with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Realytics/fork-ts-checker-webpack-plugin"},(0,a.kt)("inlineCode",{parentName:"a"},"fork-ts-checker-webpack-plugin"))," project (which I'm heavily involved with)."),(0,a.kt)("p",null,"That post was written back in the days of webpack 2 / 3. It advocated use of both ",(0,a.kt)("inlineCode",{parentName:"p"},"happypack")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," to drop your build times even further. As you'll see, now that we're well into the world of webpack 4 (with webpack 5 waiting in the wings) the advantage of ",(0,a.kt)("inlineCode",{parentName:"p"},"happypack")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," are no longer so profound."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"webpack-config-plugins")," follows the advice I set out in my post; it uses ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," in its pluggable configurations. Now, back to Ernst's issue."),(0,a.kt)("h2",{id:"thread-loader-infinity-war"},(0,a.kt)("inlineCode",{parentName:"h2"},"thread-loader"),": Infinity War"),(0,a.kt)("p",null,"Jan quickly identified the problem. He did that rarest of things; he read the documentation which said:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// timeout for killing the worker processes when idle\n      // defaults to 500 (ms)\n      // can be set to Infinity for watching builds to keep workers alive\n      poolTimeout: 2000,\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack-config-plugins")," configurations (running in watch mode) were subject to the thread loaders being killed after 500ms. They got resurrected when they were next needed; but that's not as instant as you might hope. Jan then did a test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"(default pool - 30 runs - 1000 components ) average: 2.668068965517241\n(no thread-loader - 30 runs - 1000 components ) average: 1.2674137931034484\n(Infinity pool - 30 runs - 1000 components ) average: 1.371827586206896\n")),(0,a.kt)("p",null,"This demonstrates that using ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," in watch mode with ",(0,a.kt)("inlineCode",{parentName:"p"},"poolTimeout: Infinity")," performs significantly better than when it defaults to 500ms. But perhaps more significantly, not using ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," performs even better still."),(0,a.kt)("h2",{id:"maybe-youve-thread-enough"},'"Maybe You\'ve Thread Enough"'),(0,a.kt)("p",null,"When I tested using ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," in watch mode with ",(0,a.kt)("inlineCode",{parentName:"p"},"poolTimeout: Infinity")," on my own builds I got the same benefit Jan had. I also got ",(0,a.kt)("em",{parentName:"p"},"even")," more benefit from dropping ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," entirely."),(0,a.kt)("p",null,"A likely reason for this benefit is that typically when you're developing, you're working on one file at a time. Hence you only transpile one file at a time:"),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"eager",fetchpriority:"high",src:n(97023).Z,width:"640",height:"173"})),(0,a.kt)("p",null,"So there's not a great deal of value that ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," can add here; mostly it's twiddling thumbs and adding an overhead. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/webpack-contrib/thread-loader/blob/master/README/index.md#usage"},"To quote the docs:")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Each worker is a separate node.js process, which has an overhead of ","~","600ms. There is also an overhead of inter-process communication."),(0,a.kt)("p",{parentName:"blockquote"},"Use this loader only for expensive operations!")),(0,a.kt)("p",null,"Now, my build is not your build. I can't guarantee that you'll get the same results as Jan and I experienced; but I would encourage you to investigate if you're using ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," correctly and whether it's actually helping you. In these days of webpack 4+ perhaps it isn't."),(0,a.kt)("p",null,"There are still scenarios where ",(0,a.kt)("inlineCode",{parentName:"p"},"thread-loader")," still provides an advantage. It can speed up production builds. It can speed up the initial startup of watch mode. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/webpack-contrib/thread-loader/pull/52"},"In fact Jan has subsequently actually improved the ",(0,a.kt)("inlineCode",{parentName:"a"},"thread-loader")," to that specific end.")," Yay Jan!"),(0,a.kt)("p",null,"If this is all too much for you, and you want to hand off the concern to someone else then perhaps all of this serves as a motivation to just sit back, put your feet up and start using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/namics/webpack-config-plugins"},(0,a.kt)("inlineCode",{parentName:"a"},"webpack-config-plugins"))," instead of doing your own configuration."))}m.isMDXComponent=!0},97023:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ts-profile2-4c5d8cf4610f69e36465d4ec955ae94a.webp"}}]);