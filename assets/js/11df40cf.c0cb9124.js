"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([["46337"],{14064:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return h},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return l}});var i=t(95732),o=t(85893),s=t(50065);let r={slug:"github-actions-and-yarn",title:"GitHub Actions and Yarn",authors:"johnnyreilly",tags:["github actions","node.js"],hide_table_of_contents:!1,description:"Automate npm publishing using GitHub Actions; use `npm` GitHub Action with yarn or any Docker container with Node/npm installed."},a=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Automate What?",id:"automate-what",level:2},{value:"GitHub Action for <code>npm</code>",id:"github-action-for-npm",level:2},{value:"GitHub Action for <code>npm</code> for <code>yarn</code>",id:"github-action-for-npm-for-yarn",level:2},{value:"Going With The Workflow",id:"going-with-the-workflow",level:2},{value:"You Don&#39;t Actually Need the npm GitHub Action",id:"you-dont-actually-need-the-npm-github-action",level:2}];function d(e){let n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["I'd been meaning to automate the npm publishing of ",(0,o.jsx)(n.a,{href:"https://github.com/TypeStrong/ts-loader",children:(0,o.jsx)(n.code,{children:"ts-loader"})})," for the longest time. I had attempted to use Travis to do this in the same way as ",(0,o.jsx)(n.a,{href:"https://github.com/Realytics/fork-ts-checker-webpack-plugin",children:(0,o.jsx)(n.code,{children:"fork-ts-checker-webpack-plugin"})}),". Alas using secure environment variables in Travis has unfortunate implications for ts-loader's test pack."]}),"\n",(0,o.jsx)(n.p,{children:"Be not afeard. I've heard there's a new shiny thing from GitHub that I could use instead... It's a sign; I must use it!"}),"\n",(0,o.jsxs)(n.p,{children:["GitHub Actions are still in beta. Technically Actions are ",(0,o.jsx)(n.a,{href:"https://developer.github.com/actions/creating-github-actions/",children:"code run in Docker containers"})," in response to events. This didn't mean a great deal to me until I started thinking about what I wanted to do with ",(0,o.jsx)(n.code,{children:"ts-loader"}),"'s publishing flow."]}),"\n",(0,o.jsx)(n.h2,{id:"automate-what",children:"Automate What?"}),"\n",(0,o.jsxs)(n.p,{children:["Each time I publish a release of ",(0,o.jsx)(n.code,{children:"ts-loader"})," I execute the following node commands by hand:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"yarn install"})," - to install ",(0,o.jsx)(n.code,{children:"ts-loader"}),"'s dependencies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"yarn build"})," - to build ",(0,o.jsx)(n.code,{children:"ts-loader"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"yarn test"})," - to run ",(0,o.jsx)(n.code,{children:"ts-loader"}),"'s test packs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"npm publish"})," - to publish the release of ",(0,o.jsx)(n.code,{children:"ts-loader"})," to npm"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Having read up on GitHub Actions it seemed like they were born to handle this sort of task."}),"\n",(0,o.jsxs)(n.h2,{id:"github-action-for-npm",children:["GitHub Action for ",(0,o.jsx)(n.code,{children:"npm"})]}),"\n",(0,o.jsxs)(n.p,{children:["I quickly discovered that someone out there ",(0,o.jsx)("s",{children:"loves me"})]}),"\n",(0,o.jsxs)(n.p,{children:["had ",(0,o.jsxs)(n.a,{href:"https://github.com/actions/npm",children:["already written a GitHub Action for ",(0,o.jsx)(n.code,{children:"npm"})]}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The example in the ",(0,o.jsx)(n.code,{children:"README/index.md"})," could be easily tweaked to meet my needs with one caveat: I had to use ",(0,o.jsx)(n.code,{children:"npm"})," in place of ",(0,o.jsx)(n.code,{children:"yarn"}),". I didn't want to switch from ",(0,o.jsx)(n.code,{children:"yarn"}),". What to do?"]}),"\n",(0,o.jsxs)(n.p,{children:["Well, remember when I said actions are code run in Docker containers? Another way to phrase that is to say: GitHub Actions are Docker images. Let's look under the covers of the ",(0,o.jsx)(n.code,{children:"npm"})," GitHub Action. As we peer inside the ",(0,o.jsx)(n.a,{href:"https://github.com/actions/npm/blob/e7aaefed7c9f2e83d493ff810f17fa5ccd7ed437/Dockerfile#L1",children:(0,o.jsx)(n.code,{children:"Dockerfile"})})," what do we find?"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"FROM node:10-slim\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Hmmmm.... Interesting. The base image of the ",(0,o.jsx)(n.code,{children:"npm"})," GitHub Action is ",(0,o.jsx)(n.code,{children:"node:10-slim"}),". Looking it up, it seems the ",(0,o.jsx)(n.code,{children:"-slim"})," Docker images come with ",(0,o.jsxs)(n.a,{href:"https://github.com/nodejs/docker-node/blob/master/Dockerfile-slim.template",children:[(0,o.jsx)(n.code,{children:"yarn"})," included"]}),". Which means we should be able to use ",(0,o.jsx)(n.code,{children:"yarn"})," inside the ",(0,o.jsx)(n.code,{children:"npm"})," GitHub Action. Nice!"]}),"\n",(0,o.jsxs)(n.h2,{id:"github-action-for-npm-for-yarn",children:["GitHub Action for ",(0,o.jsx)(n.code,{children:"npm"})," for ",(0,o.jsx)(n.code,{children:"yarn"})]}),"\n",(0,o.jsxs)(n.p,{children:["Using ",(0,o.jsx)(n.code,{children:"yarn"})," from the GitHub Action for ",(0,o.jsx)(n.code,{children:"npm"})," is delightfully simple. Here's what running ",(0,o.jsx)(n.code,{children:"npm install"})," looks like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'# install with npm\naction "install" {\n  uses = "actions/npm@1.0.0"\n  args = "install"\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Pivoting to use ",(0,o.jsx)(n.code,{children:"yarn install"})," instead of ",(0,o.jsx)(n.code,{children:"npm install"})," is as simple as:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'# install with yarn\naction "install" {\n  uses = "actions/npm@1.0.0"\n  runs = "yarn"\n  args = "install"\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can see we've introduced the ",(0,o.jsx)(n.code,{children:'runs = "yarn"'})," and after that the ",(0,o.jsx)(n.code,{children:"args"})," are whatever you need them to be."]}),"\n",(0,o.jsx)(n.h2,{id:"going-with-the-workflow",children:"Going With The Workflow"}),"\n",(0,o.jsx)(n.p,{children:"A GitHub Workflow that implements the steps I need would look like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'workflow "build, test and publish on release" {\n  on = "push"\n  resolves = "publish"\n}\n\n# install with yarn\naction "install" {\n  uses = "actions/npm@1.0.0"\n  runs = "yarn"\n  args = "install"\n}\n\n# build with yarn\naction "build" {\n  needs = "install"\n  uses = "actions/npm@1.0.0"\n  runs = "yarn"\n  args = "build"\n}\n\n# test with yarn\naction "test" {\n  needs = "build"\n  uses = "actions/npm@1.0.0"\n  runs = "yarn"\n  args = "test"\n}\n\n# filter for a new tag\naction "check for new tag" {\n  needs = "Test"\n  uses = "actions/bin/filter@master"\n  args = "tag"\n}\n\n# publish with npm\naction "publish" {\n  needs = "check for new tag"\n  uses = "actions/npm@1.0.0"\n  args = "publish"\n  secrets = ["NPM_AUTH_TOKEN"]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, this is a direct automation of steps 1-4 I listed earlier. Since all these actions are executed in the same container, we can skip from ",(0,o.jsx)(n.code,{children:"yarn"})," to ",(0,o.jsx)(n.code,{children:"npm"})," with gay abandon."]}),"\n",(0,o.jsxs)(n.p,{children:["What's absolutely amazing is, when I got access to GitHub Actions ",(0,o.jsx)(n.a,{href:"https://github.com/TypeStrong/ts-loader/blob/master/.github/main.workflow",children:"my hand crafted workflow"})," looked like it should work first time! I know, right? Don't you love it when that happens? ",(0,o.jsx)(n.a,{href:"https://github.com/actions/bin/issues/13",children:"Alas there's presently a problem with filters in GitHub Actions"}),". But that's by the by, if you're just looking to use a GitHub Action with yarn instead of npm then you are home free."]}),"\n",(0,o.jsx)(n.h2,{id:"you-dont-actually-need-the-npm-github-action",children:"You Don't Actually Need the npm GitHub Action"}),"\n",(0,o.jsx)(n.p,{children:"You heard me right. Docker containers be Docker containers. You don't actually need to use this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'uses = "actions/npm@1.0.0"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can use ",(0,o.jsx)(n.em,{children:"any"})," Docker container which has node / npm installed! So if you'd like to use say node 11 instead you could just do this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'uses = "docker://node:11"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Which would use the node 11 image on ",(0,o.jsx)(n.a,{href:"https://hub.docker.com/_/node",children:"docker hub"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Which is pretty cool. You know what's even more incredible? Inside a workflow you can switch ",(0,o.jsx)(n.code,{children:"uses"})," mid-workflow and keep the output. That's right; you can have a work flow with say three actions running ",(0,o.jsx)(n.code,{children:'uses = "docker://node:11"'})," and then a fourth running ",(0,o.jsx)(n.code,{children:'uses = "actions/npm@1.0.0"'}),". That's ",(0,o.jsx)(n.em,{children:"so"})," flexible and powerful!"]}),"\n",(0,o.jsxs)(n.p,{children:["Thanks to ",(0,o.jsx)(n.a,{href:"https://github.com/mcolyer",children:"Matt Colyer"})," and ",(0,o.jsx)(n.a,{href:"https://github.com/LandonSchropp",children:"Landon Schropp"})," for ",(0,o.jsx)(n.a,{href:"https://github.com/actions/npm/issues/9",children:"schooling me on the intricicies of GitHub Actions"}),". Much \u2764"]})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var i=t(67294);let o={},s=i.createContext(o);function r(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},95732:function(e){e.exports=JSON.parse('{"permalink":"/github-actions-and-yarn","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2019-01-05-github-actions-and-yarn/index.md","source":"@site/blog/2019-01-05-github-actions-and-yarn/index.md","title":"GitHub Actions and Yarn","description":"Automate npm publishing using GitHub Actions; use `npm` GitHub Action with yarn or any Docker container with Node/npm installed.","date":"2019-01-05T00:00:00.000Z","tags":[{"inline":false,"label":"GitHub Actions","permalink":"/tags/github-actions","description":"The GitHub Actions CI / CD service."},{"inline":false,"label":"Node.js","permalink":"/tags/node-js","description":"The Node.js runtime."}],"readingTime":4,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"github-actions-and-yarn","title":"GitHub Actions and Yarn","authors":"johnnyreilly","tags":["github actions","node.js"],"hide_table_of_contents":false,"description":"Automate npm publishing using GitHub Actions; use `npm` GitHub Action with yarn or any Docker container with Node/npm installed."},"unlisted":false,"prevItem":{"title":"TypeScript and webpack: Watch It","permalink":"/typescript-and-webpack-watch-it"},"nextItem":{"title":"You Might Not Need thread-loader","permalink":"/you-might-not-need-thread-loader"}}')}}]);