"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[57393],{1681:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Screenshot-2014-09-06-21.43.15-5e25ff0477bfc04d2262532fb4cc065c.webp"},6917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var s=n(76855),i=n(74848),a=n(28453);const r={slug:"running-javascript-unit-tests-in-appveyor",title:"Running JavaScript Unit Tests in AppVeyor",authors:"johnnyreilly",tags:["javascript","automated testing"],hide_table_of_contents:!1,description:"AppVeyor and Chutzpah were integrated to run C# and JavaScript unit tests in a single PowerShell script for CI purposes."},o=void 0,h={authorsImageUrls:[void 0]},l=[{value:"With a little help from Chutzpah...",id:"with-a-little-help-from-chutzpah",level:2},{value:"NuGet me?",id:"nuget-me",level:2},{value:"Now to use Chutzpah",id:"now-to-use-chutzpah",level:2},{value:"Thanks to...",id:"thanks-to",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"with-a-little-help-from-chutzpah",children:"With a little help from Chutzpah..."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"http://www.appveyor.com",children:"AppVeyor"})," (if you're not aware of it) is a Continuous Integration provider. If you like, it's plug-and-play CI for .NET developers. It's lovely. And what's more it's ",(0,i.jsx)(t.a,{href:"http://www.appveyor.com/pricing",children:'"free for open-source projects with public repositories hosted on GitHub and BitBucket"'}),". Boom! I recently hooked up 2 of my GitHub projects with AppVeyor. It took me all of... 10 minutes. If that? It really is *",(0,i.jsx)(t.strong,{children:"that"}),"* good."]}),"\n",(0,i.jsxs)(t.p,{children:["But.... There had to be a \"but\" otherwise I wouldn't have been writing the post you're reading. For a little side project of mine called ",(0,i.jsx)(t.a,{href:"https://github.com/johnnyreilly/Proverb",children:"Proverb"})," there were C# unit tests and there were JavaScript unit tests. And the JavaScript unit tests weren't being run... No fair!!!"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://chutzpah.codeplex.com/",children:"Chutzpah"})," is a JavaScript test runner which at this point runs QUnit, Jasmine and Mocha JavaScript tests. I use the ",(0,i.jsx)(t.a,{href:"http://visualstudiogallery.msdn.microsoft.com/f8741f04-bae4-4900-81c7-7c9bfb9ed1fe",children:"Visual Studio extension"})," to run Jasmine tests on my machine during development. I've also been able to use ",(0,i.jsx)(t.a,{href:"/the-surprisingly-happy-tale-of-visual",children:"Chutzpah for CI purposes with Visual Studio Online / Team Foundation Server"}),". So what say we try and do the triple and make it work with AppVeyor too?"]}),"\n",(0,i.jsx)(t.h2,{id:"nuget-me",children:"NuGet me?"}),"\n",(0,i.jsx)(t.p,{children:"In order that I could run Chutzpah I needed Chutzpah to be installed on the build machine. So I had 2 choices:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Add Chutzpah direct to the repo"}),"\n",(0,i.jsxs)(t.li,{children:["Add the ",(0,i.jsx)(t.a,{href:"http://www.nuget.org/packages/chutzpah",children:"Chutzpah Nuget package"})," to the solution"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Unsurprisingly I chose #2 - much cleaner."}),"\n",(0,i.jsx)(t.h2,{id:"now-to-use-chutzpah",children:"Now to use Chutzpah"}),"\n",(0,i.jsx)(t.p,{children:'Time to dust down the PowerShell. I created myself a "before tests script" and added it to my build. It looked a little something like this:'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ps",children:'# Locate Chutzpah\n\n$ChutzpahDir = get-childitem chutzpah.console.exe -recurse | select-object -first 1 | select -expand Directory\n\n# Run tests using Chutzpah and export results as JUnit format to chutzpah-results.xml\n\n$ChutzpahCmd = "$($ChutzpahDir)\\chutzpah.console.exe $($env:APPVEYOR_BUILD_FOLDER)\\AngularTypeScript\\Proverb.Web.Tests.JavaScript /junit .\\chutzpah-results.xml"\nWrite-Host $ChutzpahCmd\nInvoke-Expression $ChutzpahCmd\n\n# Upload results to AppVeyor one by one\n\n$testsuites = [xml](get-content .\\chutzpah-results.xml)\n\n$anyFailures = $FALSE\nforeach ($testsuite in $testsuites.testsuites.testsuite) {\n    write-host " $($testsuite.name)"\n    foreach ($testcase in $testsuite.testcase){\n        $failed = $testcase.failure\n        $time = $testsuite.time\n        if ($testcase.time) { $time = $testcase.time }\n        if ($failed) {\n            write-host "Failed   $($testcase.name) $($testcase.failure.message)"\n            Add-AppveyorTest $testcase.name -Outcome Failed -FileName $testsuite.name -ErrorMessage $testcase.failure.message -Duration $time\n            $anyFailures = $TRUE\n        }\n        else {\n            write-host "Passed   $($testcase.name)"\n            Add-AppveyorTest $testcase.name -Outcome Passed -FileName $testsuite.name -Duration $time\n        }\n\n    }\n}\n\nif ($anyFailures -eq $TRUE){\n    write-host "Failing build as there are broken tests"\n    $host.SetShouldExit(1)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"What this does is:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Run Chutzpah from the installed NuGet package location, passing in the location of my Jasmine unit tests. In the case of my project there is a ",(0,i.jsx)(t.code,{children:"chutzpah.json"})," file in the project which dictates how Chutzpah should run the tests. Also, ",(0,i.jsx)(t.a,{href:"https://chutzpah.codeplex.com/wikipage?title=Command%20Line%20Options&referringTitle=Documentation",children:"the JUnit flag is also passed"})," in order that Chutzpah creates a ",(0,i.jsx)(t.code,{children:"chutzpah-results.xml"})," file of test results in the JUnit format."]}),"\n",(0,i.jsxs)(t.li,{children:["We iterate through test results and tell AppVeyor about the the test passes and failures using the ",(0,i.jsx)(t.a,{href:"http://www.appveyor.com/docs/build-worker-api",children:"Build Worker API"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["If there have been any failed tests then we fail the build. If you look ",(0,i.jsx)(t.a,{href:"https://ci.appveyor.com/project/JohnReilly/proverb/build/1.0.17",children:"here"})," you can see a deliberately failed build which demo's that this works as it should."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"That's a wrap - We now have CI which includes our JavaScript tests! That's right we get to see beautiful screens like these:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(1681).A+"",width:"640",height:"578",loading:"lazy"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(36042).A+"",width:"579",height:"640",loading:"lazy"})}),"\n",(0,i.jsx)(t.h2,{id:"thanks-to",children:"Thanks to..."}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to Dan Jones, whose comments on ",(0,i.jsx)(t.a,{href:"http://help.appveyor.com/discussions/questions/390-running-jasmine-on-appveyor#comment_34433599",children:"this discussion"})," provided a number of useful pointers which moved me in the right direction. And thanks to Feador Fitzner who has generously ",(0,i.jsx)(t.a,{href:"http://help.appveyor.com/discussions/questions/495-integrating-chutzpah-into-appveyor#comment_34447202",children:"said AppVeyor will support JUnit in the future"})," which may simplify use of Chutzpah with AppVeyor even further."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},36042:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Screenshot-2014-09-06-21.49.38-07607fe83d2edca25166cafa3321d7b3.webp"},76855:e=>{e.exports=JSON.parse('{"permalink":"/running-javascript-unit-tests-in-appveyor","editUrl":"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2014-09-06-running-javascript-unit-tests-in-appveyor/index.md","source":"@site/blog/2014-09-06-running-javascript-unit-tests-in-appveyor/index.md","title":"Running JavaScript Unit Tests in AppVeyor","description":"AppVeyor and Chutzpah were integrated to run C# and JavaScript unit tests in a single PowerShell script for CI purposes.","date":"2014-09-06T00:00:00.000Z","tags":[{"inline":false,"label":"JavaScript","permalink":"/tags/javascript","description":"The JavaScript programming language."},{"inline":false,"label":"Automated Testing","permalink":"/tags/automated-testing","description":"How to perform the automation of tests."}],"readingTime":3.34,"hasTruncateMarker":true,"authors":[{"name":"John Reilly","title":"OSS Engineer - TypeScript, Azure, React, Node.js, .NET","url":"https://johnnyreilly.com/about","imageURL":"https://johnnyreilly.com/img/profile-2025.jpg","key":"johnnyreilly","page":null}],"frontMatter":{"slug":"running-javascript-unit-tests-in-appveyor","title":"Running JavaScript Unit Tests in AppVeyor","authors":"johnnyreilly","tags":["javascript","automated testing"],"hide_table_of_contents":false,"description":"AppVeyor and Chutzpah were integrated to run C# and JavaScript unit tests in a single PowerShell script for CI purposes."},"unlisted":false,"prevItem":{"title":"Unit Testing an Angular Controller with Jasmine","permalink":"/unit-testing-angular-controller-with"},"nextItem":{"title":"My Unrequited Love for Isolate Scope","permalink":"/my-unrequited-love-for-isolate-scope"}}')}}]);