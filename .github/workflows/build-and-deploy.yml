name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_swa_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and deploy static web app
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep / get API key for deployment
        id: apikey
        uses: azure/CLI@v1
        with:
          inlineScript: |
            RESOURCE_GROUP='rg-blog-johnnyreilly-com'
            REF_SHA='${{ github.ref }}.${{ github.sha }}'
            DEPLOYMENT_NAME="${REF_SHA////-}"
            # DEPLOYMENT_NAME="static-web-app"
            STATICWEBAPPNAME='blog.johnnyreilly.com'
            TAGS='{"owner":"johnnyreilly", "email":"johnny_reilly@hotmail.com"}'

            az deployment group create \
              --resource-group $RESOURCE_GROUP \
              --name "$DEPLOYMENT_NAME" \
              --template-file ./infra/main.bicep \
              --parameters \
                  branch='main' \
                  name="$STATICWEBAPPNAME" \
                  tags="$TAGS" \
                  repositoryToken="${{ secrets.WORKFLOW_TOKEN }}"

            DEFAULTHOSTNAME=$(az deployment group show -g $RESOURCE_GROUP -n $DEPLOYMENT_NAME --query properties.outputs.staticWebAppDefaultHostName.value -o tsv)
            echo $DEFAULTHOSTNAME

            APIKEY=$(az staticwebapp secrets list --name $STATICWEBAPPNAME | jq -r '.properties.apiKey')
            echo "::set-output name=APIKEY::$APIKEY"

      - name: Build And Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.apikey.outputs.APIKEY }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: '/blog-website' # App source code path
          api_location: '' # Api source code path - optional
          output_location: 'build' # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get API key for deployment
        id: apikey
        uses: azure/CLI@v1
        if: github.event_name != 'pull_request'
        with:
          inlineScript: |
            APIKEY=$(az staticwebapp secrets list --name $(staticWebAppName) | jq -r '.properties.apiKey')
            echo "::set-output name=APIKEY::$APIKEY"

      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.apikey.outputs.APIKEY }}
          action: 'close'

  checks-docusaurus:
    if: github.event_name != 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: Test Docusaurus Build
        run: |
          cd blog-website
          if [ -e yarn.lock ]; then
          # yarn install --frozen-lockfile
          yarn install
          elif [ -e package-lock.json ]; then
          npm ci
          else
          npm i
          fi
          npm run build

  # checks-blogger:
  #   if: github.event_name != 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '16.x'

  #     - name: Test Blogger Publish
  #       run: |
  #         cd from-docusaurus-to-blogger
  #         if [ -e yarn.lock ]; then
  #         yarn install --frozen-lockfile
  #         elif [ -e package-lock.json ]; then
  #         npm ci
  #         else
  #         npm i
  #         fi
  #         yarn publish-blogs --clientId ${{ secrets.BLOGGER_CLIENT_ID }} --clientSecret ${{ secrets.BLOGGER_CLIENT_SECRET }} --refreshToken ${{ secrets.BLOGGER_REFRESH_TOKEN }} --test

  deploy-to-github:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: Add key to allow access to repository
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          cd blog-website
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.GH_PAGES_DEPLOY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat <<EOT >> ~/.ssh/config
          Host github.com
          HostName github.com
          IdentityFile ~/.ssh/id_rsa
          EOT

      - name: Release to GitHub Pages
        env:
          USE_SSH: true
          GIT_USER: git
        run: |
          cd blog-website
          git config --global user.email "actions@gihub.com"
          git config --global user.name "gh-actions"
          if [ -e yarn.lock ]; then
          # yarn install --frozen-lockfile
          yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
          npm ci
          else
          npm i
          fi
          npx docusaurus deploy

  # deploy-to-blogger:
  #   if: github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '16.x'

  #     - name: Publish to Blogger
  #       run: |
  #         cd from-docusaurus-to-blogger
  #         if [ -e yarn.lock ]; then
  #         # yarn install --frozen-lockfile
  #         yarn install
  #         elif [ -e package-lock.json ]; then
  #         npm ci
  #         else
  #         npm i
  #         fi
  #         yarn publish-blogs --clientId ${{ secrets.BLOGGER_CLIENT_ID }} --clientSecret ${{ secrets.BLOGGER_CLIENT_SECRET }} --refreshToken ${{ secrets.BLOGGER_REFRESH_TOKEN }}
